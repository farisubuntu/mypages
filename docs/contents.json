{
  "paths": [
    {
      "type": "dir",
      "name": "CSS",
      "children": [
        {
          "type": "file",
          "value": "CSS/css-media-and-rwd.md"
        },
        {
          "type": "file",
          "value": "CSS/css-naming-convention.md"
        },
        {
          "type": "file",
          "value": "CSS/css_page_media.md"
        },
        {
          "type": "file",
          "value": "CSS/flexbox-review.md"
        },
        {
          "type": "file",
          "value": "CSS/grid-review.md"
        },
        {
          "type": "file",
          "value": "CSS/notes_grid_or_flexbox.md"
        },
        {
          "type": "file",
          "value": "CSS/rwd-snippets.md"
        },
        {
          "type": "file",
          "value": "CSS/sizing_items_in_css.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Github",
      "children": [
        {
          "type": "file",
          "value": "Github/gcm.md"
        },
        {
          "type": "file",
          "value": "Github/git-branching.md"
        },
        {
          "type": "file",
          "value": "Github/git-flight-rules.md"
        },
        {
          "type": "file",
          "value": "Github/git-gcm-configure.md"
        },
        {
          "type": "file",
          "value": "Github/git.md"
        },
        {
          "type": "file",
          "value": "Github/gitpod.md"
        },
        {
          "type": "file",
          "value": "Github/integrate_github_with_wordpress.md"
        },
        {
          "type": "file",
          "value": "Github/md-to-github.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Leaf-3",
      "children": [
        {
          "type": "file",
          "value": "Leaf-3/basic.md"
        },
        {
          "type": "file",
          "value": "Leaf-3/helpers.md"
        },
        {
          "type": "file",
          "value": "Leaf-3/mvc.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Network_Net",
      "children": [
        {
          "type": "file",
          "value": "Network_Net/anonsurf_vpn_install.md"
        },
        {
          "type": "file",
          "value": "Network_Net/dd-wrt.md"
        },
        {
          "type": "file",
          "value": "Network_Net/dd-wrt_multiple_bssids.md"
        },
        {
          "type": "file",
          "value": "Network_Net/ddwrt_basic_wl_settings.md"
        },
        {
          "type": "file",
          "value": "Network_Net/download_youtube_videos.md"
        },
        {
          "type": "file",
          "value": "Network_Net/riseup-vpn.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "PHP",
      "children": [
        {
          "type": "file",
          "value": "PHP/22092023.md"
        },
        {
          "type": "file",
          "value": "PHP/LearningResources.md"
        },
        {
          "type": "file",
          "value": "PHP/edx_js_backend_frameworks.md"
        },
        {
          "type": "file",
          "value": "PHP/embed_lib.md"
        },
        {
          "type": "file",
          "value": "PHP/express_mdn.md"
        },
        {
          "type": "file",
          "value": "PHP/helpful_resources.md"
        },
        {
          "type": "file",
          "value": "PHP/html_forms.md"
        },
        {
          "type": "file",
          "value": "PHP/http_response_codes.md"
        },
        {
          "type": "file",
          "value": "PHP/json_guide.md"
        },
        {
          "type": "file",
          "value": "PHP/local-servers.md"
        },
        {
          "type": "file",
          "value": "PHP/logical_gradation_of_developers.md"
        },
        {
          "type": "file",
          "value": "PHP/markdown.md"
        },
        {
          "type": "file",
          "value": "PHP/namespace_review.md"
        },
        {
          "type": "file",
          "value": "PHP/notes_for_proff_nodejs_express.md"
        },
        {
          "type": "file",
          "value": "PHP/npm_quick_ref.md"
        },
        {
          "type": "file",
          "value": "PHP/pandoc_quick_ref.md"
        },
        {
          "type": "file",
          "value": "PHP/php_basics.md"
        },
        {
          "type": "file",
          "value": "PHP/php_iterators.md"
        },
        {
          "type": "file",
          "value": "PHP/wget-ultimate-examples.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Packaging",
      "children": [
        {
          "type": "file",
          "value": "Packaging/apt.md"
        },
        {
          "type": "file",
          "value": "Packaging/composer.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "ReviewQuestions",
      "children": [
        {
          "type": "file",
          "value": "ReviewQuestions/strings_quotes.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "Symfony",
      "children": [
        {
          "type": "file",
          "value": "Symfony/Encore.md"
        },
        {
          "type": "dir",
          "name": "Symfonycasts",
          "children": [
            {
              "type": "file",
              "value": "Symfony/Symfonycasts/Composer.md"
            },
            {
              "type": "file",
              "value": "Symfony/Symfonycasts/Dependency Injection and the art of services and containers.md"
            },
            {
              "type": "file",
              "value": "Symfony/Symfonycasts/Symfony 6 Fundamentals: Services, Config & Environments.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "Symfony/chapter5_symfonyCats.md"
        },
        {
          "type": "file",
          "value": "Symfony/symfony_and_http_fundamentals.md"
        },
        {
          "type": "file",
          "value": "Symfony/symfony_basics.md"
        },
        {
          "type": "file",
          "value": "Symfony/twig_basics.md"
        },
        {
          "type": "file",
          "value": "Symfony/twig_cheatsheet.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "javascript",
      "children": [
        {
          "type": "file",
          "value": "javascript/js_cheatsheet.md"
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "",
      "html": "",
      "id": 0
    },
    {
      "path": "CSS/css-media-and-rwd.md",
      "url": "CSS/css-media-and-rwd.html",
      "content": "# CSS Media Query Review\n\n- Syntax:\n\n```css\n@media media type and (condition: breakpoint) {\n  // CSS rules\n}\n```\n> **Important: Always put your media queries at the end of your CSS file.**\n\n+ media types (devices):\n   - all — for all media types\n   - print — for printers\n   - screen — for computer screens, tablets and, smart-phones\n   - speech — for screen readers that “read” the page out loud\n- notes inside code:\n```css\n\n@media () {      /*target all media types*/\n  // CSS rules\n}\n\n```\n+ No standard resolution for devices but there are some commonly used breakpoints for widths of devices:\n    - **320px — 480px: Mobile devices**\n    - 481px — 768px: iPads, Tablets\n    - **769px — 1024px: Small screens, laptops**\n    - 1025px — 1200px: Desktops, large screens\n    - **1201px and more —  Extra large screens, TV**\n\n## Responsive Design - Media Queries: Examples\n\n- set separate styles for a page’s computer display and printout.\n\n```css\n<link rel=\"stylesheet\" type=\"text/css\" href=\"screen.css\" media=\"screen\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"print.css\"  media=\"print\">\n```\n\n- Basic condition properties: **max-width**, device-width, **orientation** (landscape vs. portrait), and `color`. \n\nFor example, if 480px is the maximum resolution of the current device’s screen, then the styles defined in main_1.css will be applied:\n\n```html\n<link rel=\"stylesheet\" media=\"screen and (max-device-width: 480px)\" href=\"main_1.css\" />\n```\n\n- Mobile browsers use so-called “**smart zoom**” used to proportionally reduce page size:\n    1. user-initiated zoom(ex., tapping twice on iPhone)\n    2. initially displaying a zoomed-in version of a web page on load.\n\n- To disable zoom and ensure that your page content \n\n```html\n<meta name=\"viewport\" content=\"width=device-width,\n initial-scale=1\" />\n <!-- To disable zoom completely,\n  use: 'user-scalable=false' -->\n```\n\n## Responsive Design - Pseudo-Elements: Examples\n\nHere simple responsive design example:\n\n```css\n.username:after {\n    content:\"Insert your user name\";\n}\n@media screen and (max-width: 1024px) {\n    .username:before {\n        content:\"User name\";\n    }\n}\n@media screen and (max-width: 480px) {\n    .username:before {\n        content:\"\";\n    }\n}\n```\nWe achieve the following:\n\n<img src=\"https://assets.toptal.io/images?url=https://uploads.toptal.io/blog/image/157/toptal-blog-2_C.png&width=524\" width=\"80%\" alt=\"error\" />\n\n#### tricks: \n\nfor RWD images: \n\n```css\nimg {\n    max-width: 100%\n}\n```\n\nfor RWD Icons, a great solution is to use **IconFonts** http://css-tricks.com/examples/IconFont]\n\n> Tip: To keep things efficient and stop you from having to work backward, it’s recommended to always wireframe your website for mobile devices first.\n\n> Links:\nResponsive web design(https://www.toptal.com/responsive-web/responsive-design-is-not-enough-we-need-responsive-performance)",
      "html": "<h1 id=\"css-media-query-review\">CSS Media Query Review <a class=\"heading-anchor-permalink\" href=\"#css-media-query-review\">#</a></h1>\n<ul>\n<li>Syntax:</li>\n</ul>\n<pre><code class=\"language-css\">@media media type and (condition: breakpoint) {\n  // CSS rules\n}\n</code></pre>\n<blockquote>\n<p><strong>Important: Always put your media queries at the end of your CSS file.</strong></p>\n</blockquote>\n<ul>\n<li>media types (devices):\n<ul>\n<li>all — for all media types</li>\n<li>print — for printers</li>\n<li>screen — for computer screens, tablets and, smart-phones</li>\n<li>speech — for screen readers that “read” the page out loud</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>notes inside code:</li>\n</ul>\n<pre><code class=\"language-css\">\n@media () {      /*target all media types*/\n  // CSS rules\n}\n\n</code></pre>\n<ul>\n<li>No standard resolution for devices but there are some commonly used breakpoints for widths of devices:\n<ul>\n<li><strong>320px — 480px: Mobile devices</strong></li>\n<li>481px — 768px: iPads, Tablets</li>\n<li><strong>769px — 1024px: Small screens, laptops</strong></li>\n<li>1025px — 1200px: Desktops, large screens</li>\n<li><strong>1201px and more —  Extra large screens, TV</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"responsive-design---media-queries%3A-examples\">Responsive Design - Media Queries: Examples <a class=\"heading-anchor-permalink\" href=\"#responsive-design---media-queries%3A-examples\">#</a></h2>\n<ul>\n<li>set separate styles for a page’s computer display and printout.</li>\n</ul>\n<pre><code class=\"language-css\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;screen.css&quot; media=&quot;screen&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;print.css&quot;  media=&quot;print&quot;&gt;\n</code></pre>\n<ul>\n<li>Basic condition properties: <strong>max-width</strong>, device-width, <strong>orientation</strong> (landscape vs. portrait), and <code>color</code>.</li>\n</ul>\n<p>For example, if 480px is the maximum resolution of the current device’s screen, then the styles defined in main_1.css will be applied:</p>\n<pre><code class=\"language-html\">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width: 480px)&quot; href=&quot;main_1.css&quot; /&gt;\n</code></pre>\n<ul>\n<li>\n<p>Mobile browsers use so-called “<strong>smart zoom</strong>” used to proportionally reduce page size:</p>\n<ol>\n<li>user-initiated zoom(ex., tapping twice on iPhone)</li>\n<li>initially displaying a zoomed-in version of a web page on load.</li>\n</ol>\n</li>\n<li>\n<p>To disable zoom and ensure that your page content</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n initial-scale=1&quot; /&gt;\n &lt;!-- To disable zoom completely,\n  use: 'user-scalable=false' --&gt;\n</code></pre>\n<h2 id=\"responsive-design---pseudo-elements%3A-examples\">Responsive Design - Pseudo-Elements: Examples <a class=\"heading-anchor-permalink\" href=\"#responsive-design---pseudo-elements%3A-examples\">#</a></h2>\n<p>Here simple responsive design example:</p>\n<pre><code class=\"language-css\">.username:after {\n    content:&quot;Insert your user name&quot;;\n}\n@media screen and (max-width: 1024px) {\n    .username:before {\n        content:&quot;User name&quot;;\n    }\n}\n@media screen and (max-width: 480px) {\n    .username:before {\n        content:&quot;&quot;;\n    }\n}\n</code></pre>\n<p>We achieve the following:</p>\n<img src=\"https://assets.toptal.io/images?url=https://uploads.toptal.io/blog/image/157/toptal-blog-2_C.png&width=524\" width=\"80%\" alt=\"error\" />\n<h4 id=\"tricks%3A\">tricks: <a class=\"heading-anchor-permalink\" href=\"#tricks%3A\">#</a></h4>\n<p>for RWD images:</p>\n<pre><code class=\"language-css\">img {\n    max-width: 100%\n}\n</code></pre>\n<p>for RWD Icons, a great solution is to use <strong>IconFonts</strong> <a href=\"http://css-tricks.com/examples/IconFont\">http://css-tricks.com/examples/IconFont</a>]</p>\n<blockquote>\n<p>Tip: To keep things efficient and stop you from having to work backward, it’s recommended to always wireframe your website for mobile devices first.</p>\n</blockquote>\n<blockquote>\n<p>Links:\nResponsive web design(<a href=\"https://www.toptal.com/responsive-web/responsive-design-is-not-enough-we-need-responsive-performance\">https://www.toptal.com/responsive-web/responsive-design-is-not-enough-we-need-responsive-performance</a>)</p>\n</blockquote>\n",
      "id": 1
    },
    {
      "path": "CSS/css-naming-convention.md",
      "url": "CSS/css-naming-convention.html",
      "content": "### CSS naming convention (BEM naming convention)\n\nsource:[https://hackernoon.com/best-practice-in-css-organisation-and-naming-conventions-4d103ujy]\n\n#### `OOCSS`:\n\n- **OOCSS PRINCIPLES:**\n\n  - The separation of “structure” from “skin”\n  - The separation of “container” from “content”\n\n- **CONTENT - SKIN** :\n  - Define the repeating “visual” patterns as reusable “skins“\n  - Define the repeating “invisible” patterns as reusable “structures“ \n- **CONTAINER - CONTENT**:\n  An Object should be not depend of the location where you put it: It’s often the main cause of code duplication. For example:\n  ```css\n   .announcecategory > div:nth(3) {\n   color: red;\n   ....\n   }\n  ```\n\n---\n\n#### `BEM`: **BLOCK,Element,Modifier**:\n   - A **block** is an independent entity which must be able to be moved without affecting its appearance or its functioning. A **block** can also contain other blocks. An interface can include several instances of the same block.\n   - An **element** is a part of block. The context of an element is that of the block. Can be `header,footer`,a container (articles,sections,...),a menu or even a button.\n   - A **modifier** is a property which is used to create variants, to make minimal changes like changing colors, size. There exists modifiers of blocks and the element modifiers.\n - The methodology BEM has three essential rules:\n   1. The blocks and elements have to each other have a unique name, which will be used as a CSS class\n   2. The CSS selectors don't have to use the HTML elements (not of footer div)\n   3. Cascades in CSS selectors should be avoided ( not of `.foo > .bar`).\n - **Naming convention**:\n   - Bloc: `bloc-name`\n   - Element: `bloc-name__element-name`\n   - Modifier : `bloc-name--modifier-name`, `bloc-name__element-name--modifier-name`\nThe official website takes care to specify that only the concepts count, the syntax remaining free.",
      "html": "<h3 id=\"css-naming-convention-(bem-naming-convention)\">CSS naming convention (BEM naming convention) <a class=\"heading-anchor-permalink\" href=\"#css-naming-convention-(bem-naming-convention)\">#</a></h3>\n<p>source:[<a href=\"https://hackernoon.com/best-practice-in-css-organisation-and-naming-conventions-4d103ujy\">https://hackernoon.com/best-practice-in-css-organisation-and-naming-conventions-4d103ujy</a>]</p>\n<h4 id=\"oocss%3A\"><code>OOCSS</code>: <a class=\"heading-anchor-permalink\" href=\"#oocss%3A\">#</a></h4>\n<ul>\n<li>\n<p><strong>OOCSS PRINCIPLES:</strong></p>\n<ul>\n<li>The separation of “structure” from “skin”</li>\n<li>The separation of “container” from “content”</li>\n</ul>\n</li>\n<li>\n<p><strong>CONTENT - SKIN</strong> :</p>\n<ul>\n<li>Define the repeating “visual” patterns as reusable “skins“</li>\n<li>Define the repeating “invisible” patterns as reusable “structures“</li>\n</ul>\n</li>\n<li>\n<p><strong>CONTAINER - CONTENT</strong>:\nAn Object should be not depend of the location where you put it: It’s often the main cause of code duplication. For example:</p>\n<pre><code class=\"language-css\"> .announcecategory &gt; div:nth(3) {\n color: red;\n ....\n }\n</code></pre>\n</li>\n</ul>\n<hr>\n<h4 id=\"bem%3A-block%2Celement%2Cmodifier%3A\"><code>BEM</code>: <strong>BLOCK,Element,Modifier</strong>: <a class=\"heading-anchor-permalink\" href=\"#bem%3A-block%2Celement%2Cmodifier%3A\">#</a></h4>\n<ul>\n<li>A <strong>block</strong> is an independent entity which must be able to be moved without affecting its appearance or its functioning. A <strong>block</strong> can also contain other blocks. An interface can include several instances of the same block.</li>\n<li>An <strong>element</strong> is a part of block. The context of an element is that of the block. Can be <code>header,footer</code>,a container (articles,sections,…),a menu or even a button.</li>\n<li>A <strong>modifier</strong> is a property which is used to create variants, to make minimal changes like changing colors, size. There exists modifiers of blocks and the element modifiers.</li>\n<li>The methodology BEM has three essential rules:\n<ol>\n<li>The blocks and elements have to each other have a unique name, which will be used as a CSS class</li>\n<li>The CSS selectors don’t have to use the HTML elements (not of footer div)</li>\n<li>Cascades in CSS selectors should be avoided ( not of <code>.foo &gt; .bar</code>).</li>\n</ol>\n</li>\n<li><strong>Naming convention</strong>:\n<ul>\n<li>Bloc: <code>bloc-name</code></li>\n<li>Element: <code>bloc-name__element-name</code></li>\n<li>Modifier : <code>bloc-name--modifier-name</code>, <code>bloc-name__element-name--modifier-name</code>\nThe official website takes care to specify that only the concepts count, the syntax remaining free.</li>\n</ul>\n</li>\n</ul>\n",
      "id": 2
    },
    {
      "path": "CSS/css_page_media.md",
      "url": "CSS/css_page_media.html",
      "content": "## CSS Paged Media:\t\n> From w3c:\n### Page Terminology:\n\n* **page sheet:** surface of the physical media.\n*  **printable area size:** the size of the page sheet **minus** the size of none-printable area.\n* **Non-printable area:** The non-printable area is the area of a page sheet that the UA is not capable of rendering content into. This value is UA dependent.\n\n* **Printable area:**\n\n\n <img src=\"https://www.w3.org/TR/2003/WD-css3-page-20030909/page-area-model.png\" width=\"80%\" height=\"600px\" alt=\"pagemedia\" />\n <br>\n \n * **page box:** A page box is derived from the [box model] and contains portions of the document flow destined for rendering on a page sheet. think it as  like  \"viewport\". \n * **page area:** content area page box, also its:\n\t * container for all the boxes generated by the root element.\n * **margin area of the page box:**\n * divided into 16 page-margin boxes .\n * each page-margin box has its own margin,border,padding and central areas.\n * typically used to display running headers/footers.\n \n### Page types:\n\nA set of pages can have special treatments applied based on the page's place In the document: first, left, and right. <i>The following terminology is used to describe page types:</i>\n* **Page Orientation:** as defined by a comparison of the length of a page sheet's edges. When a page sheet is square the long edge is the same length as the short edge **else** the long edge is greater than than the short edge length.\n* **Portrait Orientation:**\nA portrait page's height is greater than its width. Horizontal elements are parallel to the short edge and vertical elements to the long edge. The **Landscape Orientation**is the opposite.\n\n* **Front Side: **\nMedia used as a stack of sheets have two sides known as the front and the back. The front side is the side in view. Typically, the UA prints on the front side of the media although it _MAY_ place the page in an output bin after printing so that the back is visible. Media used from a roll or continuous form only have a front side.\n* **Back Side:**\nThe back side of the medium. is only used when printing on both side of the medium.\n* **First Page:**\nThe first page in a set of pages.\n\n* **Facing Pages**\n\n Facing pages are two pages in order as printed, with the even numbered page on the left and odd numbered on the right. When front and back side printing occurs these two page will face each other in the document.\n\n**Left Page**\n\nThe left facing page, usually even numbered. Also called _versos_. The UA distinguishes the left page from the first and right pages. This page will be printed on front side of a medium when printing on only one side of the media and on the back when printing on both sides.\n\n**Right Page**\n\nThe right facing page, usually odd numbered. Also called _rectos_. The UA distinguishes the right page from the first and left pages. This is page is always printed on the front of a medium.\n\n**Binding Edge**\n\nThe binding edge is the page edge that will be stitched, stapled, or punched with holes when preparing the pages of the document for binding. It is larger than other margins to accommodate the space needed for binding. Usually is the left side of a page when printing in portrait mode on the right page.  However, the :left and :right page selectors allow for binding edges.\n\n## Print Style Sheets:\n> from sitepoint.com\n\n Print CSS can either be:\n1.  **Applied in addition to screen styling.** Taking your screen styles as a base, the printer styles override those defaults as necessary.\n2.  **Applied as separate styles.** The screen and print styles are entirely separate; both start from the browser’s default styles.\n\n* A print style sheet can be added to the HTML `<head>` after the standard style sheet:\n```markup\n<link rel=\"stylesheet\" href=\"main.css\" />\n<link rel=\"stylesheet\" media=\"print\" href=\"print.css\" />\n```\n> Note now, The `print.css` styles will be applied in **addition** to screen styles when the page is printed. <b>[hint `media` => output device(screen/print)] </b>\n* To separate screen and print media, `main.css` should target the screen only:\n```markup\n<link rel=\"stylesheet\" media=\"screen\" href=\"main.css\" />\n<link rel=\"stylesheet\" media=\"print\" href=\"print.css\" />\n```\n* Alternatively, print styles can be included within an existing CSS file using `@media` rules:\n```css\n/* main.css */\nbody {\n  margin: 2em; color: #fff; background-color: #000;\n}\n/* override styles when printing */\n@media print {\n  body {\n    margin: 0; color: #000; background-color: #fff;\n  }\n}\n```\n* Screen and print rules can also be separated if necessary:\n```css\n/* main.css */\n/* on-screen styles */\n@media screen {\n  body {\n    margin: 2em;\n    color: #fff;\n    background-color: #000;\n  }\n}\n/* print styles */\n@media print {\n  body {\n    margin: 0;\n    color: #000;\n    background-color: #fff;\n  }\n}\n```\n### Testing Printer Output:\n-  The most reliable option is the print preview option in your browser.\n- Alternatively, save or preview the page by exporting to a PDF.\n- Using DevTools to emulate **print styles**  <em>[the page breaks wont't shown]</em>\n\t- Chrome:  Select **More Tools** -> Rendering -> Change **Emulate CSS Media** to **print** at the bottom of the panel.\n\t- Firefox:  Click **Toggle print medaia simulation**\n\n## Prepare content for printing:\n* **Remove unnecessary sections** (navigation menus,hero images,headers,footers, forms, sidebars, social media widgets, and advertising blocks (usually anything in an `iframe`):\n```css\n/* print.css */\nheader, footer, aside, nav, form, iframe, .menu, .hero, .adslot {\n  display: none;\n}\n```\n* **Linearize the Layout:**\n* For Flexbox and Grid, if there any issues, cosider using `display:block; or similar on layout boxes and adjust dimensions as necessary. for example: width:100%`;  to span the full page width.\n\n### Printing Styling:\nPrinter-friendly styling **Recommendations**:\n-   ensure you use dark text on a white background.\n-   consider using a serif font, which may be easier to read\n-   adjust the text size to `12pt` or higher\n-   modify paddings and margins where necessary. Standard `cm`, `mm`, or `in` units may be more practical.\n\n### Adopt CSS Columns:\n- for standard A4 and US Letter paper, consider using `CSS Columns` in print layout. For Example\n```css\n/* print.css */\narticle {\n  column-width: 17em;\n  column-gap: 3em;\n  /*columns will be created when there’s at least `37em` of horizontal space.*/\n}\n```\n* <strong> Use border instead of Background.</strong>\n*  <strong>Remove or Invert Images:</strong>\nYou could consider a default where all images are hidden unless they have a `print` class:\n```css\n/* print.css */\n* {background-image: none !important;}\nimg, svg {display: none !important;}\nimg.print, svg.print {\n  display: block;\n  max-width: 100%;\n}\n```\n* A [CSS filter](https://developer.mozilla.org/docs/Web/CSS/filter) can be used to invert and adjust colors in the print style sheet. For example:\n```css\n/* print.css */\nimg.dark {\n  filter: invert(100%) hue-rotate(180deg) brightness(120%) contrast(150%);\n}\n```\n### Add Supplementary Content:\n The CSS [`content`](https://developer.mozilla.org/docs/Web/CSS/content) property can be employed to append text to `::before` and `::after` pseudo-elements. For example, display a link’s URL in brackets after the text: \n ```css\n/* print.css */\na::after {content: \" (\" attr(href) \")\";}\n```\nOr you can add print-only messages:\n```css\n/* print.css */\nmain::after {\n  content: \"Copyright site.com\";\n  display: block;\n  text-align: center;\n}\n```\nconsider using a class such as `print` on elements which should only be visible when printed,. For example:\n```markup\n<p class=\"print\">Article printed at 1:23pm 5 September 2020. \nPlease see https://site.com/page for the latest version.</p>\n```\nThe CSS:\n```css\n/* hidden on-screen */\n.print {display: none;}\n@media print {\n  /* visible when printed */\n  .print {display: block;}\n}\n```\n## Page Breaks\n\nThe CSS3 properties [`break-before`](https://developer.mozilla.org/docs/Web/CSS/page-break-before) and [`break-after`](https://developer.mozilla.org/docs/Web/CSS/break-after) allow you control how page, column, or region breaks behave before and after an element. but older browsers may use the similar [`page-break-before`](https://developer.mozilla.org/docs/Web/CSS/page-break-before) and [`page-break-after`](https://developer.mozilla.org/docs/Web/CSS/page-break-after) properties.\nThe following `break-before` and `break-after` values can be used:\n\n-   `auto`: the default — a break is permitted but not forced\n-   `avoid`: avoid a break on the page, column or region\n-   `avoid-page`: avoid a page break\n-   `page`: force a page break\n-   `always`: an alias of `page`\n-   `left`: force page breaks so the next is a left page\n-   `right`: force page breaks so the next is a right page\n\nExample: force a page break immediately prior to any `<h1>` heading:\n\n```css\n/* print.css */\nh1 {break-before: always;}\n```\n**Note**: be wary of over-using page breaks. Ideally, printer output should use as few pages as possible._\n\nThe [`break-inside`](https://developer.mozilla.org/docs/Web/CSS/break-inside) (and older [`page-break-inside`](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)) property specifies whether a page break is permitted inside an element. The commonly supported values:\n\n-   `auto`: the default — a break is permitted but not forced\n-   `avoid`: avoid an inner break where possible\n-   `avoid-page`: avoid an inner page break where possible\n\nThis can be preferable to specifying page breaks, since you can use as little paper as possible while avoiding page breaks within grouped data such as tables or images:\n```css\n/* print.css */\ntable, img, svg {break-inside: avoid;}\n```\n* The [`widows`](https://developer.mozilla.org/docs/Web/CSS/widows) property specifies the minimum number of lines in a block that must be shown at the **top** of a page. Imagine a block with five lines of text.\n* The [`orphans`](https://developer.mozilla.org/docs/Web/CSS/orphans) property is similar to `widows` except it controls the minimum number of lines to show at the **bottom** of a page.\n* The [`box-decoration-break`](https://developer.mozilla.org/docs/Web/CSS/box-decoration-break) property controls element borders across pages. When an element with a border has an inner page break:\n-   `slice`: the default, splits the layout. The top border is shown on the first page and the bottom border is shown on the second page.\n-   `clone`: replicates the margin, padding, and border. All four borders are shown on both pages.\n- Finally, [CSS Paged Media (`@page`)](https://developer.mozilla.org/docs/Web/CSS/@page) has [limited browser support](https://caniuse.com/#feat=css-paged-media) but provides a way to target specific pages so alternative margins or breaks can be defined:\n```css\n/* print.css */\n/* target all pages */\n@page {margin: 2cm;}\n/* target the first page only */\n@page :first {margin-top: 6cm;}\n/* target left (even-numbered) pages only */\n@page :left { margin-right: 4cm;}\n/* target right (odd-numbered) pages only */\n@page :right { margin-left: 4cm;}\n```\n* The CSS page break properties can be placed within your `screen` or `print` styles because they only affect printing.\n\n<b><em>_Add it to your to-do list!_</em></b>\n<em>Adding a few page breaks and removing unnecessary sections will delight users and raise your site above competitors.</em>\n",
      "html": "<h2 id=\"css-paged-media%3A\">CSS Paged Media: <a class=\"heading-anchor-permalink\" href=\"#css-paged-media%3A\">#</a></h2>\n<blockquote>\n<p>From w3c:</p>\n</blockquote>\n<h3 id=\"page-terminology%3A\">Page Terminology: <a class=\"heading-anchor-permalink\" href=\"#page-terminology%3A\">#</a></h3>\n<ul>\n<li>\n<p><strong>page sheet:</strong> surface of the physical media.</p>\n</li>\n<li>\n<p><strong>printable area size:</strong> the size of the page sheet <strong>minus</strong> the size of none-printable area.</p>\n</li>\n<li>\n<p><strong>Non-printable area:</strong> The non-printable area is the area of a page sheet that the UA is not capable of rendering content into. This value is UA dependent.</p>\n</li>\n<li>\n<p><strong>Printable area:</strong></p>\n</li>\n</ul>\n <img src=\"https://www.w3.org/TR/2003/WD-css3-page-20030909/page-area-model.png\" width=\"80%\" height=\"600px\" alt=\"pagemedia\" />\n <br>\n<ul>\n<li><strong>page box:</strong> A page box is derived from the [box model] and contains portions of the document flow destined for rendering on a page sheet. think it as  like  “viewport”.</li>\n<li><strong>page area:</strong> content area page box, also its:\n<ul>\n<li>container for all the boxes generated by the root element.</li>\n</ul>\n</li>\n<li><strong>margin area of the page box:</strong></li>\n<li>divided into 16 page-margin boxes .</li>\n<li>each page-margin box has its own margin,border,padding and central areas.</li>\n<li>typically used to display running headers/footers.</li>\n</ul>\n<h3 id=\"page-types%3A\">Page types: <a class=\"heading-anchor-permalink\" href=\"#page-types%3A\">#</a></h3>\n<p>A set of pages can have special treatments applied based on the page’s place In the document: first, left, and right. <i>The following terminology is used to describe page types:</i></p>\n<ul>\n<li>\n<p><strong>Page Orientation:</strong> as defined by a comparison of the length of a page sheet’s edges. When a page sheet is square the long edge is the same length as the short edge <strong>else</strong> the long edge is greater than than the short edge length.</p>\n</li>\n<li>\n<p><strong>Portrait Orientation:</strong>\nA portrait page’s height is greater than its width. Horizontal elements are parallel to the short edge and vertical elements to the long edge. The <strong>Landscape Orientation</strong>is the opposite.</p>\n</li>\n<li>\n<p>**Front Side: **\nMedia used as a stack of sheets have two sides known as the front and the back. The front side is the side in view. Typically, the UA prints on the front side of the media although it <em>MAY</em> place the page in an output bin after printing so that the back is visible. Media used from a roll or continuous form only have a front side.</p>\n</li>\n<li>\n<p><strong>Back Side:</strong>\nThe back side of the medium. is only used when printing on both side of the medium.</p>\n</li>\n<li>\n<p><strong>First Page:</strong>\nThe first page in a set of pages.</p>\n</li>\n<li>\n<p><strong>Facing Pages</strong></p>\n</li>\n</ul>\n<p>Facing pages are two pages in order as printed, with the even numbered page on the left and odd numbered on the right. When front and back side printing occurs these two page will face each other in the document.</p>\n<p><strong>Left Page</strong></p>\n<p>The left facing page, usually even numbered. Also called <em>versos</em>. The UA distinguishes the left page from the first and right pages. This page will be printed on front side of a medium when printing on only one side of the media and on the back when printing on both sides.</p>\n<p><strong>Right Page</strong></p>\n<p>The right facing page, usually odd numbered. Also called <em>rectos</em>. The UA distinguishes the right page from the first and left pages. This is page is always printed on the front of a medium.</p>\n<p><strong>Binding Edge</strong></p>\n<p>The binding edge is the page edge that will be stitched, stapled, or punched with holes when preparing the pages of the document for binding. It is larger than other margins to accommodate the space needed for binding. Usually is the left side of a page when printing in portrait mode on the right page.  However, the :left and :right page selectors allow for binding edges.</p>\n<h2 id=\"print-style-sheets%3A\">Print Style Sheets: <a class=\"heading-anchor-permalink\" href=\"#print-style-sheets%3A\">#</a></h2>\n<blockquote>\n<p>from <a href=\"http://sitepoint.com\">sitepoint.com</a></p>\n</blockquote>\n<p>Print CSS can either be:</p>\n<ol>\n<li><strong>Applied in addition to screen styling.</strong> Taking your screen styles as a base, the printer styles override those defaults as necessary.</li>\n<li><strong>Applied as separate styles.</strong> The screen and print styles are entirely separate; both start from the browser’s default styles.</li>\n</ol>\n<ul>\n<li>A print style sheet can be added to the HTML <code>&lt;head&gt;</code> after the standard style sheet:</li>\n</ul>\n<pre><code class=\"language-markup\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot; /&gt;\n&lt;link rel=&quot;stylesheet&quot; media=&quot;print&quot; href=&quot;print.css&quot; /&gt;\n</code></pre>\n<blockquote>\n<p>Note now, The <code>print.css</code> styles will be applied in <strong>addition</strong> to screen styles when the page is printed. <b>[hint <code>media</code> =&gt; output device(screen/print)] </b></p>\n</blockquote>\n<ul>\n<li>To separate screen and print media, <code>main.css</code> should target the screen only:</li>\n</ul>\n<pre><code class=\"language-markup\">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen&quot; href=&quot;main.css&quot; /&gt;\n&lt;link rel=&quot;stylesheet&quot; media=&quot;print&quot; href=&quot;print.css&quot; /&gt;\n</code></pre>\n<ul>\n<li>Alternatively, print styles can be included within an existing CSS file using <code>@media</code> rules:</li>\n</ul>\n<pre><code class=\"language-css\">/* main.css */\nbody {\n  margin: 2em; color: #fff; background-color: #000;\n}\n/* override styles when printing */\n@media print {\n  body {\n    margin: 0; color: #000; background-color: #fff;\n  }\n}\n</code></pre>\n<ul>\n<li>Screen and print rules can also be separated if necessary:</li>\n</ul>\n<pre><code class=\"language-css\">/* main.css */\n/* on-screen styles */\n@media screen {\n  body {\n    margin: 2em;\n    color: #fff;\n    background-color: #000;\n  }\n}\n/* print styles */\n@media print {\n  body {\n    margin: 0;\n    color: #000;\n    background-color: #fff;\n  }\n}\n</code></pre>\n<h3 id=\"testing-printer-output%3A\">Testing Printer Output: <a class=\"heading-anchor-permalink\" href=\"#testing-printer-output%3A\">#</a></h3>\n<ul>\n<li>The most reliable option is the print preview option in your browser.</li>\n<li>Alternatively, save or preview the page by exporting to a PDF.</li>\n<li>Using DevTools to emulate <strong>print styles</strong>  <em>[the page breaks wont’t shown]</em>\n<ul>\n<li>Chrome:  Select <strong>More Tools</strong> -&gt; Rendering -&gt; Change <strong>Emulate CSS Media</strong> to <strong>print</strong> at the bottom of the panel.</li>\n<li>Firefox:  Click <strong>Toggle print medaia simulation</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"prepare-content-for-printing%3A\">Prepare content for printing: <a class=\"heading-anchor-permalink\" href=\"#prepare-content-for-printing%3A\">#</a></h2>\n<ul>\n<li><strong>Remove unnecessary sections</strong> (navigation menus,hero images,headers,footers, forms, sidebars, social media widgets, and advertising blocks (usually anything in an <code>iframe</code>):</li>\n</ul>\n<pre><code class=\"language-css\">/* print.css */\nheader, footer, aside, nav, form, iframe, .menu, .hero, .adslot {\n  display: none;\n}\n</code></pre>\n<ul>\n<li><strong>Linearize the Layout:</strong></li>\n<li>For Flexbox and Grid, if there any issues, cosider using <code>display:block; or similar on layout boxes and adjust dimensions as necessary. for example: width:100%</code>;  to span the full page width.</li>\n</ul>\n<h3 id=\"printing-styling%3A\">Printing Styling: <a class=\"heading-anchor-permalink\" href=\"#printing-styling%3A\">#</a></h3>\n<p>Printer-friendly styling <strong>Recommendations</strong>:</p>\n<ul>\n<li>ensure you use dark text on a white background.</li>\n<li>consider using a serif font, which may be easier to read</li>\n<li>adjust the text size to <code>12pt</code> or higher</li>\n<li>modify paddings and margins where necessary. Standard <code>cm</code>, <code>mm</code>, or <code>in</code> units may be more practical.</li>\n</ul>\n<h3 id=\"adopt-css-columns%3A\">Adopt CSS Columns: <a class=\"heading-anchor-permalink\" href=\"#adopt-css-columns%3A\">#</a></h3>\n<ul>\n<li>for standard A4 and US Letter paper, consider using <code>CSS Columns</code> in print layout. For Example</li>\n</ul>\n<pre><code class=\"language-css\">/* print.css */\narticle {\n  column-width: 17em;\n  column-gap: 3em;\n  /*columns will be created when there’s at least `37em` of horizontal space.*/\n}\n</code></pre>\n<ul>\n<li><strong> Use border instead of Background.</strong></li>\n<li><strong>Remove or Invert Images:</strong>\nYou could consider a default where all images are hidden unless they have a <code>print</code> class:</li>\n</ul>\n<pre><code class=\"language-css\">/* print.css */\n* {background-image: none !important;}\nimg, svg {display: none !important;}\nimg.print, svg.print {\n  display: block;\n  max-width: 100%;\n}\n</code></pre>\n<ul>\n<li>A <a href=\"https://developer.mozilla.org/docs/Web/CSS/filter\">CSS filter</a> can be used to invert and adjust colors in the print style sheet. For example:</li>\n</ul>\n<pre><code class=\"language-css\">/* print.css */\nimg.dark {\n  filter: invert(100%) hue-rotate(180deg) brightness(120%) contrast(150%);\n}\n</code></pre>\n<h3 id=\"add-supplementary-content%3A\">Add Supplementary Content: <a class=\"heading-anchor-permalink\" href=\"#add-supplementary-content%3A\">#</a></h3>\n<p>The CSS <a href=\"https://developer.mozilla.org/docs/Web/CSS/content\"><code>content</code></a> property can be employed to append text to <code>::before</code> and <code>::after</code> pseudo-elements. For example, display a link’s URL in brackets after the text:</p>\n<pre><code class=\"language-css\">/* print.css */\na::after {content: &quot; (&quot; attr(href) &quot;)&quot;;}\n</code></pre>\n<p>Or you can add print-only messages:</p>\n<pre><code class=\"language-css\">/* print.css */\nmain::after {\n  content: &quot;Copyright site.com&quot;;\n  display: block;\n  text-align: center;\n}\n</code></pre>\n<p>consider using a class such as <code>print</code> on elements which should only be visible when printed,. For example:</p>\n<pre><code class=\"language-markup\">&lt;p class=&quot;print&quot;&gt;Article printed at 1:23pm 5 September 2020. \nPlease see https://site.com/page for the latest version.&lt;/p&gt;\n</code></pre>\n<p>The CSS:</p>\n<pre><code class=\"language-css\">/* hidden on-screen */\n.print {display: none;}\n@media print {\n  /* visible when printed */\n  .print {display: block;}\n}\n</code></pre>\n<h2 id=\"page-breaks\">Page Breaks <a class=\"heading-anchor-permalink\" href=\"#page-breaks\">#</a></h2>\n<p>The CSS3 properties <a href=\"https://developer.mozilla.org/docs/Web/CSS/page-break-before\"><code>break-before</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/CSS/break-after\"><code>break-after</code></a> allow you control how page, column, or region breaks behave before and after an element. but older browsers may use the similar <a href=\"https://developer.mozilla.org/docs/Web/CSS/page-break-before\"><code>page-break-before</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/CSS/page-break-after\"><code>page-break-after</code></a> properties.\nThe following <code>break-before</code> and <code>break-after</code> values can be used:</p>\n<ul>\n<li><code>auto</code>: the default — a break is permitted but not forced</li>\n<li><code>avoid</code>: avoid a break on the page, column or region</li>\n<li><code>avoid-page</code>: avoid a page break</li>\n<li><code>page</code>: force a page break</li>\n<li><code>always</code>: an alias of <code>page</code></li>\n<li><code>left</code>: force page breaks so the next is a left page</li>\n<li><code>right</code>: force page breaks so the next is a right page</li>\n</ul>\n<p>Example: force a page break immediately prior to any <code>&lt;h1&gt;</code> heading:</p>\n<pre><code class=\"language-css\">/* print.css */\nh1 {break-before: always;}\n</code></pre>\n<p><strong>Note</strong>: be wary of over-using page breaks. Ideally, printer output should use as few pages as possible._</p>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/CSS/break-inside\"><code>break-inside</code></a> (and older <a href=\"https://developer.mozilla.org/docs/Web/CSS/page-break-inside\"><code>page-break-inside</code></a>) property specifies whether a page break is permitted inside an element. The commonly supported values:</p>\n<ul>\n<li><code>auto</code>: the default — a break is permitted but not forced</li>\n<li><code>avoid</code>: avoid an inner break where possible</li>\n<li><code>avoid-page</code>: avoid an inner page break where possible</li>\n</ul>\n<p>This can be preferable to specifying page breaks, since you can use as little paper as possible while avoiding page breaks within grouped data such as tables or images:</p>\n<pre><code class=\"language-css\">/* print.css */\ntable, img, svg {break-inside: avoid;}\n</code></pre>\n<ul>\n<li>The <a href=\"https://developer.mozilla.org/docs/Web/CSS/widows\"><code>widows</code></a> property specifies the minimum number of lines in a block that must be shown at the <strong>top</strong> of a page. Imagine a block with five lines of text.</li>\n<li>The <a href=\"https://developer.mozilla.org/docs/Web/CSS/orphans\"><code>orphans</code></a> property is similar to <code>widows</code> except it controls the minimum number of lines to show at the <strong>bottom</strong> of a page.</li>\n<li>The <a href=\"https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\"><code>box-decoration-break</code></a> property controls element borders across pages. When an element with a border has an inner page break:</li>\n</ul>\n<ul>\n<li><code>slice</code>: the default, splits the layout. The top border is shown on the first page and the bottom border is shown on the second page.</li>\n<li><code>clone</code>: replicates the margin, padding, and border. All four borders are shown on both pages.</li>\n<li>Finally, <a href=\"https://developer.mozilla.org/docs/Web/CSS/@page\">CSS Paged Media (<code>@page</code>)</a> has <a href=\"https://caniuse.com/#feat=css-paged-media\">limited browser support</a> but provides a way to target specific pages so alternative margins or breaks can be defined:</li>\n</ul>\n<pre><code class=\"language-css\">/* print.css */\n/* target all pages */\n@page {margin: 2cm;}\n/* target the first page only */\n@page :first {margin-top: 6cm;}\n/* target left (even-numbered) pages only */\n@page :left { margin-right: 4cm;}\n/* target right (odd-numbered) pages only */\n@page :right { margin-left: 4cm;}\n</code></pre>\n<ul>\n<li>The CSS page break properties can be placed within your <code>screen</code> or <code>print</code> styles because they only affect printing.</li>\n</ul>\n<p><b><em><em>Add it to your to-do list!</em></em></b>\n<em>Adding a few page breaks and removing unnecessary sections will delight users and raise your site above competitors.</em></p>\n",
      "id": 3
    },
    {
      "path": "CSS/flexbox-review.md",
      "url": "CSS/flexbox-review.html",
      "content": "<style>\n.h1{\n  color:blue;\n}\n.h2{\n  color:green;\n}\n.red{\n  color:red;\n}\n.blue{\n    color:blue;\n}\n.bold{\n  font-size:large;\n}\n.bolder{\n  font-size:larger;\n}\n.x-large{\n    font-size:xx-large;\n}\n.note{\n background-color:bisque;\n border-left:5px solid gray;\n padding:0.5em;\n}\ncode,.code{\n  border:1px dashed bisque;\n  padding:2px;\n}\n</style>\n\n# Flex Box Layout:\n\n- source: https://drafts.csswg.org/css-flexbox/#overview\n\n- additional: https://www.freecodecamp.org/news/css-flexbox-tutorial-with-cheatsheet/\n\n---\n\n\n## Flex layout box model and terminology\n\n- Unlike block and inline layout, whose layout calculations are biased to the block and inline flow directions, flex layout is biased (منحاز) to the flex directions\n![not found](https://drafts.csswg.org/css-flexbox/images/flex-direction-terms.svg)\n\n- Describe:\n   - main axis,main dimension\n   - main-start,main-end\n   - main size, main size property\n   - cross axis,cross dimension\n   - cross-start,cross-end\n   - cross size, cross size property\n- Flex containers are not block containers, and so some properties that were designed with the assumption of block layout don’t apply in the context of flex layout. In particular `clear,float`.\n- As it is out-of-flow, an absolutely-positioned child of a flex container does not participate in flex layout.\n- Specifying `visibility:collapse` on a flex item causes it to become a collapsed flex item?\n- when you make a flex container using `display:flex;` all flex items will take some initial values as following:\n    - Items display in a row (the flex-direction property's default is row).\n    - The items start from the start edge of the main axis.(`justify-content:flex-start`)\n    - The items do not stretch (`flex-grow:auto`) on the main dimension, but can shrink (`flex-shrink:1`) (_when the container has more space available_)\n    - The items will stretch to fill the size of the cross axis (_when available space not enough_)\n    - The flex-basis property is set to auto (_consult `width,min/max-width`_) else use content size as `flex-basis`\n    - The `flex-wrap` property is set to nowrap.\n\n## Flex Lines\n\n- `flex container` can be either single-line or multi-line, depending on the `flex-wrap` property.\n- When additional lines are created, they are stacked in the flex container along the `cross axis`\n- Once content is broken into lines, each line is laid out independently; flexible lengths and the `justify-content` and `align-self` properties **only consider the items on a single line at a time**.\n- In a multi-line flex container:\n    * The `cross size` of each line is the minimum size necessary to contain the flex items on the line (after alignment due to `align-self`), and\n    * The lines are aligned within the flex container with the `align-content` property.\n- In a single-line flex container, \n    * the cross size of the line is the cross size of the flex container, and `align-content` has no effect.\n    * The main size of a line is always the same as the main size of the flex container’s content box.\n\n+ Properties that apply to the flex container:\n    - `align-content`: only work if container has `wrap` value and container should be has a **larger vertical space than sum of all height  of the flex rows/lines**\n    - `align-items` (vertically/cross axis)\n    - `display` (`flex,inline-flex`)\n    - `flex-direction` (`row,column,row-reverse,column-reverse`)\n    - `flex-flow` (shorthand for `flex-flow:flex-direction flex-wrap`)\n    - `flex-wrap`\n    - `justify-content` (horizontally/main axis)\n\n- Properties that apply to the flex items:\n    - `align-self` (override align-items for individual items)\n    - `flex`\n    - `flex-basis`\n    - `flex-grow`\n    - `flex-shrink`\n    - `order`\n\n## Flexibility\n\n- The defining aspect of flex layout is the ability to make the flex items “flexing”, altering their **width/height** to fill the available space in the main dimension. \n- when is the `flex-item` is **fully inflexible**? (such as, `flex:none;` instead of `flex:1` for example).\n- The flex property shorthand specifies the components of a flexible size (**target flex items not containers**): \n    - `flex-basis`:  defines the size of that item in terms of the space it leaves as available space.\n        * the initial value is `auto` means that the browser will see if the items have a size (`width`) else it will use the content's size (`min-content`) as the `flex-basis` so this tell the browser to respect the size of other items and all items grow and shrink from a flex-basis of `auto`; the result is the longer item would have more space because it started from a larger size.\n        *  similar to adding width to a flex-item. It will set the initial size of a flex-item but the final size will be based on the available space,`flex-grow` and `flex-shrink`.\n    - `flex-grow`: positive integer, (the opposite of `flex-shrink`) flex items can grow along the main axis from their flex-basis. This will cause the item to stretch and take up any available space on that axis, *or a proportion of the available space if other items are allowed to grow too*.\n    - `flex-shrink`: helps a shrink based on the width of the flex-container.(**not work if `flex-wrap:wrap`**)\n\n    - `flex` examples:\n        - `flex: initial` = `flex: 0 1 auto`; don't grow - can shrink smaller than their `flex-basis` - items have the base size of `auto`\n        - `flex: auto` = `flex: 1 1 auto`; items can grow larger than the `flex-basis` - can shrink ... - have the base size of `auto` (the space that is shared between the items is shared out after each item is laid out as max-content size.)\n        - `flex:1` = `flex: 1 1 0`; can grow - can shrink - have 0 size so they all grow equally and the space is shared equally.\n\n> When a box is a flex item, flex is consulted instead of the main size property to determine the main size of the box. If a box is not a flex item, flex has no effect.\n\n## Examples of typical use cases of flexbox:\n\n- source: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Typical_Use_Cases_of_Flexbox\n\n- **Navigation:**\n    - a list of items displayed as a horizontal that we need to adjust their white space between or around them or absorb the extra space inside the items to allowing the items to grow and take up this space. For example: you wanted to respect the size property of items but share the avialable space among them, then use `flex:auto` (= `flex:1 1 0), this mean that the longer item would have more space because it started from a larger size. For example:\n   [https://codesandbox.io/embed/lucid-cohen-svxjqz?fontsize=14hidenavigation=1&theme=dark]\n\n    - Split navigation: enables the design pattern of a navigation bar where one group of items are aligned left and another group aligned right. This did by use **auto margins** and the only way before implement `gap` properties in flexbox:\n    [https://codesandbox.io/embed/determined-paper-sywrmt?fontsize=14&hidenavigation=1&theme=dark]\n\n- **Media Objects:**\n    - With flexbox we can allow the part of the media object containing the image to take its sizing information from the image, and then the body of the media object flexes to take up the remaining space. here different ways to constrain the media object in your design:\n    - To prevent the image growing too large, add a max-width to the image and because the __media object is using the initial values of flexbox it can shrink but not grow,and uses `flex-basis` of `auto`, any `width` or `max-width` applied to the image will become the `flex-basis`__.\n- **Form Controls:**\n    - A common pattern is to have an `<input>` element paired with a `<button>` such as _search box_. You need to allow the `<input>` field to grow, while the button does not grow.then add a label or icon to the left so button pushed  to the right.[https://codepen.io/farisubuntu/pen/abRMvgM]\n    ```html\n    <form class=\"example\">\n     <div class=\"wrapper\"> <!--added wrapper-->\n      <input type=\"text\" id=\"text\">\n      <input type=\"submit\" value=\"Send\">\n     </div>\n    </form>\n    ```\n    \n\n## Flexbox alignment overview\n\nThe set of properties can be placed into two groups. Properties for **space distribution**, and properties for **alignment**. \n\nThe properties which distribute space are:\n- `justify-content:` <mark>flex-start</mark> : space distribution on the main axis.\n- `align-content:` <mark>stretch</mark>: space distribution on the cross axis.\n- `place-content`: a shorthand for setting both of the above properties.\n\nThe properties used for alignment in flexbox: The space available for this alignment will depend on the **height of the flex container**, or flex line in the case of a wrapped set of items.\n\n<div class=\"note red\"><code>justify-content</code> values work the same if your container <code>flex-direction: column;</code>but you may not have extra space to distribute in a column unless you add a height or block-size to the flex container, See the Pen \n\n<!-- don't remove this line -->\n(https://codepen.io/rachelandrew/pen/zLyMyV)</div>\n\n\n- `align-self`: <mark>stretch</mark> aligns a single item on the cross axis. Flex items in a row stretch to the height of the tallest item by default.\n\n- `align-items`: aligns all of the items as a group on the cross axis. this property can be applied to the flex container to set all of the individual `align-self` properties as a group. try different values at https://codepen.io/farisubuntu/pen/yLRweXQ\n\n**If you are working on the main axis then the properties begin with justify-. On the cross axis they begin with align-**\n\n#### `gap` properity:\n\n- The gap property in CSS is a shorthand for `row-gap` and `column-gap`, specifying the size of gutters, which is the space between rows and columns within `grid`, `flex,` and `multi-column` layouts.\n- \n\n#### Trick: centering text inside flex item\n\n```css\n.item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n> For problems examples solved using flex layout, see: \n[https://github.com/philipwalton/solved-by-flexbox]\n\n#### tricks when use flex layout:\n\nListed below are some of my criteria for an ideal flexbox grid system. Fortunately, with Flexbox we get most of these features for free.\n\n- By default, each flexbox grid cell is the same width and height as every other cell in the row. Basically they all size to fit by default. (apply `flex:1` on all flex items)\n- For finer control, you can add sizing classes to individual cells. Without these classes, the cells simply divide up the available space as usual.(such as `flex:0 0 33.3333%`)\n- For responsive flexbox grids, you can add media query-specific classes to the cells.\n- Individual cells can be aligned vertically to the top, bottom, or middle. (`align-self:flex-start|flex-end|center`)\n- When you want all of the cells in a flexbox grid to have the same sizing, media, or alignment values, you should be able to just add a single class to the container to avoid unnecessary repetition.\n- flexbox Grids can be nested as many levels deep as needed.\n\n> TIP: when you use a *flex layout* to plan a page; first, for each area or section on your page decide if it will take the role as a `container/item` or both roles then contained it withing a wrapper element and set it as a `display:flex`\n\n\n<div class=\"note blue\"><div class=\"bolder\">Wireframes</div> are used to outline webpage styles, content, and functionality. UX designers will often use wireframes to explain their ideas to web developers.</div>\n\n---\n\n\n## Using space-between {#identifier .h2}\n\n- `justify-content`: the space between items is not a **gap** or **margin**\n\n<img src=\"https://defensivecss.dev/img/defensive-10-1.png\">\n\n- When the number of items is less than four, here is what will happen:\n\n<img src=\"https://defensivecss.dev/img/defensive-10-2.png\">\n\n##### There are different solutions to this:\n\n- Margin\n- Flexbox gap (Use with caution)\n- Padding (Can be applied to the parent of each child element):\n    ```css\n    .wrapper {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1rem;\n    }\n    ```\n    \n    > example: https://codesandbox.io/s/flamboyant-farrell-q1p0nn?file=/index.html\n\n- Adding empty elements to act as a spacer\n\n---\n\n## Text over image:\n\n<img src=\"https://defensivecss.dev/img/defensive-11-1.png\" width=\"60%\" />\n\n- The problem: When image fails to load, it will not readable:\nTo Fix that: add a background color to the image such as `img{background-color:grey;}`\n\n## Vertical media query\nsee: https://defensivecss.dev/tip/vertical-mq/\n\n\n---\n\n<div class=\"tip note\">\n<div class=\"x-large blue\">In Summary</div>\n\n- The alignment properties started as a list in Flexbox, but are now in their own specification and apply to other layout contexts. A few key facts will help you to remember how to use them in Flexbox:\n- **If a flex item has a text element or an image that is bigger than the item itself, the browser won’t shrink them.** To change that default behavior, we need to set the `min-width` of the flex item to `0`. That’s because the `min-width` default value is `auto`, the overflow happens:\n\n```css\n.card__title {\n    overflow-wrap: break-word;\n    min-width: 0;\n}\n```\n> The same thing applies to a column flex wrapper, but we will use `min-height: 0` instead.\n\n- justify- the main axis and align- the cross axis;\nTo use align-content and justify-content you need spare space to play with;\n- The align-content and justify-content properties deal with the items as a group, sharing out space. Therefore, you can’t target an individual item and so there is no -self alignment for these properties;\n- If you do want to align one item, or split a group on the main axis, use auto margins to do so;\n- The align-items property sets all of the align-self values as a group. Use align-self on the flex child to set the value for an individual item.\n- When element content gone outside its box, this called **overflow**. (try it:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/overflow)\n- When an element content cover or lap another element content, this called **overlap**.\n(see:https://codesandbox.io/s/overlapping-r8bbt5?file=/index.html)\n- \n</div>\n\n## Resources and helping sites:\n\n- [https://web.dev/learn/css/flexbox/]\n- To get random images: [https://picsum.photos]\n- https://www.smashingmagazine.com/2018/08/flexbox-alignment/\n\n----\n",
      "html": "<style>\n.h1{\n  color:blue;\n}\n.h2{\n  color:green;\n}\n.red{\n  color:red;\n}\n.blue{\n    color:blue;\n}\n.bold{\n  font-size:large;\n}\n.bolder{\n  font-size:larger;\n}\n.x-large{\n    font-size:xx-large;\n}\n.note{\n background-color:bisque;\n border-left:5px solid gray;\n padding:0.5em;\n}\ncode,.code{\n  border:1px dashed bisque;\n  padding:2px;\n}\n</style>\n<h1 id=\"flex-box-layout%3A\">Flex Box Layout: <a class=\"heading-anchor-permalink\" href=\"#flex-box-layout%3A\">#</a></h1>\n<ul>\n<li>\n<p>source: <a href=\"https://drafts.csswg.org/css-flexbox/#overview\">https://drafts.csswg.org/css-flexbox/#overview</a></p>\n</li>\n<li>\n<p>additional: <a href=\"https://www.freecodecamp.org/news/css-flexbox-tutorial-with-cheatsheet/\">https://www.freecodecamp.org/news/css-flexbox-tutorial-with-cheatsheet/</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"flex-layout-box-model-and-terminology\">Flex layout box model and terminology <a class=\"heading-anchor-permalink\" href=\"#flex-layout-box-model-and-terminology\">#</a></h2>\n<ul>\n<li>\n<p>Unlike block and inline layout, whose layout calculations are biased to the block and inline flow directions, flex layout is biased (منحاز) to the flex directions\n<img src=\"https://drafts.csswg.org/css-flexbox/images/flex-direction-terms.svg\" alt=\"not found\"></p>\n</li>\n<li>\n<p>Describe:</p>\n<ul>\n<li>main axis,main dimension</li>\n<li>main-start,main-end</li>\n<li>main size, main size property</li>\n<li>cross axis,cross dimension</li>\n<li>cross-start,cross-end</li>\n<li>cross size, cross size property</li>\n</ul>\n</li>\n<li>\n<p>Flex containers are not block containers, and so some properties that were designed with the assumption of block layout don’t apply in the context of flex layout. In particular <code>clear,float</code>.</p>\n</li>\n<li>\n<p>As it is out-of-flow, an absolutely-positioned child of a flex container does not participate in flex layout.</p>\n</li>\n<li>\n<p>Specifying <code>visibility:collapse</code> on a flex item causes it to become a collapsed flex item?</p>\n</li>\n<li>\n<p>when you make a flex container using <code>display:flex;</code> all flex items will take some initial values as following:</p>\n<ul>\n<li>Items display in a row (the flex-direction property’s default is row).</li>\n<li>The items start from the start edge of the main axis.(<code>justify-content:flex-start</code>)</li>\n<li>The items do not stretch (<code>flex-grow:auto</code>) on the main dimension, but can shrink (<code>flex-shrink:1</code>) (<em>when the container has more space available</em>)</li>\n<li>The items will stretch to fill the size of the cross axis (<em>when available space not enough</em>)</li>\n<li>The flex-basis property is set to auto (<em>consult <code>width,min/max-width</code></em>) else use content size as <code>flex-basis</code></li>\n<li>The <code>flex-wrap</code> property is set to nowrap.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"flex-lines\">Flex Lines <a class=\"heading-anchor-permalink\" href=\"#flex-lines\">#</a></h2>\n<ul>\n<li><code>flex container</code> can be either single-line or multi-line, depending on the <code>flex-wrap</code> property.</li>\n<li>When additional lines are created, they are stacked in the flex container along the <code>cross axis</code></li>\n<li>Once content is broken into lines, each line is laid out independently; flexible lengths and the <code>justify-content</code> and <code>align-self</code> properties <strong>only consider the items on a single line at a time</strong>.</li>\n<li>In a multi-line flex container:\n<ul>\n<li>The <code>cross size</code> of each line is the minimum size necessary to contain the flex items on the line (after alignment due to <code>align-self</code>), and</li>\n<li>The lines are aligned within the flex container with the <code>align-content</code> property.</li>\n</ul>\n</li>\n<li>In a single-line flex container,\n<ul>\n<li>the cross size of the line is the cross size of the flex container, and <code>align-content</code> has no effect.</li>\n<li>The main size of a line is always the same as the main size of the flex container’s content box.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Properties that apply to the flex container:\n<ul>\n<li><code>align-content</code>: only work if container has <code>wrap</code> value and container should be has a <strong>larger vertical space than sum of all height  of the flex rows/lines</strong></li>\n<li><code>align-items</code> (vertically/cross axis)</li>\n<li><code>display</code> (<code>flex,inline-flex</code>)</li>\n<li><code>flex-direction</code> (<code>row,column,row-reverse,column-reverse</code>)</li>\n<li><code>flex-flow</code> (shorthand for <code>flex-flow:flex-direction flex-wrap</code>)</li>\n<li><code>flex-wrap</code></li>\n<li><code>justify-content</code> (horizontally/main axis)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Properties that apply to the flex items:\n<ul>\n<li><code>align-self</code> (override align-items for individual items)</li>\n<li><code>flex</code></li>\n<li><code>flex-basis</code></li>\n<li><code>flex-grow</code></li>\n<li><code>flex-shrink</code></li>\n<li><code>order</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"flexibility\">Flexibility <a class=\"heading-anchor-permalink\" href=\"#flexibility\">#</a></h2>\n<ul>\n<li>The defining aspect of flex layout is the ability to make the flex items “flexing”, altering their <strong>width/height</strong> to fill the available space in the main dimension.</li>\n<li>when is the <code>flex-item</code> is <strong>fully inflexible</strong>? (such as, <code>flex:none;</code> instead of <code>flex:1</code> for example).</li>\n<li>The flex property shorthand specifies the components of a flexible size (<strong>target flex items not containers</strong>):\n<ul>\n<li>\n<p><code>flex-basis</code>:  defines the size of that item in terms of the space it leaves as available space.</p>\n<ul>\n<li>the initial value is <code>auto</code> means that the browser will see if the items have a size (<code>width</code>) else it will use the content’s size (<code>min-content</code>) as the <code>flex-basis</code> so this tell the browser to respect the size of other items and all items grow and shrink from a flex-basis of <code>auto</code>; the result is the longer item would have more space because it started from a larger size.</li>\n<li>similar to adding width to a flex-item. It will set the initial size of a flex-item but the final size will be based on the available space,<code>flex-grow</code> and <code>flex-shrink</code>.</li>\n</ul>\n</li>\n<li>\n<p><code>flex-grow</code>: positive integer, (the opposite of <code>flex-shrink</code>) flex items can grow along the main axis from their flex-basis. This will cause the item to stretch and take up any available space on that axis, <em>or a proportion of the available space if other items are allowed to grow too</em>.</p>\n</li>\n<li>\n<p><code>flex-shrink</code>: helps a shrink based on the width of the flex-container.(<strong>not work if <code>flex-wrap:wrap</code></strong>)</p>\n</li>\n<li>\n<p><code>flex</code> examples:</p>\n<ul>\n<li><code>flex: initial</code> = <code>flex: 0 1 auto</code>; don’t grow - can shrink smaller than their <code>flex-basis</code> - items have the base size of <code>auto</code></li>\n<li><code>flex: auto</code> = <code>flex: 1 1 auto</code>; items can grow larger than the <code>flex-basis</code> - can shrink … - have the base size of <code>auto</code> (the space that is shared between the items is shared out after each item is laid out as max-content size.)</li>\n<li><code>flex:1</code> = <code>flex: 1 1 0</code>; can grow - can shrink - have 0 size so they all grow equally and the space is shared equally.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>When a box is a flex item, flex is consulted instead of the main size property to determine the main size of the box. If a box is not a flex item, flex has no effect.</p>\n</blockquote>\n<h2 id=\"examples-of-typical-use-cases-of-flexbox%3A\">Examples of typical use cases of flexbox: <a class=\"heading-anchor-permalink\" href=\"#examples-of-typical-use-cases-of-flexbox%3A\">#</a></h2>\n<ul>\n<li>\n<p>source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Typical_Use_Cases_of_Flexbox\">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Typical_Use_Cases_of_Flexbox</a></p>\n</li>\n<li>\n<p><strong>Navigation:</strong></p>\n<ul>\n<li>\n<p>a list of items displayed as a horizontal that we need to adjust their white space between or around them or absorb the extra space inside the items to allowing the items to grow and take up this space. For example: you wanted to respect the size property of items but share the avialable space among them, then use <code>flex:auto</code> (= `flex:1 1 0), this mean that the longer item would have more space because it started from a larger size. For example:\n[<a href=\"https://codesandbox.io/embed/lucid-cohen-svxjqz?fontsize=14hidenavigation=1&amp;theme=dark\">https://codesandbox.io/embed/lucid-cohen-svxjqz?fontsize=14hidenavigation=1&amp;theme=dark</a>]</p>\n</li>\n<li>\n<p>Split navigation: enables the design pattern of a navigation bar where one group of items are aligned left and another group aligned right. This did by use <strong>auto margins</strong> and the only way before implement <code>gap</code> properties in flexbox:\n[<a href=\"https://codesandbox.io/embed/determined-paper-sywrmt?fontsize=14&amp;hidenavigation=1&amp;theme=dark\">https://codesandbox.io/embed/determined-paper-sywrmt?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a>]</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Media Objects:</strong></p>\n<ul>\n<li>With flexbox we can allow the part of the media object containing the image to take its sizing information from the image, and then the body of the media object flexes to take up the remaining space. here different ways to constrain the media object in your design:</li>\n<li>To prevent the image growing too large, add a max-width to the image and because the <strong>media object is using the initial values of flexbox it can shrink but not grow,and uses <code>flex-basis</code> of <code>auto</code>, any <code>width</code> or <code>max-width</code> applied to the image will become the <code>flex-basis</code></strong>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Form Controls:</strong></p>\n<ul>\n<li>A common pattern is to have an <code>&lt;input&gt;</code> element paired with a <code>&lt;button&gt;</code> such as <em>search box</em>. You need to allow the <code>&lt;input&gt;</code> field to grow, while the button does not grow.then add a label or icon to the left so button pushed  to the right.[<a href=\"https://codepen.io/farisubuntu/pen/abRMvgM\">https://codepen.io/farisubuntu/pen/abRMvgM</a>]</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form class=&quot;example&quot;&gt;\n &lt;div class=&quot;wrapper&quot;&gt; &lt;!--added wrapper--&gt;\n  &lt;input type=&quot;text&quot; id=&quot;text&quot;&gt;\n  &lt;input type=&quot;submit&quot; value=&quot;Send&quot;&gt;\n &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"flexbox-alignment-overview\">Flexbox alignment overview <a class=\"heading-anchor-permalink\" href=\"#flexbox-alignment-overview\">#</a></h2>\n<p>The set of properties can be placed into two groups. Properties for <strong>space distribution</strong>, and properties for <strong>alignment</strong>.</p>\n<p>The properties which distribute space are:</p>\n<ul>\n<li><code>justify-content:</code> <mark>flex-start</mark> : space distribution on the main axis.</li>\n<li><code>align-content:</code> <mark>stretch</mark>: space distribution on the cross axis.</li>\n<li><code>place-content</code>: a shorthand for setting both of the above properties.</li>\n</ul>\n<p>The properties used for alignment in flexbox: The space available for this alignment will depend on the <strong>height of the flex container</strong>, or flex line in the case of a wrapped set of items.</p>\n<div class=\"note red\"><code>justify-content</code> values work the same if your container <code>flex-direction: column;</code>but you may not have extra space to distribute in a column unless you add a height or block-size to the flex container, See the Pen \n<!-- don't remove this line -->\n<p>(<a href=\"https://codepen.io/rachelandrew/pen/zLyMyV\">https://codepen.io/rachelandrew/pen/zLyMyV</a>)</div></p>\n<ul>\n<li>\n<p><code>align-self</code>: <mark>stretch</mark> aligns a single item on the cross axis. Flex items in a row stretch to the height of the tallest item by default.</p>\n</li>\n<li>\n<p><code>align-items</code>: aligns all of the items as a group on the cross axis. this property can be applied to the flex container to set all of the individual <code>align-self</code> properties as a group. try different values at <a href=\"https://codepen.io/farisubuntu/pen/yLRweXQ\">https://codepen.io/farisubuntu/pen/yLRweXQ</a></p>\n</li>\n</ul>\n<p><strong>If you are working on the main axis then the properties begin with justify-. On the cross axis they begin with align-</strong></p>\n<h4 id=\"gap-properity%3A\"><code>gap</code> properity: <a class=\"heading-anchor-permalink\" href=\"#gap-properity%3A\">#</a></h4>\n<ul>\n<li>The gap property in CSS is a shorthand for <code>row-gap</code> and <code>column-gap</code>, specifying the size of gutters, which is the space between rows and columns within <code>grid</code>, <code>flex,</code> and <code>multi-column</code> layouts.</li>\n<li></li>\n</ul>\n<h4 id=\"trick%3A-centering-text-inside-flex-item\">Trick: centering text inside flex item <a class=\"heading-anchor-permalink\" href=\"#trick%3A-centering-text-inside-flex-item\">#</a></h4>\n<pre><code class=\"language-css\">.item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</code></pre>\n<blockquote>\n<p>For problems examples solved using flex layout, see:\n[<a href=\"https://github.com/philipwalton/solved-by-flexbox\">https://github.com/philipwalton/solved-by-flexbox</a>]</p>\n</blockquote>\n<h4 id=\"tricks-when-use-flex-layout%3A\">tricks when use flex layout: <a class=\"heading-anchor-permalink\" href=\"#tricks-when-use-flex-layout%3A\">#</a></h4>\n<p>Listed below are some of my criteria for an ideal flexbox grid system. Fortunately, with Flexbox we get most of these features for free.</p>\n<ul>\n<li>By default, each flexbox grid cell is the same width and height as every other cell in the row. Basically they all size to fit by default. (apply <code>flex:1</code> on all flex items)</li>\n<li>For finer control, you can add sizing classes to individual cells. Without these classes, the cells simply divide up the available space as usual.(such as <code>flex:0 0 33.3333%</code>)</li>\n<li>For responsive flexbox grids, you can add media query-specific classes to the cells.</li>\n<li>Individual cells can be aligned vertically to the top, bottom, or middle. (<code>align-self:flex-start|flex-end|center</code>)</li>\n<li>When you want all of the cells in a flexbox grid to have the same sizing, media, or alignment values, you should be able to just add a single class to the container to avoid unnecessary repetition.</li>\n<li>flexbox Grids can be nested as many levels deep as needed.</li>\n</ul>\n<blockquote>\n<p>TIP: when you use a <em>flex layout</em> to plan a page; first, for each area or section on your page decide if it will take the role as a <code>container/item</code> or both roles then contained it withing a wrapper element and set it as a <code>display:flex</code></p>\n</blockquote>\n<div class=\"note blue\"><div class=\"bolder\">Wireframes</div> are used to outline webpage styles, content, and functionality. UX designers will often use wireframes to explain their ideas to web developers.</div>\n<hr>\n<h2 id=\"using-space-between-%7B%23identifier-.h2%7D\">Using space-between {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#using-space-between-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li><code>justify-content</code>: the space between items is not a <strong>gap</strong> or <strong>margin</strong></li>\n</ul>\n<img src=\"https://defensivecss.dev/img/defensive-10-1.png\">\n<ul>\n<li>When the number of items is less than four, here is what will happen:</li>\n</ul>\n<img src=\"https://defensivecss.dev/img/defensive-10-2.png\">\n<h5 id=\"there-are-different-solutions-to-this%3A\">There are different solutions to this: <a class=\"heading-anchor-permalink\" href=\"#there-are-different-solutions-to-this%3A\">#</a></h5>\n<ul>\n<li>\n<p>Margin</p>\n</li>\n<li>\n<p>Flexbox gap (Use with caution)</p>\n</li>\n<li>\n<p>Padding (Can be applied to the parent of each child element):</p>\n<pre><code class=\"language-css\">.wrapper {\ndisplay: flex;\nflex-wrap: wrap;\ngap: 1rem;\n}\n</code></pre>\n<blockquote>\n<p>example: <a href=\"https://codesandbox.io/s/flamboyant-farrell-q1p0nn?file=/index.html\">https://codesandbox.io/s/flamboyant-farrell-q1p0nn?file=/index.html</a></p>\n</blockquote>\n</li>\n<li>\n<p>Adding empty elements to act as a spacer</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"text-over-image%3A\">Text over image: <a class=\"heading-anchor-permalink\" href=\"#text-over-image%3A\">#</a></h2>\n<img src=\"https://defensivecss.dev/img/defensive-11-1.png\" width=\"60%\" />\n<ul>\n<li>The problem: When image fails to load, it will not readable:\nTo Fix that: add a background color to the image such as <code>img{background-color:grey;}</code></li>\n</ul>\n<h2 id=\"vertical-media-query\">Vertical media query <a class=\"heading-anchor-permalink\" href=\"#vertical-media-query\">#</a></h2>\n<p>see: <a href=\"https://defensivecss.dev/tip/vertical-mq/\">https://defensivecss.dev/tip/vertical-mq/</a></p>\n<hr>\n<div class=\"tip note\">\n<div class=\"x-large blue\">In Summary</div>\n<ul>\n<li>The alignment properties started as a list in Flexbox, but are now in their own specification and apply to other layout contexts. A few key facts will help you to remember how to use them in Flexbox:</li>\n<li><strong>If a flex item has a text element or an image that is bigger than the item itself, the browser won’t shrink them.</strong> To change that default behavior, we need to set the <code>min-width</code> of the flex item to <code>0</code>. That’s because the <code>min-width</code> default value is <code>auto</code>, the overflow happens:</li>\n</ul>\n<pre><code class=\"language-css\">.card__title {\n    overflow-wrap: break-word;\n    min-width: 0;\n}\n</code></pre>\n<blockquote>\n<p>The same thing applies to a column flex wrapper, but we will use <code>min-height: 0</code> instead.</p>\n</blockquote>\n<ul>\n<li>justify- the main axis and align- the cross axis;\nTo use align-content and justify-content you need spare space to play with;</li>\n<li>The align-content and justify-content properties deal with the items as a group, sharing out space. Therefore, you can’t target an individual item and so there is no -self alignment for these properties;</li>\n<li>If you do want to align one item, or split a group on the main axis, use auto margins to do so;</li>\n<li>The align-items property sets all of the align-self values as a group. Use align-self on the flex child to set the value for an individual item.</li>\n<li>When element content gone outside its box, this called <strong>overflow</strong>. (try it:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\">https://developer.mozilla.org/en-US/docs/Web/CSS/overflow</a>)</li>\n<li>When an element content cover or lap another element content, this called <strong>overlap</strong>.\n(see:<a href=\"https://codesandbox.io/s/overlapping-r8bbt5?file=/index.html\">https://codesandbox.io/s/overlapping-r8bbt5?file=/index.html</a>)</li>\n<li></li>\n</ul>\n</div>\n<h2 id=\"resources-and-helping-sites%3A\">Resources and helping sites: <a class=\"heading-anchor-permalink\" href=\"#resources-and-helping-sites%3A\">#</a></h2>\n<ul>\n<li>[<a href=\"https://web.dev/learn/css/flexbox/\">https://web.dev/learn/css/flexbox/</a>]</li>\n<li>To get random images: [<a href=\"https://picsum.photos\">https://picsum.photos</a>]</li>\n<li><a href=\"https://www.smashingmagazine.com/2018/08/flexbox-alignment/\">https://www.smashingmagazine.com/2018/08/flexbox-alignment/</a></li>\n</ul>\n<hr>\n",
      "id": 4
    },
    {
      "path": "CSS/grid-review.md",
      "url": "CSS/grid-review.html",
      "content": "# Basic grid layout concepts {#identifier .h1}\n\n- source 1: \n(https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)\n\n- source 2: \nhttps://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids\n\n- source 3: great tips about flex/grid layouts\nhttps://defensivecss.dev/tip\n\n\n- source 4: Grid Poster: use it as a reference when working with Grid layout.\nhttps://css-tricks.com/wp-content/uploads/2022/02/css-grid-poster.png\n- additional good resources:\n  - https://css-tricks.com/snippets/css/complete-guide-grid/\n  - https://learncssgrid.com/\n\n## Basic Example: use this html code to create a grid with 3 200-px width column tracks {#identifier .h2}\n\n```html\n<div class=\"wrapper\">\n  <div>One</div>\n  <div>Two</div>\n  <div>Three</div>\n  <div>Four</div>\n  <div>Five</div>\n</div>\n```\n- what is a `grid tracks`, and when it defines?\nA track is the space between two grid lines. A row track is between two row lines and a column track between two column lines. When we create our grid we create these tracks by assigning a size to them.\n<img src=\"https://web-dev.imgix.net/image/VbAJIREinuYvovrBzzvEyZOpw5w1/7YkhnpgOQLrcaxjlKmlU.svg\" alt=\"not found\" />\n\n- Example:  define a grid with three column tracks, two row tracks and a 10 pixel gap between the tracks as follows.\n\n```css\n.container {\n    display: grid;\n    grid-template-columns: 5em 100px 30%;\n    /*auto:default for rows, means 'big as content' */\n    grid-template-rows: 200px auto;\n    gap: 10px;\n}\n```\n\n## The fr unit and Unequal sizes: {#identifier .h2}\n\n- create three equal width tracks that grow and shrink according to the available space.\n- give 2 parts to the first track and one part each to the next two tracks.\n\n## Mixing flexible and absolute sizes {#identifier .h2}\n\n- what happen when you mix absolute sized tracks with fr units. The first track is 500 pixels?\n\n## Intrinsic sizing keywords {#identifier .h2}\n\n- grid tracks can use **intrinsic sizing keywords:\n    - `min-content`: make a track as small as it can be without the track content overflowing. \n    - `max-content`: has the opposite effect. The track will become as wide enough for all of the content to display in one long unbroken string. This might cause overflows as the string will not wrap.\n    - `fit-content()`:  **function** acts like max-content at first. However, once the track reaches the size that you pass into the function, the content starts to wrap. So fit-content(10em) will create a track that is less than 10em, if the max-content size is less than 10em, but never larger than 10em.\n\n\n\n## Item placement {#identifier .h2}\n\n- You can place items into a precise location on the grid using **lines ,area** and **names**\n\n\n## Track listings with repeat() notation {#identifier .h2}\n\n- use the `repeat()` notation to create a `grid` with an initial 20px track and repeating of 6 tracks then a final 20px track?\n- grid will consist of 10 tracks, a 1fr track, and then followed by a 2fr track. This pattern will be repeated five times.\n\n## Implicit and explicit grids {#identifier .h2}\n\n- explain the differences and how control what happen when more grid tracks are needed? *(hint: `grid-auto-rows`,`grid-auto-columns`)*\n\n\n## Track sizing and `minmax` {#identifier .h2}\n- ensure that automatically created rows will be a minimum of 100 pixels tall, and a maximum of `auto`.\n- what's `auto` means? *(hint: respect the content size,prevent overflow)*\n\n## Grid Lines {#identifier .h2}\n\n- Lines are numbered according to the writing mode of the document.\n- how many lines in a grid with a 3 columns and 3 rows?\n\n## Gutters (gaps) {#identifier .h2}\n\n- create a 10px gap between columns and a 1em gap between rows.(*hint: target the container*)\n- relation between flexible length `fr` tracks and spaces used by a gaps?\n\n---\n\n## Auto-fit Vs Auto-fill {#identifier .h2}\n\nWhen using CSS grid `minmax()` function, it's important to decide between using the `auto-fit` or `auto-fill` keywords:\n\n - with `minmax()` function, the `auto-fit` keyword will expand the grid items to fill the available space (especially if there is only one grid item and `auto-fit` is used) . While `auto-fill` will keep the available space reserved without altering the grid items width.\n\n<img src=\"https://defensivecss.dev/img/defensive-16-1.png\" alt=\"autofill_autofit\" width=\"90%\">\n\n\n<div class=\"note red bold\">Note When use a css grid fixed values such (grid-template-columns:250px 1fr;) always use a media queries else this will break on small viewport sizes.</div>\n\n--- \n\n## Minimum Content Size In CSS grid {#identifier .h2}\n\n- Similar to flexbox, CSS grid has a default minimum content size for its child items which is auto. That means, if there is an element that is larger than the grid item (__for example: a long item content displayed as flex so it must be inline and the item grid will respect that due to its default size which it `auto`__), it will overflow and a horizontal scrolling bar will appeared.\n\n- To fix that, we have three different solutions:\n    1. Using `minmax()`\n    2. Applying `min-width:0` to the grid item\n    3. Adding overflow: hidden to the grid item\n\n<img src=\"https://defensivecss.dev/img/defensive-15-1.png\" width=\"60%\" alt=\"not found\"  />\n\nsee details: https://defensivecss.dev/tip/grid-min-content-size/\n\n\n\n---\n## Fluid columns snippet {#identifier .h2}\n\nFluid width columns that break into more or less columns as space is available, with no media queries!\n\nfor example:\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px\n  , 1fr));\n  /* also try 'auto-fit' instead of 'auto-fill' ?\n  /* This is better for small screens, once min() is \n  better supported */\n  /* grid-template-columns: repeat(auto-fill,\n         minmax(min(200px, 100%), 1fr)); */\n  gap: 1rem;\n}\n```\n> One of the common things that break a layout is using a **fixed** width or height with an element that has content in different lengths. Instead, use `min/max-height/width`\n\n## Positioning items against lines {#identifier .h2}\n\n- using following grid container:\n```css\n.wrapper {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: 100px;\n}\n```\n\nWrite a code to modify a grid layout to be like this image:\n<img src=\"../data/images/grid-example.png\" alt=\"not found\" />\n\n(also try the shorthands `grid-row: x/z`,`grid-column: x/z`)\n\n## Grid Cells {#identifier .h2}\n- the smallest unit on a grid (looks like a table cell) and its the intersection of a grid `...` and a grid `...`\n\n## Grid areas {#identifier .h2}\n- A grid area is the logical space used to lay out one or more grid items.\n- Consists of one or more `...`\n- bounded by 4 `grid lines`, one for each size.\n- can be named explicitly using the `grid-template-areas` of the **`grid container`**\n- can be referenced implicitly by its bounding grid lines.\n- a grid item is assigned to a grid area using the `grid-placement-properties(grid-column-start/end,grid-row-start/end)` or `grid-row,grid-column` shorthands.\n- The `grid-area` CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n\n- practice: https://codepen.io/farisubuntu/pen/poxBGvQ\n\n\nthe final layout:\n![not found](../data/images/grid-areas.png \"grid areas\")\n- We can create gaps (or hard “stops”) between cells using a dot `.` which means 'empty cell'\n- Rows must have the same number of columns\n\n- practice: click <a href=\"https://drafts.csswg.org/css-grid/#adapting-to-available-space\" _blank alt=\"error\">https://drafts.csswg.org/css-grid/#adapting-to-available-space</a>\n\n- practice: Source-Order Independence (named area and `@media`) => see: https://drafts.csswg.org/css-grid/#source-independence for solution.\n\n```css\n@media(orientation:portrait){...}\n@media(orientation:landscape){...}\n```\ngoal:\n\n<figure>\n<figcaption>An arrangement suitable for “portrait” orientation.</figcaption>\n<img src=\"https://drafts.csswg.org/css-grid/images/game-portrait.png\" alt=\"not found\" />\n</figure>\n\n<figure><figcaption>An arrangement suitable for “landscape“ orientation.</figcaption><img src=\"https://drafts.csswg.org/css-grid/images/game-landscape.png\" alt=\"not found\" />\n</figure>\n\n> tips: `grid-template-area`, each string \"... ...\" represents a `row` and each word inside the string is a column. number of rows equal to number of values given to `grid-template-rows` and the same for columns.\n\n- practice: use `grid-row:x/y` and `grid-column:x/y` to implement grid using grid lines:\n(https://codepen.io/farisubuntu/pen/WNaWPOY)\n\n- the final layout: \n(https://mdn.github.io/learning-area/css/css-layout/grids/8-placement-starting-point.html)\n\n## Image maximum width {#identifier .h2}\n\n- Don't forget to set `max-width: 100%` to all images. This can be added to the CSS reset that you use:\n\n```css\nimg {\n    max-width: 100%;\n    object-fit: cover;\n}\n```\n\n## Position sticky with CSS Grid {#identifier .h2}\n\n-  The default behavior for grid items is to `stretch`. As a result, the aside element in the example below is equal to the main section height.\n\n<img src=\"https://defensivecss.dev/img/defensive-17-1.jpg\" width=\"60%\" alt=\"not found\" />\n\nto resolve this so it will looks like:\n\n<img src=\"https://defensivecss.dev/img/defensive-17-2.jpg\" width=\"60%\" alt=\"not found\" />\n\nyou need to reset `align-self` property:\n\n```css\naside {\n    align-self: start;\n    position: sticky;\n    top: 1rem;\n}\n```\nsee this example: \nhttps://codesandbox.io/s/position-sticky-with-css-grid-cqrjzw?file=/index.html\n\nmore about this topics:\nhttps://ishadeed.com/article/position-sticky-css-grid/\n\n---\n\n- use `auto-fit` and `minmax(min,max)` with repeat to make a grid wrapped, for example:\n\n```css\ngrid-template-columns: \n      repeat(auto-fit, minmax(200px, 1fr));\n```\n\n> Sometimes it's helpful to be able to ask grid to create as many columns as will fit into the container (**make a grid responsive**), then use `auto-fill` and `minmax()` together:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, \n                          minmax(200px, 1fr));\n  grid-auto-rows: minmax(100px, auto);\n  gap: 20px;\n}\n```\n\n##### notes:\n- `justify-items` (row-axis) the opposed to `align-items`(column-axis)\n- \n## Nested grid and subgrid {#identifier .h2}\n- The difference?\n\n## Controlling the order {#identifier .h2}\n- *Complete*: We can control the order in which items stack up by using the `...` property?\n\n---\n\n# Relationship of grid layout to other layout methods {#identifier .h1}\n\nsource: \nhttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout\n\n## Grid and flexbox {#identifier .h2}\n- The basic difference?\n- when you wrap flex items, each new row (or column when working by column) is an independent flex line in the flex container. **Space distribution happens across the flex line.**\n- ",
      "html": "<h1 id=\"basic-grid-layout-concepts-%7B%23identifier-.h1%7D\">Basic grid layout concepts {#identifier .h1} <a class=\"heading-anchor-permalink\" href=\"#basic-grid-layout-concepts-%7B%23identifier-.h1%7D\">#</a></h1>\n<ul>\n<li>\n<p>source 1:\n(<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout</a>)</p>\n</li>\n<li>\n<p>source 2:\n<a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids\">https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids</a></p>\n</li>\n<li>\n<p>source 3: great tips about flex/grid layouts\n<a href=\"https://defensivecss.dev/tip\">https://defensivecss.dev/tip</a></p>\n</li>\n<li>\n<p>source 4: Grid Poster: use it as a reference when working with Grid layout.\n<a href=\"https://css-tricks.com/wp-content/uploads/2022/02/css-grid-poster.png\">https://css-tricks.com/wp-content/uploads/2022/02/css-grid-poster.png</a></p>\n</li>\n<li>\n<p>additional good resources:</p>\n<ul>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">https://css-tricks.com/snippets/css/complete-guide-grid/</a></li>\n<li><a href=\"https://learncssgrid.com/\">https://learncssgrid.com/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"basic-example%3A-use-this-html-code-to-create-a-grid-with-3-200-px-width-column-tracks-%7B%23identifier-.h2%7D\">Basic Example: use this html code to create a grid with 3 200-px width column tracks {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#basic-example%3A-use-this-html-code-to-create-a-grid-with-3-200-px-width-column-tracks-%7B%23identifier-.h2%7D\">#</a></h2>\n<pre><code class=\"language-html\">&lt;div class=&quot;wrapper&quot;&gt;\n  &lt;div&gt;One&lt;/div&gt;\n  &lt;div&gt;Two&lt;/div&gt;\n  &lt;div&gt;Three&lt;/div&gt;\n  &lt;div&gt;Four&lt;/div&gt;\n  &lt;div&gt;Five&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>\n<p>what is a <code>grid tracks</code>, and when it defines?\nA track is the space between two grid lines. A row track is between two row lines and a column track between two column lines. When we create our grid we create these tracks by assigning a size to them.\n<img src=\"https://web-dev.imgix.net/image/VbAJIREinuYvovrBzzvEyZOpw5w1/7YkhnpgOQLrcaxjlKmlU.svg\" alt=\"not found\" /></p>\n</li>\n<li>\n<p>Example:  define a grid with three column tracks, two row tracks and a 10 pixel gap between the tracks as follows.</p>\n</li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    display: grid;\n    grid-template-columns: 5em 100px 30%;\n    /*auto:default for rows, means 'big as content' */\n    grid-template-rows: 200px auto;\n    gap: 10px;\n}\n</code></pre>\n<h2 id=\"the-fr-unit-and-unequal-sizes%3A-%7B%23identifier-.h2%7D\">The fr unit and Unequal sizes: {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#the-fr-unit-and-unequal-sizes%3A-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>create three equal width tracks that grow and shrink according to the available space.</li>\n<li>give 2 parts to the first track and one part each to the next two tracks.</li>\n</ul>\n<h2 id=\"mixing-flexible-and-absolute-sizes-%7B%23identifier-.h2%7D\">Mixing flexible and absolute sizes {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#mixing-flexible-and-absolute-sizes-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>what happen when you mix absolute sized tracks with fr units. The first track is 500 pixels?</li>\n</ul>\n<h2 id=\"intrinsic-sizing-keywords-%7B%23identifier-.h2%7D\">Intrinsic sizing keywords {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#intrinsic-sizing-keywords-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>grid tracks can use **intrinsic sizing keywords:\n<ul>\n<li><code>min-content</code>: make a track as small as it can be without the track content overflowing.</li>\n<li><code>max-content</code>: has the opposite effect. The track will become as wide enough for all of the content to display in one long unbroken string. This might cause overflows as the string will not wrap.</li>\n<li><code>fit-content()</code>:  <strong>function</strong> acts like max-content at first. However, once the track reaches the size that you pass into the function, the content starts to wrap. So fit-content(10em) will create a track that is less than 10em, if the max-content size is less than 10em, but never larger than 10em.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"item-placement-%7B%23identifier-.h2%7D\">Item placement {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#item-placement-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>You can place items into a precise location on the grid using <strong>lines ,area</strong> and <strong>names</strong></li>\n</ul>\n<h2 id=\"track-listings-with-repeat()-notation-%7B%23identifier-.h2%7D\">Track listings with repeat() notation {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#track-listings-with-repeat()-notation-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>use the <code>repeat()</code> notation to create a <code>grid</code> with an initial 20px track and repeating of 6 tracks then a final 20px track?</li>\n<li>grid will consist of 10 tracks, a 1fr track, and then followed by a 2fr track. This pattern will be repeated five times.</li>\n</ul>\n<h2 id=\"implicit-and-explicit-grids-%7B%23identifier-.h2%7D\">Implicit and explicit grids {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#implicit-and-explicit-grids-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>explain the differences and how control what happen when more grid tracks are needed? <em>(hint: <code>grid-auto-rows</code>,<code>grid-auto-columns</code>)</em></li>\n</ul>\n<h2 id=\"track-sizing-and-minmax-%7B%23identifier-.h2%7D\">Track sizing and <code>minmax</code> {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#track-sizing-and-minmax-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>ensure that automatically created rows will be a minimum of 100 pixels tall, and a maximum of <code>auto</code>.</li>\n<li>what’s <code>auto</code> means? <em>(hint: respect the content size,prevent overflow)</em></li>\n</ul>\n<h2 id=\"grid-lines-%7B%23identifier-.h2%7D\">Grid Lines {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#grid-lines-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>Lines are numbered according to the writing mode of the document.</li>\n<li>how many lines in a grid with a 3 columns and 3 rows?</li>\n</ul>\n<h2 id=\"gutters-(gaps)-%7B%23identifier-.h2%7D\">Gutters (gaps) {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#gutters-(gaps)-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>create a 10px gap between columns and a 1em gap between rows.(<em>hint: target the container</em>)</li>\n<li>relation between flexible length <code>fr</code> tracks and spaces used by a gaps?</li>\n</ul>\n<hr>\n<h2 id=\"auto-fit-vs-auto-fill-%7B%23identifier-.h2%7D\">Auto-fit Vs Auto-fill {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#auto-fit-vs-auto-fill-%7B%23identifier-.h2%7D\">#</a></h2>\n<p>When using CSS grid <code>minmax()</code> function, it’s important to decide between using the <code>auto-fit</code> or <code>auto-fill</code> keywords:</p>\n<ul>\n<li>with <code>minmax()</code> function, the <code>auto-fit</code> keyword will expand the grid items to fill the available space (especially if there is only one grid item and <code>auto-fit</code> is used) . While <code>auto-fill</code> will keep the available space reserved without altering the grid items width.</li>\n</ul>\n<img src=\"https://defensivecss.dev/img/defensive-16-1.png\" alt=\"autofill_autofit\" width=\"90%\">\n<div class=\"note red bold\">Note When use a css grid fixed values such (grid-template-columns:250px 1fr;) always use a media queries else this will break on small viewport sizes.</div>\n<hr>\n<h2 id=\"minimum-content-size-in-css-grid-%7B%23identifier-.h2%7D\">Minimum Content Size In CSS grid {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#minimum-content-size-in-css-grid-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>\n<p>Similar to flexbox, CSS grid has a default minimum content size for its child items which is auto. That means, if there is an element that is larger than the grid item (<strong>for example: a long item content displayed as flex so it must be inline and the item grid will respect that due to its default size which it <code>auto</code></strong>), it will overflow and a horizontal scrolling bar will appeared.</p>\n</li>\n<li>\n<p>To fix that, we have three different solutions:</p>\n<ol>\n<li>Using <code>minmax()</code></li>\n<li>Applying <code>min-width:0</code> to the grid item</li>\n<li>Adding overflow: hidden to the grid item</li>\n</ol>\n</li>\n</ul>\n<img src=\"https://defensivecss.dev/img/defensive-15-1.png\" width=\"60%\" alt=\"not found\"  />\n<p>see details: <a href=\"https://defensivecss.dev/tip/grid-min-content-size/\">https://defensivecss.dev/tip/grid-min-content-size/</a></p>\n<hr>\n<h2 id=\"fluid-columns-snippet-%7B%23identifier-.h2%7D\">Fluid columns snippet {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#fluid-columns-snippet-%7B%23identifier-.h2%7D\">#</a></h2>\n<p>Fluid width columns that break into more or less columns as space is available, with no media queries!</p>\n<p>for example:</p>\n<pre><code class=\"language-css\">.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px\n  , 1fr));\n  /* also try 'auto-fit' instead of 'auto-fill' ?\n  /* This is better for small screens, once min() is \n  better supported */\n  /* grid-template-columns: repeat(auto-fill,\n         minmax(min(200px, 100%), 1fr)); */\n  gap: 1rem;\n}\n</code></pre>\n<blockquote>\n<p>One of the common things that break a layout is using a <strong>fixed</strong> width or height with an element that has content in different lengths. Instead, use <code>min/max-height/width</code></p>\n</blockquote>\n<h2 id=\"positioning-items-against-lines-%7B%23identifier-.h2%7D\">Positioning items against lines {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#positioning-items-against-lines-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>using following grid container:</li>\n</ul>\n<pre><code class=\"language-css\">.wrapper {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: 100px;\n}\n</code></pre>\n<p>Write a code to modify a grid layout to be like this image:\n<img src=\"../data/images/grid-example.png\" alt=\"not found\" /></p>\n<p>(also try the shorthands <code>grid-row: x/z</code>,<code>grid-column: x/z</code>)</p>\n<h2 id=\"grid-cells-%7B%23identifier-.h2%7D\">Grid Cells {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#grid-cells-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>the smallest unit on a grid (looks like a table cell) and its the intersection of a grid <code>...</code> and a grid <code>...</code></li>\n</ul>\n<h2 id=\"grid-areas-%7B%23identifier-.h2%7D\">Grid areas {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#grid-areas-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>\n<p>A grid area is the logical space used to lay out one or more grid items.</p>\n</li>\n<li>\n<p>Consists of one or more <code>...</code></p>\n</li>\n<li>\n<p>bounded by 4 <code>grid lines</code>, one for each size.</p>\n</li>\n<li>\n<p>can be named explicitly using the <code>grid-template-areas</code> of the <strong><code>grid container</code></strong></p>\n</li>\n<li>\n<p>can be referenced implicitly by its bounding grid lines.</p>\n</li>\n<li>\n<p>a grid item is assigned to a grid area using the <code>grid-placement-properties(grid-column-start/end,grid-row-start/end)</code> or <code>grid-row,grid-column</code> shorthands.</p>\n</li>\n<li>\n<p>The <code>grid-area</code> CSS shorthand property specifies a grid item’s size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.</p>\n</li>\n<li>\n<p>practice: <a href=\"https://codepen.io/farisubuntu/pen/poxBGvQ\">https://codepen.io/farisubuntu/pen/poxBGvQ</a></p>\n</li>\n</ul>\n<p>the final layout:\n<img src=\"../data/images/grid-areas.png\" alt=\"not found\" title=\"grid areas\"></p>\n<ul>\n<li>\n<p>We can create gaps (or hard “stops”) between cells using a dot <code>.</code> which means ‘empty cell’</p>\n</li>\n<li>\n<p>Rows must have the same number of columns</p>\n</li>\n<li>\n<p>practice: click <a href=\"https://drafts.csswg.org/css-grid/#adapting-to-available-space\" _blank alt=\"error\">https://drafts.csswg.org/css-grid/#adapting-to-available-space</a></p>\n</li>\n<li>\n<p>practice: Source-Order Independence (named area and <code>@media</code>) =&gt; see: <a href=\"https://drafts.csswg.org/css-grid/#source-independence\">https://drafts.csswg.org/css-grid/#source-independence</a> for solution.</p>\n</li>\n</ul>\n<pre><code class=\"language-css\">@media(orientation:portrait){...}\n@media(orientation:landscape){...}\n</code></pre>\n<p>goal:</p>\n<figure>\n<figcaption>An arrangement suitable for “portrait” orientation.</figcaption>\n<img src=\"https://drafts.csswg.org/css-grid/images/game-portrait.png\" alt=\"not found\" />\n</figure>\n<figure><figcaption>An arrangement suitable for “landscape“ orientation.</figcaption><img src=\"https://drafts.csswg.org/css-grid/images/game-landscape.png\" alt=\"not found\" />\n</figure>\n<blockquote>\n<p>tips: <code>grid-template-area</code>, each string “… …” represents a <code>row</code> and each word inside the string is a column. number of rows equal to number of values given to <code>grid-template-rows</code> and the same for columns.</p>\n</blockquote>\n<ul>\n<li>\n<p>practice: use <code>grid-row:x/y</code> and <code>grid-column:x/y</code> to implement grid using grid lines:\n(<a href=\"https://codepen.io/farisubuntu/pen/WNaWPOY\">https://codepen.io/farisubuntu/pen/WNaWPOY</a>)</p>\n</li>\n<li>\n<p>the final layout:\n(<a href=\"https://mdn.github.io/learning-area/css/css-layout/grids/8-placement-starting-point.html\">https://mdn.github.io/learning-area/css/css-layout/grids/8-placement-starting-point.html</a>)</p>\n</li>\n</ul>\n<h2 id=\"image-maximum-width-%7B%23identifier-.h2%7D\">Image maximum width {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#image-maximum-width-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>Don’t forget to set <code>max-width: 100%</code> to all images. This can be added to the CSS reset that you use:</li>\n</ul>\n<pre><code class=\"language-css\">img {\n    max-width: 100%;\n    object-fit: cover;\n}\n</code></pre>\n<h2 id=\"position-sticky-with-css-grid-%7B%23identifier-.h2%7D\">Position sticky with CSS Grid {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#position-sticky-with-css-grid-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>The default behavior for grid items is to <code>stretch</code>. As a result, the aside element in the example below is equal to the main section height.</li>\n</ul>\n<img src=\"https://defensivecss.dev/img/defensive-17-1.jpg\" width=\"60%\" alt=\"not found\" />\n<p>to resolve this so it will looks like:</p>\n<img src=\"https://defensivecss.dev/img/defensive-17-2.jpg\" width=\"60%\" alt=\"not found\" />\n<p>you need to reset <code>align-self</code> property:</p>\n<pre><code class=\"language-css\">aside {\n    align-self: start;\n    position: sticky;\n    top: 1rem;\n}\n</code></pre>\n<p>see this example:\n<a href=\"https://codesandbox.io/s/position-sticky-with-css-grid-cqrjzw?file=/index.html\">https://codesandbox.io/s/position-sticky-with-css-grid-cqrjzw?file=/index.html</a></p>\n<p>more about this topics:\n<a href=\"https://ishadeed.com/article/position-sticky-css-grid/\">https://ishadeed.com/article/position-sticky-css-grid/</a></p>\n<hr>\n<ul>\n<li>use <code>auto-fit</code> and <code>minmax(min,max)</code> with repeat to make a grid wrapped, for example:</li>\n</ul>\n<pre><code class=\"language-css\">grid-template-columns: \n      repeat(auto-fit, minmax(200px, 1fr));\n</code></pre>\n<blockquote>\n<p>Sometimes it’s helpful to be able to ask grid to create as many columns as will fit into the container (<strong>make a grid responsive</strong>), then use <code>auto-fill</code> and <code>minmax()</code> together:</p>\n</blockquote>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, \n                          minmax(200px, 1fr));\n  grid-auto-rows: minmax(100px, auto);\n  gap: 20px;\n}\n</code></pre>\n<h5 id=\"notes%3A\">notes: <a class=\"heading-anchor-permalink\" href=\"#notes%3A\">#</a></h5>\n<ul>\n<li><code>justify-items</code> (row-axis) the opposed to <code>align-items</code>(column-axis)</li>\n<li></li>\n</ul>\n<h2 id=\"nested-grid-and-subgrid-%7B%23identifier-.h2%7D\">Nested grid and subgrid {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#nested-grid-and-subgrid-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>The difference?</li>\n</ul>\n<h2 id=\"controlling-the-order-%7B%23identifier-.h2%7D\">Controlling the order {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#controlling-the-order-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li><em>Complete</em>: We can control the order in which items stack up by using the <code>...</code> property?</li>\n</ul>\n<hr>\n<h1 id=\"relationship-of-grid-layout-to-other-layout-methods-%7B%23identifier-.h1%7D\">Relationship of grid layout to other layout methods {#identifier .h1} <a class=\"heading-anchor-permalink\" href=\"#relationship-of-grid-layout-to-other-layout-methods-%7B%23identifier-.h1%7D\">#</a></h1>\n<p>source:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout\">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout</a></p>\n<h2 id=\"grid-and-flexbox-%7B%23identifier-.h2%7D\">Grid and flexbox {#identifier .h2} <a class=\"heading-anchor-permalink\" href=\"#grid-and-flexbox-%7B%23identifier-.h2%7D\">#</a></h2>\n<ul>\n<li>The basic difference?</li>\n<li>when you wrap flex items, each new row (or column when working by column) is an independent flex line in the flex container. <strong>Space distribution happens across the flex line.</strong></li>\n<li></li>\n</ul>\n",
      "id": 5
    },
    {
      "path": "CSS/notes_grid_or_flexbox.md",
      "url": "CSS/notes_grid_or_flexbox.html",
      "content": "- for learning purposes you can replace all `block-level` elements with `<div>` so you can avoid thinking about **semantic** `html` elements and **css inheritance** and default/initial styles.\n- think of page elements as **block-box** or **inline-box**; say push it right? push it down? and so on.\n- use `padding`, `width` as initial then modify styles as required.\n- for every `flex item` decide how it will share the additional space with its sibling and when it must wrap and take examples below as a guide:\n     - `flex: initial` = `flex: 0 1 auto`; don't grow - can shrink smaller than their `flex-basis` - items have the base size of `auto`.\n     - `flex: auto` = `flex: 1 1 auto`; items can grow larger than the `flex-basis` - can shrink ... - have the base size of `auto` (the space that is shared between the items is shared out after each item is laid out as max-content size.).\n     - `flex:1` = `flex: 1 1 0`; can grow - can shrink - have 0 size so they all grow equally and the space is shared equally.\n\n> <div style=\"color:red\"><b>Browser Developer Tool is the best friend to learn/debug/understand css layout and others front-end technologies.</b></div>\n\n---\n\n### How To Decide Which To Use, Grid layout or Flex layout\n\nsource: https://ishadeed.com/article/grid-layout-flexbox-components/\n\n- How the component(container) child items are displayed? Inline or as columns and rows? __if inline then use `flex layout` else `grid layout`__\n- How the component is expected to work on various screen sizes?\n\n## Use Cases And Examples:\n\n#### Examples for using Grid layout\n\n###### Main And Sidebar\n```html\n<div class=\"wrapper\">\n  <aside>Sidebar</aside>\n  <main>Main</main>\n</div>\n```\n```css\n@media (min-width: 800px) {\n  .wrapper {\n    display: grid;\n    grid-template-columns: 200px 1fr;\n    grid-gap: 16px;\n  }\n  /* If align-self weren’t used for the <aside> element, \n  the height of it will be as equal to the main element, \n  no matter the content length. */\n  aside {\n    align-self: start;\n  }\n}\n```\nhttps://codesandbox.io/s/vigorous-ride-dbtx9u?file=/index.css\n\n\n\n<h6> Cards Grid </h6>\n\n<img src=\"https://ishadeed.com/assets/grid-flex/grid-use-2.png\" width=\"65%\" alt=\"not found\">\n\nhere how to implement the layout:\n```css\n.wrapper {\n  display: grid;\n  /* The column width will be at least 200px, and if \n  space is not enough, it will wrap cards into a new line. \n  note that this code can cause horizontal scrolling if\n   the viewport width is less than 200px. \n   Use '@media' to add the grid definition \n   only when the viewport width is enough.*/\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 16px;\n}\n```\n<h6>Section Layout</h6>\n\n<img src=\"https://ishadeed.com/assets/grid-flex/grid-use-3.png\" width=\"50%\" alt=\"not found\" />\n\nIn the design above, we can use grid twice, the first use is to divide the area into two areas (the contact us sidebar, the form), and the second use is to the form grid itself.\n\ntry to implement grid using this link: (https://codesandbox.io/s/festive-smoke-de6k9x?file=/index.css) and for applying grid layout on html forms see: (https://webdesign.tutsplus.com/tutorials/how-to-build-web-form-layouts-with-css-grid--cms-28776)\n\n#### Examples of Flexbox layout\n\n<h6>Website Navigation</h6>\n- For 90% of the time. The most common pattern is having the logo on the left, and the navigation on the right.\n\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-1.png\" width=\"80%\" alt=\"not found\">\n\n```css\n.site-header {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n```\n- The same concept can work on the following design as well:\n\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-1.png\" width=\"80%\" alt=\"not found\">\n\n<h6>Actions List</h6>\n\n- An example of an action list is something that we can borrow from Facebook or Twitter:\n\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-3.png\" width=\"80%\" alt=\"not found\">\n\n```css\n.actions-list {\n  display: flex;\n}\n.actions-list__item {\n  flex: 1; /* expand the items to take the available space equally between them */\n}\n```\nAnother example:\n\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-4.png\" width=\"80%\" alt=\"not found\">\n\nBoth of the modal header and footer have child elements that are displayed inline. As you see, the spacing between them is done as below:\n\nfor model header:\n```css\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n}\n```\nfor the footer:\n```css\n.cancel__action {\n  margin-left: auto;\n}\n```\n\n###### Form Elements\nA combination of an input field with a button next to it is a perfect use-case for Flexbox\n\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-5.png\" width=\"80%\" alt=\"not found\">\n\n```css\n.input {\n/* Notice how without using flex: 1 1 auto on the text field,\n it won’t expand and fill the remaining space. */\n  flex: 1 1 auto;\n}\n```\n###### Card Components\n\nMany Variations:\n\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-8.png\" width=\"80%\" alt=\"not found\">\n\n```css\n.card {\n  display: flex;\n  flex-direction: column;\n}\n\n@media (min-width: 800px) {\n  .card {\n    flex-direction: row;\n  }\n}\n```\nAnother common variation\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-9.png\" width=\"60%\" />\n\nNotice how the icon and text label is centered horizontally and vertically.\n```css\n.card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n```\n##### Tabs / Bottom Menus\n\nWhen it comes to elements that take the full width of screen and have items that should fill all the available space, then flexbox is the perfect tool here. Each item should fill the available space, and they should be equal in width.\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-10.png\" width=\"60%\" />\n\n```css\n.tabs__item {\n  flex-grow: 1;\n}\n```\n###### Centering A Section’s Content\nLet’s consider that we have a hero section, and the content needs to be centered horizontally and vertically.\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-12.png\" width=\"60%\" />\n\n```css\n.hero {\n/* using 'text-align': */\n  /* text-align: center; */\n\n/* using flexbox layout: */\n  display: flex;\n  flex-direction: column;\n  align-items: center; /* centers items horizontally */\n  justify-content: center; /* centers items vertically */\n  text-align: center;\n}\n\n```\n\n#### Combining CSS Grid And Flexbox\n\nWhen I think about combining them, the first use-case I got is a list of cards. Grid is used to lay out the cards, and flexbox is used for the card component itself.\n<img src=\"https://ishadeed.com/assets/grid-flex/grid-and-flex.png\" width=\"60%\" />\n\n- Here are the requirements for the layout:\n\n    - The height of the cards for each row should be equal\n    - The read more link should be positioned at the end of the card, no matter its height.\n    - The grid should use `minmax()` function\n\n```html\n<div class=\"wrapper\">\n  <article class=\"card\">\n    <img src=\"sunrise.jpg\" alt=\"\" />\n    <div class=\"card__content\">\n      <h2><!-- Title --></h2>\n      <p><!-- Desc --></p>\n      <p class=\"card_link\"><a href=\"#\">Read more</a></p>\n    </div>\n  </article>\n</div>\n```\n```css\n@media (min-width: 500px) {\n  .wrapper {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 16px;\n  }\n}\n\n.card {\n  display: flex; /* [1] */\n  flex-direction: column; /* [2] */\n}\n\n.card__content {\n  flex-grow: 1; /* [3] */\n  display: flex; /* [4] */\n  flex-direction: column;\n}\n\n.card__link {\n  margin-top: auto; /* [5] */\n}\n```",
      "html": "<ul>\n<li>for learning purposes you can replace all <code>block-level</code> elements with <code>&lt;div&gt;</code> so you can avoid thinking about <strong>semantic</strong> <code>html</code> elements and <strong>css inheritance</strong> and default/initial styles.</li>\n<li>think of page elements as <strong>block-box</strong> or <strong>inline-box</strong>; say push it right? push it down? and so on.</li>\n<li>use <code>padding</code>, <code>width</code> as initial then modify styles as required.</li>\n<li>for every <code>flex item</code> decide how it will share the additional space with its sibling and when it must wrap and take examples below as a guide:\n<ul>\n<li><code>flex: initial</code> = <code>flex: 0 1 auto</code>; don’t grow - can shrink smaller than their <code>flex-basis</code> - items have the base size of <code>auto</code>.</li>\n<li><code>flex: auto</code> = <code>flex: 1 1 auto</code>; items can grow larger than the <code>flex-basis</code> - can shrink … - have the base size of <code>auto</code> (the space that is shared between the items is shared out after each item is laid out as max-content size.).</li>\n<li><code>flex:1</code> = <code>flex: 1 1 0</code>; can grow - can shrink - have 0 size so they all grow equally and the space is shared equally.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<div style=\"color:red\"><b>Browser Developer Tool is the best friend to learn/debug/understand css layout and others front-end technologies.</b></div>\n</blockquote>\n<hr>\n<h3 id=\"how-to-decide-which-to-use%2C-grid-layout-or-flex-layout\">How To Decide Which To Use, Grid layout or Flex layout <a class=\"heading-anchor-permalink\" href=\"#how-to-decide-which-to-use%2C-grid-layout-or-flex-layout\">#</a></h3>\n<p>source: <a href=\"https://ishadeed.com/article/grid-layout-flexbox-components/\">https://ishadeed.com/article/grid-layout-flexbox-components/</a></p>\n<ul>\n<li>How the component(container) child items are displayed? Inline or as columns and rows? <strong>if inline then use <code>flex layout</code> else <code>grid layout</code></strong></li>\n<li>How the component is expected to work on various screen sizes?</li>\n</ul>\n<h2 id=\"use-cases-and-examples%3A\">Use Cases And Examples: <a class=\"heading-anchor-permalink\" href=\"#use-cases-and-examples%3A\">#</a></h2>\n<h4 id=\"examples-for-using-grid-layout\">Examples for using Grid layout <a class=\"heading-anchor-permalink\" href=\"#examples-for-using-grid-layout\">#</a></h4>\n<h6 id=\"main-and-sidebar\">Main And Sidebar <a class=\"heading-anchor-permalink\" href=\"#main-and-sidebar\">#</a></h6>\n<pre><code class=\"language-html\">&lt;div class=&quot;wrapper&quot;&gt;\n  &lt;aside&gt;Sidebar&lt;/aside&gt;\n  &lt;main&gt;Main&lt;/main&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .wrapper {\n    display: grid;\n    grid-template-columns: 200px 1fr;\n    grid-gap: 16px;\n  }\n  /* If align-self weren’t used for the &lt;aside&gt; element, \n  the height of it will be as equal to the main element, \n  no matter the content length. */\n  aside {\n    align-self: start;\n  }\n}\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/vigorous-ride-dbtx9u?file=/index.css\">https://codesandbox.io/s/vigorous-ride-dbtx9u?file=/index.css</a></p>\n<h6> Cards Grid </h6>\n<img src=\"https://ishadeed.com/assets/grid-flex/grid-use-2.png\" width=\"65%\" alt=\"not found\">\n<p>here how to implement the layout:</p>\n<pre><code class=\"language-css\">.wrapper {\n  display: grid;\n  /* The column width will be at least 200px, and if \n  space is not enough, it will wrap cards into a new line. \n  note that this code can cause horizontal scrolling if\n   the viewport width is less than 200px. \n   Use '@media' to add the grid definition \n   only when the viewport width is enough.*/\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 16px;\n}\n</code></pre>\n<h6>Section Layout</h6>\n<img src=\"https://ishadeed.com/assets/grid-flex/grid-use-3.png\" width=\"50%\" alt=\"not found\" />\n<p>In the design above, we can use grid twice, the first use is to divide the area into two areas (the contact us sidebar, the form), and the second use is to the form grid itself.</p>\n<p>try to implement grid using this link: (<a href=\"https://codesandbox.io/s/festive-smoke-de6k9x?file=/index.css\">https://codesandbox.io/s/festive-smoke-de6k9x?file=/index.css</a>) and for applying grid layout on html forms see: (<a href=\"https://webdesign.tutsplus.com/tutorials/how-to-build-web-form-layouts-with-css-grid--cms-28776\">https://webdesign.tutsplus.com/tutorials/how-to-build-web-form-layouts-with-css-grid--cms-28776</a>)</p>\n<h4 id=\"examples-of-flexbox-layout\">Examples of Flexbox layout <a class=\"heading-anchor-permalink\" href=\"#examples-of-flexbox-layout\">#</a></h4>\n<h6>Website Navigation</h6>\n- For 90% of the time. The most common pattern is having the logo on the left, and the navigation on the right.\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-1.png\" width=\"80%\" alt=\"not found\">\n<pre><code class=\"language-css\">.site-header {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n</code></pre>\n<ul>\n<li>The same concept can work on the following design as well:</li>\n</ul>\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-1.png\" width=\"80%\" alt=\"not found\">\n<h6>Actions List</h6>\n<ul>\n<li>An example of an action list is something that we can borrow from Facebook or Twitter:</li>\n</ul>\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-3.png\" width=\"80%\" alt=\"not found\">\n<pre><code class=\"language-css\">.actions-list {\n  display: flex;\n}\n.actions-list__item {\n  flex: 1; /* expand the items to take the available space equally between them */\n}\n</code></pre>\n<p>Another example:</p>\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-4.png\" width=\"80%\" alt=\"not found\">\n<p>Both of the modal header and footer have child elements that are displayed inline. As you see, the spacing between them is done as below:</p>\n<p>for model header:</p>\n<pre><code class=\"language-css\">.modal-header {\n  display: flex;\n  justify-content: space-between;\n}\n</code></pre>\n<p>for the footer:</p>\n<pre><code class=\"language-css\">.cancel__action {\n  margin-left: auto;\n}\n</code></pre>\n<h6 id=\"form-elements\">Form Elements <a class=\"heading-anchor-permalink\" href=\"#form-elements\">#</a></h6>\n<p>A combination of an input field with a button next to it is a perfect use-case for Flexbox</p>\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-5.png\" width=\"80%\" alt=\"not found\">\n<pre><code class=\"language-css\">.input {\n/* Notice how without using flex: 1 1 auto on the text field,\n it won’t expand and fill the remaining space. */\n  flex: 1 1 auto;\n}\n</code></pre>\n<h6 id=\"card-components\">Card Components <a class=\"heading-anchor-permalink\" href=\"#card-components\">#</a></h6>\n<p>Many Variations:</p>\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-8.png\" width=\"80%\" alt=\"not found\">\n<pre><code class=\"language-css\">.card {\n  display: flex;\n  flex-direction: column;\n}\n\n@media (min-width: 800px) {\n  .card {\n    flex-direction: row;\n  }\n}\n</code></pre>\n<p>Another common variation\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-9.png\" width=\"60%\" /></p>\n<p>Notice how the icon and text label is centered horizontally and vertically.</p>\n<pre><code class=\"language-css\">.card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n</code></pre>\n<h5 id=\"tabs-%2F-bottom-menus\">Tabs / Bottom Menus <a class=\"heading-anchor-permalink\" href=\"#tabs-%2F-bottom-menus\">#</a></h5>\n<p>When it comes to elements that take the full width of screen and have items that should fill all the available space, then flexbox is the perfect tool here. Each item should fill the available space, and they should be equal in width.\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-10.png\" width=\"60%\" /></p>\n<pre><code class=\"language-css\">.tabs__item {\n  flex-grow: 1;\n}\n</code></pre>\n<h6 id=\"centering-a-section%E2%80%99s-content\">Centering A Section’s Content <a class=\"heading-anchor-permalink\" href=\"#centering-a-section%E2%80%99s-content\">#</a></h6>\n<p>Let’s consider that we have a hero section, and the content needs to be centered horizontally and vertically.\n<img src=\"https://ishadeed.com/assets/grid-flex/flexbox-use-12.png\" width=\"60%\" /></p>\n<pre><code class=\"language-css\">.hero {\n/* using 'text-align': */\n  /* text-align: center; */\n\n/* using flexbox layout: */\n  display: flex;\n  flex-direction: column;\n  align-items: center; /* centers items horizontally */\n  justify-content: center; /* centers items vertically */\n  text-align: center;\n}\n\n</code></pre>\n<h4 id=\"combining-css-grid-and-flexbox\">Combining CSS Grid And Flexbox <a class=\"heading-anchor-permalink\" href=\"#combining-css-grid-and-flexbox\">#</a></h4>\n<p>When I think about combining them, the first use-case I got is a list of cards. Grid is used to lay out the cards, and flexbox is used for the card component itself.\n<img src=\"https://ishadeed.com/assets/grid-flex/grid-and-flex.png\" width=\"60%\" /></p>\n<ul>\n<li>\n<p>Here are the requirements for the layout:</p>\n<ul>\n<li>The height of the cards for each row should be equal</li>\n<li>The read more link should be positioned at the end of the card, no matter its height.</li>\n<li>The grid should use <code>minmax()</code> function</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;div class=&quot;wrapper&quot;&gt;\n  &lt;article class=&quot;card&quot;&gt;\n    &lt;img src=&quot;sunrise.jpg&quot; alt=&quot;&quot; /&gt;\n    &lt;div class=&quot;card__content&quot;&gt;\n      &lt;h2&gt;&lt;!-- Title --&gt;&lt;/h2&gt;\n      &lt;p&gt;&lt;!-- Desc --&gt;&lt;/p&gt;\n      &lt;p class=&quot;card_link&quot;&gt;&lt;a href=&quot;#&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/article&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">@media (min-width: 500px) {\n  .wrapper {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 16px;\n  }\n}\n\n.card {\n  display: flex; /* [1] */\n  flex-direction: column; /* [2] */\n}\n\n.card__content {\n  flex-grow: 1; /* [3] */\n  display: flex; /* [4] */\n  flex-direction: column;\n}\n\n.card__link {\n  margin-top: auto; /* [5] */\n}\n</code></pre>\n",
      "id": 6
    },
    {
      "path": "CSS/rwd-snippets.md",
      "url": "CSS/rwd-snippets.html",
      "content": "# RWD notes:\n\n## Convert a Menu to a Dropdown for Small Screens\n\n```html\n<nav>\n <ul>\n  <li><a href=\"/\" class=\"active\">Home</a></li>\n  <li><a href=\"/collections/all\">Books</a></li>\n  <li><a href=\"/blogs/five-simple-steps-blog\">Blog</a></li>\n  <li><a href=\"/pages/about-us\">About Us</a></li>\n  <li><a href=\"/pages/support\">Support</a></li>\n </ul>\n\n <select>\n  <option value=\"\" selected=\"selected\">Select</option>\n\n  <option value=\"/\">Home</option>\n  <option value=\"/collections/all\">Books</option>\n  <option value=\"/blogs/five-simple-steps-blog\">Blog</option>\n  <option value=\"/pages/about-us\">About Us</option>\n  <option value=\"/pages/support\">Support</option>\n </select>\n</nav>\n```\n``` css\nnav select {\n  display: none;\n}\n\n/* Now use media query, for example: */\n@media (max-width: 960px) {\n  nav ul     { display: none; }\n  nav select { display: inline-block; }\n}\n\n```\n\n---\n\n## Fluid layout\n\n- The font size:\n```css\n/*  The font size will change\n   as per the viewport width. */\np,\na,\nh1 {\n font-size: clamp(1rem, 0.5rem + 2.5vw, 3rem);\n}\n```\n\n- Dynamic Gap: \n\n```css\n/* With the gap property, we can\n   create a dynamic spacing that changes based\n   on the viewport or container size.*/\n.wrapper {\n display: grid;\n grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n gap: clamp(1rem, 2vw, 24px);\n}\n```\n\n- vertical padding:\n\n```css\n/* We might need to change the vertical padding\n based on the viewport size. CSS 'clamp()'\n with viewport units is perfect for that. */\n.hero {\n padding: clamp(2rem, 10vmax, 10rem) 1rem;\n}\n```\n\n![vertical padding using clamp()](https://ishadeed.com/assets/responsive-design/use-case-padding.jpg)\n\n-  A font size on large screens:\n\n```css\n/* We needed a way to add a limit otherwise a font \nsize can blow up to be huge on large screens:*/\nh2 {\n font-size: calc(1rem + 5vw);\n}\n\n/* If the viewport width is 2000px or more, limit\n* the font size to 4rem.\n*/\n@media (min-width: 2000px) {\n font-size: 4rem;\n}\n\n/* Instead of above code, you can use 'clamp()'  */\nh2 {\n font-size: clamp(1rem, 0.5rem + 2.5vw, 3rem);\n}\n```\n\n- Logical Properties When working on multilingual websites, we need to support both left-to-right (LTR) and right-to-left (RTL) layouts. (for complete article about multi-language web site styles: https://rtlstyling.com/posts/rtl-styling)\n\n![not found](https://ishadeed.com/assets/responsive-design/logical-properties.jpeg)\n\n```css\n/* With CSS logical properties, we can write the CSS once, \nand it will be responsive to the user’s preferred language. */\nx\n.card {\n  padding-inline-start: 2.5rem;\n  padding-inline-end: 1rem;\n  border-inline-start: 6px solid blue;\n}\n\n.card__icon {\n  margin-inline-end: 1rem;\n}\n```\n\n---\n\n## Size Container Queries\n\n- It provides us with ways to query the container width of a component.\n- Container queries are an alternative to media queries, which apply styles to elements based on viewport size or other device characteristics.\n\n![container queries](https://ishadeed.com/assets/responsive-design/media-query-vs-size-container-query.jpeg)\n\n- for info, see:[mdn CSS container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries)\n\n- To use container queries:\n\n  - Declare a containment context on an element by `container-type` property with a value of `size, inline-size`, or `normal`.\n\n    - `size`: The query will be based on the inline and block dimensions of the container. Applies layout, style, and size containment to the container.\n\n    - `inline-size`: The query will be based on the inline dimensions of the container. Applies layout, style, and inline-size containment to the element.\n    - `normal`: The element is not a query container for any container size queries, but remains a query container for container style queries.\n\nExample:\n\n```css\n/* The following example creates a containment\n context with the name sidebar: */\n\n.post {\n /* Define a container type */\n container-type: inline-size;\n /* set a container name */\n container-name: sidebar;\n /* shorthand: {container: sidebar / inline-size;} */\n}\n\n/* You can then target this containment context using\n the @container at-rule: */\n@container sidebar (min-width: 700px) {\n .card {\n  font-size: 2em;\n }\n}\n```\n\n- The container query length units are:\n\n  - `cqw`: 1% of a query container's **width**\n  - `cqh`: 1% of a query container's **height**\n  - `cqi`: 1% of a query container's **inline size**\n  - `cqb`: 1% of a query container's **block size**\n  - `cqmin`: The smaller value of either **cqi** or **cqb**\n  - `cqmax`: The larger value of either **cqi** or **cqb**\n\n- The following example uses the cqi unit to set the font size of a heading based on the inline size of the container:\n\n```css\n@container (min-width: 700px) {\n .card h2 {\n  font-size: max(1.5em, 1.23em + 2cqi);\n }\n}\n```\n\n---\n\n## Example for plan a layout using modern css technologies:\n\n![Page Layout](https://ishadeed.com/assets/responsive-design/rwd-design-1-3.png)\n\n### Using Modern CSS\n\n- The typography is responsive to the viewport width via `clamp()` function.\n- The spacing is responsive to the viewport width via `clamp()` function.\n- The hero section is responsive to its content via flexbox wrapping.\n- The cards grid is responsive to the available space with `minmax()`, no media queries.\n- The card component is responsive to its wrapper via size container queries and style container queries.\n- The margins and paddings are responsive to the websites language via logical properties.\n\n### Using Media Queries\n\n- The site navigation is responsive to the viewport width.\n- The theming is responsive to the user preferences in their operating system.\n- The card hover effect is responsive to what the user is using (touch vs mouse).\n- In the above list, the theming and navigation are done via media queries. The rest is about modern CSS features like clamp() comparison function and container queries.\n",
      "html": "<h1 id=\"rwd-notes%3A\">RWD notes: <a class=\"heading-anchor-permalink\" href=\"#rwd-notes%3A\">#</a></h1>\n<h2 id=\"convert-a-menu-to-a-dropdown-for-small-screens\">Convert a Menu to a Dropdown for Small Screens <a class=\"heading-anchor-permalink\" href=\"#convert-a-menu-to-a-dropdown-for-small-screens\">#</a></h2>\n<pre><code class=\"language-html\">&lt;nav&gt;\n &lt;ul&gt;\n  &lt;li&gt;&lt;a href=&quot;/&quot; class=&quot;active&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;/collections/all&quot;&gt;Books&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;/blogs/five-simple-steps-blog&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;/pages/about-us&quot;&gt;About Us&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;/pages/support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt;\n &lt;/ul&gt;\n\n &lt;select&gt;\n  &lt;option value=&quot;&quot; selected=&quot;selected&quot;&gt;Select&lt;/option&gt;\n\n  &lt;option value=&quot;/&quot;&gt;Home&lt;/option&gt;\n  &lt;option value=&quot;/collections/all&quot;&gt;Books&lt;/option&gt;\n  &lt;option value=&quot;/blogs/five-simple-steps-blog&quot;&gt;Blog&lt;/option&gt;\n  &lt;option value=&quot;/pages/about-us&quot;&gt;About Us&lt;/option&gt;\n  &lt;option value=&quot;/pages/support&quot;&gt;Support&lt;/option&gt;\n &lt;/select&gt;\n&lt;/nav&gt;\n</code></pre>\n<pre><code class=\"language-css\">nav select {\n  display: none;\n}\n\n/* Now use media query, for example: */\n@media (max-width: 960px) {\n  nav ul     { display: none; }\n  nav select { display: inline-block; }\n}\n\n</code></pre>\n<hr>\n<h2 id=\"fluid-layout\">Fluid layout <a class=\"heading-anchor-permalink\" href=\"#fluid-layout\">#</a></h2>\n<ul>\n<li>The font size:</li>\n</ul>\n<pre><code class=\"language-css\">/*  The font size will change\n   as per the viewport width. */\np,\na,\nh1 {\n font-size: clamp(1rem, 0.5rem + 2.5vw, 3rem);\n}\n</code></pre>\n<ul>\n<li>Dynamic Gap:</li>\n</ul>\n<pre><code class=\"language-css\">/* With the gap property, we can\n   create a dynamic spacing that changes based\n   on the viewport or container size.*/\n.wrapper {\n display: grid;\n grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n gap: clamp(1rem, 2vw, 24px);\n}\n</code></pre>\n<ul>\n<li>vertical padding:</li>\n</ul>\n<pre><code class=\"language-css\">/* We might need to change the vertical padding\n based on the viewport size. CSS 'clamp()'\n with viewport units is perfect for that. */\n.hero {\n padding: clamp(2rem, 10vmax, 10rem) 1rem;\n}\n</code></pre>\n<p><img src=\"https://ishadeed.com/assets/responsive-design/use-case-padding.jpg\" alt=\"vertical padding using clamp()\"></p>\n<ul>\n<li>A font size on large screens:</li>\n</ul>\n<pre><code class=\"language-css\">/* We needed a way to add a limit otherwise a font \nsize can blow up to be huge on large screens:*/\nh2 {\n font-size: calc(1rem + 5vw);\n}\n\n/* If the viewport width is 2000px or more, limit\n* the font size to 4rem.\n*/\n@media (min-width: 2000px) {\n font-size: 4rem;\n}\n\n/* Instead of above code, you can use 'clamp()'  */\nh2 {\n font-size: clamp(1rem, 0.5rem + 2.5vw, 3rem);\n}\n</code></pre>\n<ul>\n<li>Logical Properties When working on multilingual websites, we need to support both left-to-right (LTR) and right-to-left (RTL) layouts. (for complete article about multi-language web site styles: <a href=\"https://rtlstyling.com/posts/rtl-styling\">https://rtlstyling.com/posts/rtl-styling</a>)</li>\n</ul>\n<p><img src=\"https://ishadeed.com/assets/responsive-design/logical-properties.jpeg\" alt=\"not found\"></p>\n<pre><code class=\"language-css\">/* With CSS logical properties, we can write the CSS once, \nand it will be responsive to the user’s preferred language. */\nx\n.card {\n  padding-inline-start: 2.5rem;\n  padding-inline-end: 1rem;\n  border-inline-start: 6px solid blue;\n}\n\n.card__icon {\n  margin-inline-end: 1rem;\n}\n</code></pre>\n<hr>\n<h2 id=\"size-container-queries\">Size Container Queries <a class=\"heading-anchor-permalink\" href=\"#size-container-queries\">#</a></h2>\n<ul>\n<li>It provides us with ways to query the container width of a component.</li>\n<li>Container queries are an alternative to media queries, which apply styles to elements based on viewport size or other device characteristics.</li>\n</ul>\n<p><img src=\"https://ishadeed.com/assets/responsive-design/media-query-vs-size-container-query.jpeg\" alt=\"container queries\"></p>\n<ul>\n<li>\n<p>for info, see:<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries\">mdn CSS container queries</a></p>\n</li>\n<li>\n<p>To use container queries:</p>\n<ul>\n<li>\n<p>Declare a containment context on an element by <code>container-type</code> property with a value of <code>size, inline-size</code>, or <code>normal</code>.</p>\n<ul>\n<li>\n<p><code>size</code>: The query will be based on the inline and block dimensions of the container. Applies layout, style, and size containment to the container.</p>\n</li>\n<li>\n<p><code>inline-size</code>: The query will be based on the inline dimensions of the container. Applies layout, style, and inline-size containment to the element.</p>\n</li>\n<li>\n<p><code>normal</code>: The element is not a query container for any container size queries, but remains a query container for container style queries.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-css\">/* The following example creates a containment\n context with the name sidebar: */\n\n.post {\n /* Define a container type */\n container-type: inline-size;\n /* set a container name */\n container-name: sidebar;\n /* shorthand: {container: sidebar / inline-size;} */\n}\n\n/* You can then target this containment context using\n the @container at-rule: */\n@container sidebar (min-width: 700px) {\n .card {\n  font-size: 2em;\n }\n}\n</code></pre>\n<ul>\n<li>\n<p>The container query length units are:</p>\n<ul>\n<li><code>cqw</code>: 1% of a query container’s <strong>width</strong></li>\n<li><code>cqh</code>: 1% of a query container’s <strong>height</strong></li>\n<li><code>cqi</code>: 1% of a query container’s <strong>inline size</strong></li>\n<li><code>cqb</code>: 1% of a query container’s <strong>block size</strong></li>\n<li><code>cqmin</code>: The smaller value of either <strong>cqi</strong> or <strong>cqb</strong></li>\n<li><code>cqmax</code>: The larger value of either <strong>cqi</strong> or <strong>cqb</strong></li>\n</ul>\n</li>\n<li>\n<p>The following example uses the cqi unit to set the font size of a heading based on the inline size of the container:</p>\n</li>\n</ul>\n<pre><code class=\"language-css\">@container (min-width: 700px) {\n .card h2 {\n  font-size: max(1.5em, 1.23em + 2cqi);\n }\n}\n</code></pre>\n<hr>\n<h2 id=\"example-for-plan-a-layout-using-modern-css-technologies%3A\">Example for plan a layout using modern css technologies: <a class=\"heading-anchor-permalink\" href=\"#example-for-plan-a-layout-using-modern-css-technologies%3A\">#</a></h2>\n<p><img src=\"https://ishadeed.com/assets/responsive-design/rwd-design-1-3.png\" alt=\"Page Layout\"></p>\n<h3 id=\"using-modern-css\">Using Modern CSS <a class=\"heading-anchor-permalink\" href=\"#using-modern-css\">#</a></h3>\n<ul>\n<li>The typography is responsive to the viewport width via <code>clamp()</code> function.</li>\n<li>The spacing is responsive to the viewport width via <code>clamp()</code> function.</li>\n<li>The hero section is responsive to its content via flexbox wrapping.</li>\n<li>The cards grid is responsive to the available space with <code>minmax()</code>, no media queries.</li>\n<li>The card component is responsive to its wrapper via size container queries and style container queries.</li>\n<li>The margins and paddings are responsive to the websites language via logical properties.</li>\n</ul>\n<h3 id=\"using-media-queries\">Using Media Queries <a class=\"heading-anchor-permalink\" href=\"#using-media-queries\">#</a></h3>\n<ul>\n<li>The site navigation is responsive to the viewport width.</li>\n<li>The theming is responsive to the user preferences in their operating system.</li>\n<li>The card hover effect is responsive to what the user is using (touch vs mouse).</li>\n<li>In the above list, the theming and navigation are done via media queries. The rest is about modern CSS features like clamp() comparison function and container queries.</li>\n</ul>\n",
      "id": 7
    },
    {
      "path": "CSS/sizing_items_in_css.md",
      "url": "CSS/sizing_items_in_css.html",
      "content": "# Sizing items in CSS\n> https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\n\n## The natural or intrinsic(جوهري) size of things\n- natural size: default size before affected by `css` _examples: `img`,`div`_\n- intrinsic size: it's size is defined by its content.\n- extrinsic(خارجي) size: when a size (`width,heigh`) given to an element (_so content needs to fit into size_). Now, no matter what content is placed into it. if no enough space for content then it will `overflow`\n- size length/percentage: calculated against the size of the container block.\n- the viewport: this visible area of your page in the browser\n- you can use viewport to size boxes and *also* text whereas min/max-width only size boxes.\n- to prevent content from overflow out its container when its no space to fit and be sure container has a specific height at least, use `min-height`\n- when you size a box by percentage unit '%' such as `width/height:100%;`, you tell the box must commited(يلتزم) to the avialabe size that the container element provide it.\n\n## White space\n- White space means actual spaces, tabs and new lines.\n- browser ignore it in html and css.\n- Browser processes the document in a number of stages:\n![not found](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works/rendering.svg)\n- A DOM has a tree-like structure. Each element, attribute, and piece of text in the markup language becomes a DOM node in the tree structure and defined by their relationship (_parent,child,sibling,adjacent,ancestor..._) to other DOM nodes.\n> Excersize| build a DOM tree from this HTML snippet:\n```html\n<p>\n  Let's use:\n  <span>Cascading</span>\n  <span>Style</span>\n  <span>Sheets</span>\n</p>\n```\n> tool: [https://software.hixie.ch/utilities/js/live-dom-viewer]\n---\n# CSS Box Model\n\n- Everything in CSS has a box around it.\n- Several types of boxes generally fit into two categories: `block boxes` and `inline boxes`.\n- The types refers to how the box behaves in terms of page flow and in relation to other boxes on the page.\n- Various values for the _display type_ can set using the `display` property.\n- Boxes have **inner display type**(children) and an **outer display type**(parent/container).\n- Block elements in a horizontal writing mode such as English, layout vertically, one below the other.\n- The size of inline-level elements is just the size of their content.\n![](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Block_and_Inline_Layout_in_Normal_Flow/mdn-horizontal.png)\n- margins between block elements collapse?(hint: take the larger margin)\n- margins between inline elements collapse?(... smaller margin size)\n\n> see example: https://codesandbox.io/s/reverent-burnell-088kz3?file=/index.html\n\n### Outer display type (alongside other elements in the layout `or` participation in `flow layout`)\n> _examples:_ `h1,p` elements use `block` as their outer display type\n\n**If a box has an outer display type of block, then:**\n+ The box will break onto a new line.\n+ The `width` and `height` properties are respected.\n+ Padding, margin and border will cause other elements to be pushed away from the box.\n+ If `width` is not specified, the box will extend in the inline direction to fill the space available in its container. \n> _examples:_ `<h1>,<p>` elements use `block` as their outer display type\n\n**If a box has an outer display type of inline, then:**\n- The box will not break onto a new line.\n- The `width` and `height` properties will not apply (always be as content size).\n- Top and bottom `padding, margins, and borders` will apply but will not cause other inline boxes to move away from the box.\n- Left and `right padding, margins, and borders` will apply and will cause other inline boxes to move away from the box.\n> _examples:_  `<a>,<span>,<em> elements use `inline` as their outer display type.\n\n#### Inner display type\n\n- Boxes also have an inner display type, which dictates how elements inside that box are laid out. By default (without any other instruction), the children elements are laid out in _normal flow_ and behave as `block` or `inline` boxes, for example:\n\n```css\n/* syntax: display:<display-outer> <display-inner>*/\ndispaly:block; /* equals: display:block flow*/\n```\n> try it: https://developer.mozilla.org/en-US/docs/Web/CSS/display\n\n- You can change the inner display type for example by sitting `display:flex` but this changes the inner display type to `flex` any direct children of this box will become flex items and behave according to the `Flexbox` specification.\n\n> Remember: Changing the value of the `display` property can change whether(ما إذا كان) the outer display type of a box is block or inline.\n\n> always you can use your browser's developer window to inspect which _outer display type_ assigned to an element and a reference to the source such as `user agent stylesheet` or `index.css`\n\n\n",
      "html": "<h1 id=\"sizing-items-in-css\">Sizing items in CSS <a class=\"heading-anchor-permalink\" href=\"#sizing-items-in-css\">#</a></h1>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS</a></p>\n</blockquote>\n<h2 id=\"the-natural-or-intrinsic(%D8%AC%D9%88%D9%87%D8%B1%D9%8A)-size-of-things\">The natural or intrinsic(جوهري) size of things <a class=\"heading-anchor-permalink\" href=\"#the-natural-or-intrinsic(%D8%AC%D9%88%D9%87%D8%B1%D9%8A)-size-of-things\">#</a></h2>\n<ul>\n<li>natural size: default size before affected by <code>css</code> <em>examples: <code>img</code>,<code>div</code></em></li>\n<li>intrinsic size: it’s size is defined by its content.</li>\n<li>extrinsic(خارجي) size: when a size (<code>width,heigh</code>) given to an element (<em>so content needs to fit into size</em>). Now, no matter what content is placed into it. if no enough space for content then it will <code>overflow</code></li>\n<li>size length/percentage: calculated against the size of the container block.</li>\n<li>the viewport: this visible area of your page in the browser</li>\n<li>you can use viewport to size boxes and <em>also</em> text whereas min/max-width only size boxes.</li>\n<li>to prevent content from overflow out its container when its no space to fit and be sure container has a specific height at least, use <code>min-height</code></li>\n<li>when you size a box by percentage unit ‘%’ such as <code>width/height:100%;</code>, you tell the box must commited(يلتزم) to the avialabe size that the container element provide it.</li>\n</ul>\n<h2 id=\"white-space\">White space <a class=\"heading-anchor-permalink\" href=\"#white-space\">#</a></h2>\n<ul>\n<li>White space means actual spaces, tabs and new lines.</li>\n<li>browser ignore it in html and css.</li>\n<li>Browser processes the document in a number of stages:\n<img src=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works/rendering.svg\" alt=\"not found\"></li>\n<li>A DOM has a tree-like structure. Each element, attribute, and piece of text in the markup language becomes a DOM node in the tree structure and defined by their relationship (<em>parent,child,sibling,adjacent,ancestor…</em>) to other DOM nodes.</li>\n</ul>\n<blockquote>\n<p>Excersize| build a DOM tree from this HTML snippet:</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;p&gt;\n  Let's use:\n  &lt;span&gt;Cascading&lt;/span&gt;\n  &lt;span&gt;Style&lt;/span&gt;\n  &lt;span&gt;Sheets&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<blockquote>\n<p>tool: [<a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer\">https://software.hixie.ch/utilities/js/live-dom-viewer</a>]</p>\n</blockquote>\n<hr>\n<h1 id=\"css-box-model\">CSS Box Model <a class=\"heading-anchor-permalink\" href=\"#css-box-model\">#</a></h1>\n<ul>\n<li>Everything in CSS has a box around it.</li>\n<li>Several types of boxes generally fit into two categories: <code>block boxes</code> and <code>inline boxes</code>.</li>\n<li>The types refers to how the box behaves in terms of page flow and in relation to other boxes on the page.</li>\n<li>Various values for the <em>display type</em> can set using the <code>display</code> property.</li>\n<li>Boxes have <strong>inner display type</strong>(children) and an <strong>outer display type</strong>(parent/container).</li>\n<li>Block elements in a horizontal writing mode such as English, layout vertically, one below the other.</li>\n<li>The size of inline-level elements is just the size of their content.\n<img src=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Block_and_Inline_Layout_in_Normal_Flow/mdn-horizontal.png\" alt=\"\"></li>\n<li>margins between block elements collapse?(hint: take the larger margin)</li>\n<li>margins between inline elements collapse?(… smaller margin size)</li>\n</ul>\n<blockquote>\n<p>see example: <a href=\"https://codesandbox.io/s/reverent-burnell-088kz3?file=/index.html\">https://codesandbox.io/s/reverent-burnell-088kz3?file=/index.html</a></p>\n</blockquote>\n<h3 id=\"outer-display-type-(alongside-other-elements-in-the-layout-or-participation-in-flow-layout)\">Outer display type (alongside other elements in the layout <code>or</code> participation in <code>flow layout</code>) <a class=\"heading-anchor-permalink\" href=\"#outer-display-type-(alongside-other-elements-in-the-layout-or-participation-in-flow-layout)\">#</a></h3>\n<blockquote>\n<p><em>examples:</em> <code>h1,p</code> elements use <code>block</code> as their outer display type</p>\n</blockquote>\n<p><strong>If a box has an outer display type of block, then:</strong></p>\n<ul>\n<li>The box will break onto a new line.</li>\n<li>The <code>width</code> and <code>height</code> properties are respected.</li>\n<li>Padding, margin and border will cause other elements to be pushed away from the box.</li>\n<li>If <code>width</code> is not specified, the box will extend in the inline direction to fill the space available in its container.</li>\n</ul>\n<blockquote>\n<p><em>examples:</em> <code>&lt;h1&gt;,&lt;p&gt;</code> elements use <code>block</code> as their outer display type</p>\n</blockquote>\n<p><strong>If a box has an outer display type of inline, then:</strong></p>\n<ul>\n<li>The box will not break onto a new line.</li>\n<li>The <code>width</code> and <code>height</code> properties will not apply (always be as content size).</li>\n<li>Top and bottom <code>padding, margins, and borders</code> will apply but will not cause other inline boxes to move away from the box.</li>\n<li>Left and <code>right padding, margins, and borders</code> will apply and will cause other inline boxes to move away from the box.</li>\n</ul>\n<blockquote>\n<p><em>examples:</em>  <code>&lt;a&gt;,&lt;span&gt;,&lt;em&gt; elements use</code>inline` as their outer display type.</p>\n</blockquote>\n<h4 id=\"inner-display-type\">Inner display type <a class=\"heading-anchor-permalink\" href=\"#inner-display-type\">#</a></h4>\n<ul>\n<li>Boxes also have an inner display type, which dictates how elements inside that box are laid out. By default (without any other instruction), the children elements are laid out in <em>normal flow</em> and behave as <code>block</code> or <code>inline</code> boxes, for example:</li>\n</ul>\n<pre><code class=\"language-css\">/* syntax: display:&lt;display-outer&gt; &lt;display-inner&gt;*/\ndispaly:block; /* equals: display:block flow*/\n</code></pre>\n<blockquote>\n<p>try it: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">https://developer.mozilla.org/en-US/docs/Web/CSS/display</a></p>\n</blockquote>\n<ul>\n<li>You can change the inner display type for example by sitting <code>display:flex</code> but this changes the inner display type to <code>flex</code> any direct children of this box will become flex items and behave according to the <code>Flexbox</code> specification.</li>\n</ul>\n<blockquote>\n<p>Remember: Changing the value of the <code>display</code> property can change whether(ما إذا كان) the outer display type of a box is block or inline.</p>\n</blockquote>\n<blockquote>\n<p>always you can use your browser’s developer window to inspect which <em>outer display type</em> assigned to an element and a reference to the source such as <code>user agent stylesheet</code> or <code>index.css</code></p>\n</blockquote>\n",
      "id": 8
    },
    {
      "path": "Github/gcm.md",
      "url": "Github/gcm.html",
      "content": "# Git Credentional Manager (GCM)\n\n**This after install `gcm`:**\n\n## GPG/pass compatible files\n\n> Requires gpg, pass, and a GPG key pair.\n\n```bash\nexport GCM_CREDENTIAL_STORE=gpg\n# or\ngit config --global credential.credentialStore gpg\n```\n\nThis credential store uses GPG to encrypt files containing credentials which are stored in your file system. The file structure is compatible with the popular pass tool. By default files are stored in ~/.password-store but this can be configured using the pass environment variable PASSWORD_STORE_DIR.\n\nBefore you can use this credential store, it must be initialized by the pass utility, which in-turn requires a valid GPG key pair. To initalize the store, run:\n\n```bash\npass init <gpg-id>\n..where <gpg-id> is the user ID of a GPG key pair on your system. To create a new GPG key pair, run:\ngpg --gen-key\n```\n\n\n..and follow the prompts.\n\n\n",
      "html": "<h1 id=\"git-credentional-manager-(gcm)\">Git Credentional Manager (GCM) <a class=\"heading-anchor-permalink\" href=\"#git-credentional-manager-(gcm)\">#</a></h1>\n<p><strong>This after install <code>gcm</code>:</strong></p>\n<h2 id=\"gpg%2Fpass-compatible-files\">GPG/pass compatible files <a class=\"heading-anchor-permalink\" href=\"#gpg%2Fpass-compatible-files\">#</a></h2>\n<blockquote>\n<p>Requires gpg, pass, and a GPG key pair.</p>\n</blockquote>\n<pre><code class=\"language-bash\">export GCM_CREDENTIAL_STORE=gpg\n# or\ngit config --global credential.credentialStore gpg\n</code></pre>\n<p>This credential store uses GPG to encrypt files containing credentials which are stored in your file system. The file structure is compatible with the popular pass tool. By default files are stored in ~/.password-store but this can be configured using the pass environment variable PASSWORD_STORE_DIR.</p>\n<p>Before you can use this credential store, it must be initialized by the pass utility, which in-turn requires a valid GPG key pair. To initalize the store, run:</p>\n<pre><code class=\"language-bash\">pass init &lt;gpg-id&gt;\n..where &lt;gpg-id&gt; is the user ID of a GPG key pair on your system. To create a new GPG key pair, run:\ngpg --gen-key\n</code></pre>\n<p>…and follow the prompts.</p>\n",
      "id": 9
    },
    {
      "path": "Github/git-branching.md",
      "url": "Github/git-branching.html",
      "content": "From: [Learngitbranching.org](https://learngitbranching.org)\nTo go straight to a sandbox: (https://pcottle.github.io/learnGitBranching/?NODEMO)\n\n\n## Git Commits\n- A **commit** in a git repository records a snapshot of all the (tracked) files in your directory. It's like a snapshot of the directory.\n- most commits have ancestor commits above them\n\n## Branches\n\n- Branches: pointers to a specific commit and nothing more; says **I want to imclude the work of this commit and all parent commits**.\n\n## Branching and Merging\n\n- **branch off**: combining the work from two different branches together.\n\n**The first method to **branch off** is `git merge`**\n\n- Merging creates a special commit that has two unique parents which essentially means **I want to include all the work from this parent over here and this one over here, and the set of all their parents.\n- below, two branches with a unique commit which means that neither branch includes the entire set of \"work\" in the repo that we have done.\n\n<div class=\"img-wrapper\"><img src=\"git-images/1.png\" alt=\"not found\"></div>\n\n- when merge `git merge bugFix` into `main`, `main` now points to a new commit that has two parents which means that `main` contains all the work in ther repository now.\n<div class=\"img-wrapper\"><img src=\"git-images/2.png\" alt=\"not found\"></div>\n\n\n- when merge `git merge main` into `bugFix`, `main` now points to a new commit that has two parents which means that `main` contains all the work in ther repository now.\n<div class=\"img-wrapper\"><img src=\"git-images/3.png\" alt=\"not found\"><p>before `git merge main`</p></div>\nAnd since `bugFix` wan an ancestor of `main`, git simply just moved `bugFix` th the same commit `main` was attached to.\n<div class=\"img-wrapper\"><img src=\"git-images/4.png\" alt=\"not found\"><p>after `git merge main`</p></div>\n\n**The second way of combining work between branches is _rebasing_ which essentially take a set of commits, \"copies\" them, and plops(يسقط) them down somewhere else.**\n\n\n> While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.\n\n\n\n\n\n\n\n",
      "html": "<p>From: <a href=\"https://learngitbranching.org\">Learngitbranching.org</a>\nTo go straight to a sandbox: (<a href=\"https://pcottle.github.io/learnGitBranching/?NODEMO\">https://pcottle.github.io/learnGitBranching/?NODEMO</a>)</p>\n<h2 id=\"git-commits\">Git Commits <a class=\"heading-anchor-permalink\" href=\"#git-commits\">#</a></h2>\n<ul>\n<li>A <strong>commit</strong> in a git repository records a snapshot of all the (tracked) files in your directory. It’s like a snapshot of the directory.</li>\n<li>most commits have ancestor commits above them</li>\n</ul>\n<h2 id=\"branches\">Branches <a class=\"heading-anchor-permalink\" href=\"#branches\">#</a></h2>\n<ul>\n<li>Branches: pointers to a specific commit and nothing more; says <strong>I want to imclude the work of this commit and all parent commits</strong>.</li>\n</ul>\n<h2 id=\"branching-and-merging\">Branching and Merging <a class=\"heading-anchor-permalink\" href=\"#branching-and-merging\">#</a></h2>\n<ul>\n<li><strong>branch off</strong>: combining the work from two different branches together.</li>\n</ul>\n<p><strong>The first method to <strong>branch off</strong> is <code>git merge</code></strong></p>\n<ul>\n<li>Merging creates a special commit that has two unique parents which essentially means **I want to include all the work from this parent over here and this one over here, and the set of all their parents.</li>\n<li>below, two branches with a unique commit which means that neither branch includes the entire set of “work” in the repo that we have done.</li>\n</ul>\n<div class=\"img-wrapper\"><img src=\"git-images/1.png\" alt=\"not found\"></div>\n<ul>\n<li>when merge <code>git merge bugFix</code> into <code>main</code>, <code>main</code> now points to a new commit that has two parents which means that <code>main</code> contains all the work in ther repository now.</li>\n</ul>\n<div class=\"img-wrapper\"><img src=\"git-images/2.png\" alt=\"not found\"></div>\n<ul>\n<li>when merge <code>git merge main</code> into <code>bugFix</code>, <code>main</code> now points to a new commit that has two parents which means that <code>main</code> contains all the work in ther repository now.</li>\n</ul>\n<div class=\"img-wrapper\"><img src=\"git-images/3.png\" alt=\"not found\"><p>before `git merge main`</p></div>\nAnd since `bugFix` wan an ancestor of `main`, git simply just moved `bugFix` th the same commit `main` was attached to.\n<div class=\"img-wrapper\"><img src=\"git-images/4.png\" alt=\"not found\"><p>after `git merge main`</p></div>\n<p><strong>The second way of combining work between branches is <em>rebasing</em> which essentially take a set of commits, “copies” them, and plops(يسقط) them down somewhere else.</strong></p>\n<blockquote>\n<p>While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.</p>\n</blockquote>\n",
      "id": 10
    },
    {
      "path": "Github/git-flight-rules.md",
      "url": "Github/git-flight-rules.html",
      "content": "Forked at : (https://farisubuntu.github.io/git-flight-rules/)",
      "html": "<p>Forked at : (<a href=\"https://farisubuntu.github.io/git-flight-rules/\">https://farisubuntu.github.io/git-flight-rules/</a>)</p>\n",
      "id": 11
    },
    {
      "path": "Github/git-gcm-configure.md",
      "url": "Github/git-gcm-configure.html",
      "content": "# Git Credential Manager (GCM)\n\n- get `.deb` from (https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.3.2/gcm-linux_amd64.2.3.2.deb)\n\n- install package:\n\n```sh\nsudo dpkg -i <path-to-package>\ngit-credential-manager configure\n```\n\n## Credential stores\n\nThere are several options for storing credentials that GCM supports:\n\n\t- Windows Credential Manager\n\t- DPAPI protected files\n\t- macOS Keychain\n\t- [freedesktop.org Secret Service API][freedesktop-secret-service]\n\t- GPG/[`pass`][passwordstore] compatible files\n\t- Git's built-in [credential cache][credential-cache]\n\t- Plaintext files\n\n> GCM comes without a default store on Linux distributions.\n\nYou can select which credential store to use by setting the [`GCM_CREDENTIAL_STORE`][gcm-credential-store] environment variable, or the [`credential.credentialStore`][credential-store]\nGit configuration setting. For example:\n\n```shell\ngit config --global credential.credentialStore gpg\n```\n\nSome credential stores have limitations, or further configuration required depending on your particular setup. See more detailed information below for each credential store.\n\n## GPG/pass compatible files (macOS,Linux)\n\n> ⚠️ Requires gpg, pass, and a GPG key pair.\n\n```sh\nexport GCM_CREDENTIAL_STORE=gpg\n# or\ngit config --global credential.credentialStore gpg\n```\n\nThis credential store uses GPG to encrypt files containing credentials which are stored in your file system. The file structure is compatible with the popular pass tool. By default files are stored in ~/.password-store but this can be configured using the pass environment variable PASSWORD_STORE_DIR.\n\nBefore you can use this credential store, it must be initialized by the pass utility, which in-turn requires a valid GPG key pair. To initalize the store, run:\n\n`pass init <gpg-id>`\n\n..where <gpg-id> is the user ID of a GPG key pair on your system. To create a new GPG key pair, run:\n\n`gpg --gen-key`\n\n..and follow the prompts.\n\n\n## Plaintext files\n\nAvailable on: Windows, macOS, Linux\n\n> ⚠️ This is not a secure method of credential storage!\n\n```\nexport GCM_CREDENTIAL_STORE=plaintext\n# or\ngit config --global credential.credentialStore plaintext\n```\n\nThis credential store saves credentials to plaintext files in your file system. By default files are stored in `~/.gcm/store or %USERPROFILE%\\.gcm\\store`. This can be configured using the environment variable `GCM_PLAINTEXT_STORE_PATH` environment variable.\n\nIf the directory doesn't exist it will be created.\n\nOn POSIX platforms the newly created store directory will have permissions set such that only the owner can read/write/execute (700 or drwx---). Permissions on existing directories will not be modified.\n\nNow to continue:\n\n## [Checking for existing GPG keys] (https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys)\n\nthen :\n\n## [Adding a GPG key to your GitHub account] (https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account)\n\n",
      "html": "<h1 id=\"git-credential-manager-(gcm)\">Git Credential Manager (GCM) <a class=\"heading-anchor-permalink\" href=\"#git-credential-manager-(gcm)\">#</a></h1>\n<ul>\n<li>\n<p>get <code>.deb</code> from (<a href=\"https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.3.2/gcm-linux_amd64.2.3.2.deb\">https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.3.2/gcm-linux_amd64.2.3.2.deb</a>)</p>\n</li>\n<li>\n<p>install package:</p>\n</li>\n</ul>\n<pre><code class=\"language-sh\">sudo dpkg -i &lt;path-to-package&gt;\ngit-credential-manager configure\n</code></pre>\n<h2 id=\"credential-stores\">Credential stores <a class=\"heading-anchor-permalink\" href=\"#credential-stores\">#</a></h2>\n<p>There are several options for storing credentials that GCM supports:</p>\n<pre><code>- Windows Credential Manager\n- DPAPI protected files\n- macOS Keychain\n- [freedesktop.org Secret Service API][freedesktop-secret-service]\n- GPG/[`pass`][passwordstore] compatible files\n- Git's built-in [credential cache][credential-cache]\n- Plaintext files\n</code></pre>\n<blockquote>\n<p>GCM comes without a default store on Linux distributions.</p>\n</blockquote>\n<p>You can select which credential store to use by setting the [<code>GCM_CREDENTIAL_STORE</code>][gcm-credential-store] environment variable, or the [<code>credential.credentialStore</code>][credential-store]\nGit configuration setting. For example:</p>\n<pre><code class=\"language-shell\">git config --global credential.credentialStore gpg\n</code></pre>\n<p>Some credential stores have limitations, or further configuration required depending on your particular setup. See more detailed information below for each credential store.</p>\n<h2 id=\"gpg%2Fpass-compatible-files-(macos%2Clinux)\">GPG/pass compatible files (macOS,Linux) <a class=\"heading-anchor-permalink\" href=\"#gpg%2Fpass-compatible-files-(macos%2Clinux)\">#</a></h2>\n<blockquote>\n<p>⚠️ Requires gpg, pass, and a GPG key pair.</p>\n</blockquote>\n<pre><code class=\"language-sh\">export GCM_CREDENTIAL_STORE=gpg\n# or\ngit config --global credential.credentialStore gpg\n</code></pre>\n<p>This credential store uses GPG to encrypt files containing credentials which are stored in your file system. The file structure is compatible with the popular pass tool. By default files are stored in ~/.password-store but this can be configured using the pass environment variable PASSWORD_STORE_DIR.</p>\n<p>Before you can use this credential store, it must be initialized by the pass utility, which in-turn requires a valid GPG key pair. To initalize the store, run:</p>\n<p><code>pass init &lt;gpg-id&gt;</code></p>\n<p>…where <gpg-id> is the user ID of a GPG key pair on your system. To create a new GPG key pair, run:</p>\n<p><code>gpg --gen-key</code></p>\n<p>…and follow the prompts.</p>\n<h2 id=\"plaintext-files\">Plaintext files <a class=\"heading-anchor-permalink\" href=\"#plaintext-files\">#</a></h2>\n<p>Available on: Windows, macOS, Linux</p>\n<blockquote>\n<p>⚠️ This is not a secure method of credential storage!</p>\n</blockquote>\n<pre><code>export GCM_CREDENTIAL_STORE=plaintext\n# or\ngit config --global credential.credentialStore plaintext\n</code></pre>\n<p>This credential store saves credentials to plaintext files in your file system. By default files are stored in <code>~/.gcm/store or %USERPROFILE%\\.gcm\\store</code>. This can be configured using the environment variable <code>GCM_PLAINTEXT_STORE_PATH</code> environment variable.</p>\n<p>If the directory doesn’t exist it will be created.</p>\n<p>On POSIX platforms the newly created store directory will have permissions set such that only the owner can read/write/execute (700 or drwx—). Permissions on existing directories will not be modified.</p>\n<p>Now to continue:</p>\n<h2 id=\"%5Bchecking-for-existing-gpg-keys%5D-(https%3A%2F%2Fdocs.github.com%2Fen%2Fauthentication%2Fmanaging-commit-signature-verification%2Fchecking-for-existing-gpg-keys)\">[Checking for existing GPG keys] (<a href=\"https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys\">https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys</a>) <a class=\"heading-anchor-permalink\" href=\"#%5Bchecking-for-existing-gpg-keys%5D-(https%3A%2F%2Fdocs.github.com%2Fen%2Fauthentication%2Fmanaging-commit-signature-verification%2Fchecking-for-existing-gpg-keys)\">#</a></h2>\n<p>then :</p>\n<h2 id=\"%5Badding-a-gpg-key-to-your-github-account%5D-(https%3A%2F%2Fdocs.github.com%2Fen%2Fauthentication%2Fmanaging-commit-signature-verification%2Fadding-a-gpg-key-to-your-github-account)\">[Adding a GPG key to your GitHub account] (<a href=\"https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account\">https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account</a>) <a class=\"heading-anchor-permalink\" href=\"#%5Badding-a-gpg-key-to-your-github-account%5D-(https%3A%2F%2Fdocs.github.com%2Fen%2Fauthentication%2Fmanaging-commit-signature-verification%2Fadding-a-gpg-key-to-your-github-account)\">#</a></h2>\n",
      "id": 12
    },
    {
      "path": "Github/git.md",
      "url": "Github/git.html",
      "content": "# Git and Github\n\n+ Difference between `clone` and `fork`\n    - `clone` is a `git` command but `fork` is a concept.\n    - cloned repository changes can merged into master ONLY if you have write permission or added as a contributor by the owner whereas forked repository is a complete copy of the original repository that copied to your account and you must request a `pull request` to the owner that ask him to merge changes you made.\n\n----------\n\n\n\n- If you want all changes from master in dev_branch, then:\n```bash\ngit checkout dev_branch\ngit reset --hard master\n```\n\nThis only works if other people haven't cloned the repository.\n\n- If you have dev_branch pushed to a remote already, you have to do:\n```bash\ngit push --force\n```\n\n- To force-push to the remote. Warning: This will break the history of the branch for people who cloned it before! Then, other people will have to do a git pull --rebase on the dev_branch to get the changes.\n\n### References and sources\n\n- MDN github guide\n- git tutorial: (https://www.toolsqa.com/git/branch-in-git/)\n- git-flight-rules: (https://github.com/k88hudson/git-flight-rules)\n",
      "html": "<h1 id=\"git-and-github\">Git and Github <a class=\"heading-anchor-permalink\" href=\"#git-and-github\">#</a></h1>\n<ul>\n<li>Difference between <code>clone</code> and <code>fork</code>\n<ul>\n<li><code>clone</code> is a <code>git</code> command but <code>fork</code> is a concept.</li>\n<li>cloned repository changes can merged into master ONLY if you have write permission or added as a contributor by the owner whereas forked repository is a complete copy of the original repository that copied to your account and you must request a <code>pull request</code> to the owner that ask him to merge changes you made.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>If you want all changes from master in dev_branch, then:</li>\n</ul>\n<pre><code class=\"language-bash\">git checkout dev_branch\ngit reset --hard master\n</code></pre>\n<p>This only works if other people haven’t cloned the repository.</p>\n<ul>\n<li>If you have dev_branch pushed to a remote already, you have to do:</li>\n</ul>\n<pre><code class=\"language-bash\">git push --force\n</code></pre>\n<ul>\n<li>To force-push to the remote. Warning: This will break the history of the branch for people who cloned it before! Then, other people will have to do a git pull --rebase on the dev_branch to get the changes.</li>\n</ul>\n<h3 id=\"references-and-sources\">References and sources <a class=\"heading-anchor-permalink\" href=\"#references-and-sources\">#</a></h3>\n<ul>\n<li>MDN github guide</li>\n<li>git tutorial: (<a href=\"https://www.toolsqa.com/git/branch-in-git/\">https://www.toolsqa.com/git/branch-in-git/</a>)</li>\n<li>git-flight-rules: (<a href=\"https://github.com/k88hudson/git-flight-rules\">https://github.com/k88hudson/git-flight-rules</a>)</li>\n</ul>\n",
      "id": 13
    },
    {
      "path": "Github/gitpod.md",
      "url": "Github/gitpod.html",
      "content": "# Introduction to Gitpod\n\n[Gitpod][https://www.gitpod.io/]  is an open source platform for automated and  **ready-to-code development environments**  that blends into your existing workflow. It enables developers to describe their dev environment as code and  **start instant and fresh development environments for each new task**  directly from your browser.\n\nAt the heart of Gitpod: **an open platform that removes all friction of manually setting up and maintaining dev environments** allowing yourself and your team to build applications quicker and more collaboratively.\n<iframe width=\"840\" height=\"420\" src=\"https://www.youtube.com/embed/d6D-OUPnJeg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n---\n\n\n## Gitpod Concepts\n\nGitpod seamlessly integrates in your workflow and works with all major `git` hosting platforms including GitHub, GitLab and Bitbucket. It understands the context you are in and adjusts your dev environment accordingly. **For example, if you create a Gitpod workspace from a Pull or Merge Request, Gitpod will open a fully-initialized dev environment in code-review mode.**\n\n![gitpod-architecture](https://www.gitpod.io/static/e8d7768b99b4f07e5886cd8fd4395ad3/267c0/gitpod-architecture.png \"gitpod-architecture\"]\n\nAt its core Gitpod relies on a  **client-server architecture**  where the client can either be:\n\n-   **Any device**  with a browser and internet connection (Gitpod works with Chrome, Firefox, Safari, Edge and other Chromium-based browsers]\n-   Your  **local machine**  via local VS Code, IntelliJ or simply your shell/terminal where you SSH into your Gitpod workspace (_expected to be released in early Q1/2021_]\n\n### 🗳 Workspace\n\nA workspace comprises(يشمل) your whole development environment and gives you similar capabilities to a Linux machine. Compared to the latter it is however  **pre-configured and optimized for your individual development workflow**. Each workspace includes:\n\n-   Your source code\n-   A shell with  [root / sudo capabilities][https://www.gitpod.io/blog/root-docker-and-vscode/#root-access]\n-   Your IDE of choice* - currently this is  [VS Code][https://www.gitpod.io/blog/root-docker-and-vscode/#vs-code]  or  [Theia][https://theia-ide.org/]\n-   Your personal IDE extensions, themes, editor prefs\n-   Full  [Docker support][https://www.gitpod.io/blog/root-docker-and-vscode/#docker]\n---\n\n## Getting Started:\n\nYou can start using Gitpod with one or more of the following ways:\n\n-   Use a  [Prefixed URL](https://www.gitpod.io/docs/getting-started/#prefixed-url)\n\t- `https://gitlab.com/gitpod/spring-petclinic` **will be** `https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic`\n-   Install  [Browser Extension](https://www.gitpod.io/docs/getting-started/#browser-extension)\n-   Enable  [GitLab Integration](https://www.gitpod.io/docs/getting-started/#gitlab-integration)\n-   Quick start using an  [Example Project](https://www.gitpod.io/docs/getting-started/#example-project)  or  [OSS Project](https://www.gitpod.io/docs/getting-started/#gitpodified-open-source-project)\n\n<iframe width=\"840\" height=\"420\" src=\"https://www.youtube.com/embed/ZZ0_TQ6UApY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n**Notes from video:**\n[] \n",
      "html": "<h1 id=\"introduction-to-gitpod\">Introduction to Gitpod <a class=\"heading-anchor-permalink\" href=\"#introduction-to-gitpod\">#</a></h1>\n<p>[Gitpod][<a href=\"https://www.gitpod.io/\">https://www.gitpod.io/</a>]  is an open source platform for automated and  <strong>ready-to-code development environments</strong>  that blends into your existing workflow. It enables developers to describe their dev environment as code and  <strong>start instant and fresh development environments for each new task</strong>  directly from your browser.</p>\n<p>At the heart of Gitpod: <strong>an open platform that removes all friction of manually setting up and maintaining dev environments</strong> allowing yourself and your team to build applications quicker and more collaboratively.</p>\n<iframe width=\"840\" height=\"420\" src=\"https://www.youtube.com/embed/d6D-OUPnJeg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<hr>\n<h2 id=\"gitpod-concepts\">Gitpod Concepts <a class=\"heading-anchor-permalink\" href=\"#gitpod-concepts\">#</a></h2>\n<p>Gitpod seamlessly integrates in your workflow and works with all major <code>git</code> hosting platforms including GitHub, GitLab and Bitbucket. It understands the context you are in and adjusts your dev environment accordingly. <strong>For example, if you create a Gitpod workspace from a Pull or Merge Request, Gitpod will open a fully-initialized dev environment in code-review mode.</strong></p>\n<p>![gitpod-architecture](<a href=\"https://www.gitpod.io/static/e8d7768b99b4f07e5886cd8fd4395ad3/267c0/gitpod-architecture.png\">https://www.gitpod.io/static/e8d7768b99b4f07e5886cd8fd4395ad3/267c0/gitpod-architecture.png</a> “gitpod-architecture”]</p>\n<p>At its core Gitpod relies on a  <strong>client-server architecture</strong>  where the client can either be:</p>\n<ul>\n<li><strong>Any device</strong>  with a browser and internet connection (Gitpod works with Chrome, Firefox, Safari, Edge and other Chromium-based browsers]</li>\n<li>Your  <strong>local machine</strong>  via local VS Code, IntelliJ or simply your shell/terminal where you SSH into your Gitpod workspace (<em>expected to be released in early Q1/2021</em>]</li>\n</ul>\n<h3 id=\"%F0%9F%97%B3-workspace\">🗳 Workspace <a class=\"heading-anchor-permalink\" href=\"#%F0%9F%97%B3-workspace\">#</a></h3>\n<p>A workspace comprises(يشمل) your whole development environment and gives you similar capabilities to a Linux machine. Compared to the latter it is however  <strong>pre-configured and optimized for your individual development workflow</strong>. Each workspace includes:</p>\n<ul>\n<li>Your source code</li>\n<li>A shell with  [root / sudo capabilities][<a href=\"https://www.gitpod.io/blog/root-docker-and-vscode/#root-access\">https://www.gitpod.io/blog/root-docker-and-vscode/#root-access</a>]</li>\n<li>Your IDE of choice* - currently this is  [VS Code][<a href=\"https://www.gitpod.io/blog/root-docker-and-vscode/#vs-code\">https://www.gitpod.io/blog/root-docker-and-vscode/#vs-code</a>]  or  [Theia][<a href=\"https://theia-ide.org/\">https://theia-ide.org/</a>]</li>\n<li>Your personal IDE extensions, themes, editor prefs</li>\n<li>Full  [Docker support][<a href=\"https://www.gitpod.io/blog/root-docker-and-vscode/#docker\">https://www.gitpod.io/blog/root-docker-and-vscode/#docker</a>]</li>\n</ul>\n<hr>\n<h2 id=\"getting-started%3A\">Getting Started: <a class=\"heading-anchor-permalink\" href=\"#getting-started%3A\">#</a></h2>\n<p>You can start using Gitpod with one or more of the following ways:</p>\n<ul>\n<li>Use a  <a href=\"https://www.gitpod.io/docs/getting-started/#prefixed-url\">Prefixed URL</a>\n<ul>\n<li><code>https://gitlab.com/gitpod/spring-petclinic</code> <strong>will be</strong> <code>https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic</code></li>\n</ul>\n</li>\n<li>Install  <a href=\"https://www.gitpod.io/docs/getting-started/#browser-extension\">Browser Extension</a></li>\n<li>Enable  <a href=\"https://www.gitpod.io/docs/getting-started/#gitlab-integration\">GitLab Integration</a></li>\n<li>Quick start using an  <a href=\"https://www.gitpod.io/docs/getting-started/#example-project\">Example Project</a>  or  <a href=\"https://www.gitpod.io/docs/getting-started/#gitpodified-open-source-project\">OSS Project</a></li>\n</ul>\n<iframe width=\"840\" height=\"420\" src=\"https://www.youtube.com/embed/ZZ0_TQ6UApY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><strong>Notes from video:</strong>\n[]</p>\n",
      "id": 14
    },
    {
      "path": "Github/integrate_github_with_wordpress.md",
      "url": "Github/integrate_github_with_wordpress.html",
      "content": "\nsource: https://www.cloudways.com/blog/wordpress-github/\n\n\n## WordPress and GitHub Integration – Live and Local Environment\n\nThis article outlines the use of Git in WordPress development and how developers can set up a Git-enabled WordPress development workflow.\n\nTable of Contents\n\n*   [How to Use WordPress and GitHub](#how-to-use-wordpress-and-github)\n*   [How to Use WordPress and GitHub – Live Environment](#how-to-use-wordpress-and-github-live-environment)\n    *   [Step 1: Create Repository on GitHub](#create-repository-on-github)\n    *   [Step 2: Push Live WordPress site files to the GitHub Repository](#push-live-wordpress-site-files-to--the-github-repository)\n    *   [Step 3: Install Git](#install-git)\n    *   [Step 4: Pull to Local Folder from GitHub Repository](#pull-to-local-folder-from-github-repository)\n    *   [Step 5: Build Development Environment on the local Machine](#build-development-environment-on-the-local-machine)\n    *   [Step 6: Connect Sublime to GitHub](#connect-sublime-to-github)\n    *   [Step 7: Push from Local to GitHub](#push-from-local-to-github)\n    *   [Step 8: Connect GitHub with Live Environment](#connect-github-with-live-environment)\n    *   [Step 9: Pull Changes to a Live Environment from GitHub](#pull-changes-to-a-live-environment-from-github)\n*   [Why Isn’t The Pull Automated?](#why-isn't-the-pull-automated?)\n*   [How to Use WordPress and GitHub – Local Environment](#how-to-use-wordpress-and-github-local-environment)\n    *   [Step1: Download and Install Git](#download-and-install-git)\n    *   [Step 2: Sign in to GitHub and Create a New Repository](#sign-in-to-github-and-create-a-new-repository)\n    *   [Step 3: Push WordPress files from the local environment to GitHub](#push-wordpress-files-from-the-local-environment-to-github)\n    *   [Step 4: Check GitHub repository](#check-github-repository)\n\nHow to Use WordPress and GitHub\n-------------------------------\n\n1.  When you have a live WordPress site on a live server and want to push the files directly to the GitHub repository (this helps developers collaborate effortlessly). I’m going to create a development environment and deploy changes to the live site.\n2.  When you have a local environment and want to push WordPress files to GitHub repository.\n\nHow to Use WordPress and GitHub – Live Environment\n--------------------------------------------------\n\nI’m going to assume that you have a WordPress site on your live server. In my case, my WordPress site is hosted on a Cloudways managed server.\n\n### Step 1: Create Repository on GitHub\n\nLog into GitHub and create a repository by following this [link](https://github.com/new).\n\n![create new github repository](https://www.cloudways.com/blog/wp-content/uploads/GitHub-new-respository.png)\n\n![create new github repository](https://www.cloudways.com/blog/wp-content/uploads/GitHub-new-respository.png)\n\nGive a name to your repository (in my case, it’s **GitHub**). You can also add a description and access control (I selected **Public)** and click **Create repository**.\n\n### Step 2: Push Live WordPress site files to the GitHub Repository\n\nAfter creating a new repository, you need to push all your WordPress files and folders from the live server to the brand new GitHub repository.\n\nAs I mentioned earlier, I’m going to use the Cloudways Platform to demonstrate the live environment.\n\nI am going to launch the server **SSH Terminal**. If you’re a Cloudways customer, you may be familiar with the SSH terminal that is a command-line interface (CLI) through which you can handle your application files.\n\nTo launch SSH Terminal, you need to navigate to Cloudways **Server Management Panel** > **Master Credentials** > **Launch SSH Terminal** and paste your server Master Credentials **(username and password**).\n\n![ssh terminal cloudways](https://www.cloudways.com/blog/wp-content/uploads/Cloudways-SSH-Terminal-2-300x134.png)\n\n![ssh terminal cloudways](https://www.cloudways.com/blog/wp-content/uploads/Cloudways-SSH-Terminal-2-300x134.png)\n\nNext, run the following commands.\n\ncd applications/xxxxxx/public\\_html (xxxxxx is the folder name of your WordPress application).\n\n1.  cd applications/xxxxxx/public\\_html (xxxxxx is the folder name of your WordPress application).\n\n\nThis is the path of your WordPress folder. You can also push a specific folder such as wp-content or themes folder/files by using the correct path.\n\n![wordpress folder](https://www.cloudways.com/blog/wp-content/uploads/command-1-1.png)\n\n![wordpress folder](https://www.cloudways.com/blog/wp-content/uploads/command-1-1.png)\n\ngit init\n\n1.  git init\n\ngit init\n\nThis initializes the empty Git repository.\n\n![git initialize ](https://www.cloudways.com/blog/wp-content/uploads/command-2.png)\n\n![git initialize ](https://www.cloudways.com/blog/wp-content/uploads/command-2.png)\n\ngit add .\n\n1.  git add .\n\ngit add .\n\nThis command adds all files to the local GitHub repository and stages them for the first commit.\n\n![git command add files](https://www.cloudways.com/blog/wp-content/uploads/command-3.png)\n\n![git command add files](https://www.cloudways.com/blog/wp-content/uploads/command-3.png)\n\ngit checkout -b master\n\n1.  git checkout -b master\n\ngit checkout -b master\n\nSwitch to the master branch.\n\n![master branch](https://www.cloudways.com/blog/wp-content/uploads/command-4.png)\n\n![master branch](https://www.cloudways.com/blog/wp-content/uploads/command-4.png)\n\ngit commit -m \"first commit\"\n\n1.  git commit -m \"first commit\"\n\ngit commit -m \"first commit\"\n\nCommit the changes that have been tracked and prepare them for the push to the GitHub repository.\n\n![first git commit](https://www.cloudways.com/blog/wp-content/uploads/command-5.png)\n\n![first git commit](https://www.cloudways.com/blog/wp-content/uploads/command-5.png)\n\nIf you see this message “Please tell me who you are”, you need to run these commands:\n\ngit config --global user.email \"you@example.com\"                                                                                           \ngit config --global user.name \"Your Name\"\n\n1.  git config --global user.email \"you@example.com\"\n2.  git config --global user.name \"Your Name\"\n\ngit config --global user.email \"you@example.com\"                                                                                           \ngit config --global user.name \"Your Name\"\n\n![setting account identity ](https://www.cloudways.com/blog/wp-content/uploads/Please-tell-me-who-you-are-1.png)\n\n![setting account identity ](https://www.cloudways.com/blog/wp-content/uploads/Please-tell-me-who-you-are-1.png)\n\nReplace the email and name with your own.\n\n![config user email and name](https://www.cloudways.com/blog/wp-content/uploads/command-6-300x16.png)\n\n![config user email and name](https://www.cloudways.com/blog/wp-content/uploads/command-6-300x16.png)\n\n**git remote add origin** _remote repository URL  \n_The URL of your GitHub repository where all files will be pushed. Copy **HTTPS** remote URL and paste it to the remote _repository URL_.\n\n![github repository url](https://www.cloudways.com/blog/wp-content/uploads/URL-of-your-GitHub-repository-300x42.png)\n\n![github repository url](https://www.cloudways.com/blog/wp-content/uploads/URL-of-your-GitHub-repository-300x42.png)\n\nIn my case, the entire command will be:\n\ngit remote add origin https://github.com/farhanayub/GitHub.git\n\n1.  git remote add origin https://github.com/farhanayub/GitHub.git\n\ngit remote add origin https://github.com/farhanayub/GitHub.git\n\n![git remote add origin ](https://www.cloudways.com/blog/wp-content/uploads/command-7-300x8.png)\n\n![git remote add origin ](https://www.cloudways.com/blog/wp-content/uploads/command-7-300x8.png)\n\ngit push origin master\n\n1.  git push origin master\n\ngit push origin master\n\nThis command will finally push all the files to the GitHub repository in the master branch.\n\n![push all files](https://www.cloudways.com/blog/wp-content/uploads/command-8.png)\n\n![push all files](https://www.cloudways.com/blog/wp-content/uploads/command-8.png)\n\nNote: You will need to enter your GitHub username and password.\n\n![github username and password](https://www.cloudways.com/blog/wp-content/uploads/user-and-password-GitHub.png)\n\n![github username and password](https://www.cloudways.com/blog/wp-content/uploads/user-and-password-GitHub.png)\n\n**_If you see any errors, use the following command, and repeat all commands in sequence._**\n\nrm -rf .git/\n\n1.  rm -rf .git/\n\nrm -rf .git/\n\n![remove the file](https://www.cloudways.com/blog/wp-content/uploads/command-9.png)\n\n![remove the file](https://www.cloudways.com/blog/wp-content/uploads/command-9.png)\n\n**Note:** _If you have a public repository, a good practice is to delete the wp-config.php from the GitHub repository because it contains credentials of your WordPress application. You can always edit it directly on the live site._\n\n![successfully pushed to github](https://www.cloudways.com/blog/wp-content/uploads/Push-WordPress-files-to-GitHub.png)\n\n![successfully pushed to github](https://www.cloudways.com/blog/wp-content/uploads/Push-WordPress-files-to-GitHub.png)\n\nNext, check your GitHub repository and tada! You’ve successfully pushed your WordPress files.\n\n### Step 3: Install Git\n\nNow, you can pull your files from GitHub to your local PC and for that, you need to download and install [Git](https://git-scm.com/downloads) at your local system.\n\n![download and install git](https://www.cloudways.com/blog/wp-content/uploads/Install-Git-300x177.png)\n\n![download and install git](https://www.cloudways.com/blog/wp-content/uploads/Install-Git-300x177.png)\n\n### Step 4: Pull to Local Folder from GitHub Repository\n\nAfter installing Git, let’s start pulling files and folders to a local folder.\n\nCreate a folder, get into it and press **Right-Click** > **Git Bash Here**. It will open a window (resembling the command prompt), where you can enter Git commands to connect this folder to the online GitHub repository.\n\nEnter the following Git commands one by one.\n\ngit init\n\ngit add .\n\ngit remote add origin https://github.com/farhanayub/GitHub.git\n\n/\\* Don’t forget to replace the URL with your own. \\*/\n\ngit pull origin master\n\n1.  git init\n\n3.  git add .\n\n5.  git remote add origin https://github.com/farhanayub/GitHub.git\n\n7.  /\\* Don’t forget to replace the URL with your own. \\*/\n\n9.  git pull origin master\n\ngit init\n\ngit add .\n\ngit remote add origin https://github.com/farhanayub/GitHub.git\n\n/\\* Don’t forget to replace the URL with your own. \\*/\n\ngit pull origin master\n\n![pull wordpress files from github](https://www.cloudways.com/blog/wp-content/uploads/Pull-Git-comamnds.png)\n\n![pull wordpress files from github](https://www.cloudways.com/blog/wp-content/uploads/Pull-Git-comamnds.png)\n\nIt will take some time, depending on your connection speed and the size of your WordPress repository.\n\nOnce the process finishes, go to your local WordPress folder. You can see that all the files from the GitHub repo have been pulled successfully.\n\n![pulled wordpress files](https://www.cloudways.com/blog/wp-content/uploads/WordPress-files.png)\n\n![pulled wordpress files](https://www.cloudways.com/blog/wp-content/uploads/WordPress-files.png)\n\n### Step 5: Build Development Environment on the Local Machine\n\nNow, let’s create a development environment for WordPress and GitHub on the local machine. For that, I’m going to install Sublime Text and a GitHub package known as GitSavvy.\n\n1.  Install Sublime Text  \n    I am using Sublime Text as my [code editor](https://www.cloudways.com/blog/top-ide-and-code-editors-php-development/). You need to download and install the latest version of the [Sublime Text editor](https://www.sublimetext.com/).\n2.  Install GitHub Package for Sublime Text Editor  \n    You will find many GitHub Tools for Sublime Text. I am using [GitSavvy](https://github.com/divmain/GitSavvy), a popular package\n\nGitSavvy has [a complete list of GitHub commands](https://github.com/timbrel/GitSavvy/blob/master/docs/README.md) that can help you manage your Push and Pull processes. To install the package, open the **Command Palette** by pressing **CTRL+SHIFT+P** or navigate to **Tools** > **Command Palette**.\n\n![command palette](https://www.cloudways.com/blog/wp-content/uploads/Sublime-Command-Palette.png)\n\n![command palette](https://www.cloudways.com/blog/wp-content/uploads/Sublime-Command-Palette.png)\n\nA new popup will appear, asking you to perform a task. Now, you need to install the **Package Control** that will enable adding different Sublime Text packages. Search for **Install Package** and press enter.\n\n![install package on sublime](https://www.cloudways.com/blog/wp-content/uploads/Install-Sublime-package.png)\n\n![install package on sublime](https://www.cloudways.com/blog/wp-content/uploads/Install-Sublime-package.png)\n\nWithin a few seconds, you will see a new popup displaying a complete list of available packages. Now, search and install **GitSavvy**.\n\n![gitsavvy package](https://www.cloudways.com/blog/wp-content/uploads/Sublime-GitSavvy.png)\n\n![gitsavvy package](https://www.cloudways.com/blog/wp-content/uploads/Sublime-GitSavvy.png)\n\nOn the successful installation of the GitSavvy package, a new tab will be opened displaying a welcome message from the GitSavvy team.\n\n![welcome message from gitsavvy](https://www.cloudways.com/blog/wp-content/uploads/welcome-message-300x110.png)\n\n![welcome message from gitsavvy](https://www.cloudways.com/blog/wp-content/uploads/welcome-message-300x110.png)\n\nNote: I would suggest reading this in full as you will have a good understanding of the GitSavvy basics. You can also get help within Sublime Text by pressing **CTRL+SHIFT+P** and typing **GitSavvy: help**.\n\n### Step 6: Connect Sublime Text to GitHub\n\nNext, you need to connect Sublime Text with GitHub so that you can easily push changes from the local environment to the WordPress repository on GitHub.\n\nOpen the local WordPress folder in Sublime Text by going to **File** > **Open Folder**.\n\n![open wordpress folder ](https://www.cloudways.com/blog/wp-content/uploads/WordPress-files-Sublime.png)\n\n![open wordpress folder ](https://www.cloudways.com/blog/wp-content/uploads/WordPress-files-Sublime.png)\n\nTo test this environment I am going to edit the **wp-login.php** file and\n\nadd **echo “Hello World!”;** at the top of the file just below **<?php** and **Save** it.\n\n![adding code](https://www.cloudways.com/blog/wp-content/uploads/edit-WordPress-file-300x164.png)\n\n![adding code](https://www.cloudways.com/blog/wp-content/uploads/edit-WordPress-file-300x164.png)\n\nThen, initialize GitHub on Sublime Text by opening the Command Palette, search for **status**, and press enter where it says **git: status**.\n\n![check file status](https://www.cloudways.com/blog/wp-content/uploads/status-Sublime-300x168.png)\n\n![check file status](https://www.cloudways.com/blog/wp-content/uploads/status-Sublime-300x168.png)\n\nThis command will compare the local folder with the GitHub repository version and let you know the name of the files that you changed.\n\n![unstagged mode](https://www.cloudways.com/blog/wp-content/uploads/unstagged-file.png)\n\n![unstagged mode](https://www.cloudways.com/blog/wp-content/uploads/unstagged-file.png)\n\nYou can see, **wp-login.php** is in **unstaged** mode. You can do a lot with this file by following the instructed commands. But first, you need to **stage** this file, **commit** it, and then **push** it to GitHub repository.\n\nPress **S** to stage this file, and check the status through the **git: status** command. You will notice that the file has been moved to the staged mode.\n\n![stagged mode](https://www.cloudways.com/blog/wp-content/uploads/stagged-file.png)\n\n![stagged mode](https://www.cloudways.com/blog/wp-content/uploads/stagged-file.png)\n\nTo commit this change, press **c**. A new tab will open describing the changes I have done in the **wp-login.php** file. Write “**my commit”** at the top of the file and press **CTRL+ENTER** to submit the commit.\n\n![submitting commit](https://www.cloudways.com/blog/wp-content/uploads/my-commit.png)\n\n![submitting commit](https://www.cloudways.com/blog/wp-content/uploads/my-commit.png)\n\n**Note**: It might ask your name and email so that the **commit** could be submitted under your name.\n\n### Step 7: Push from Local to GitHub\n\nNow, I need to tell Sublime Text about the repository I am going to **push** the change. Use **git: remote add** command to set the remote URL.\n\n![setting remote URL](https://www.cloudways.com/blog/wp-content/uploads/set-remote-url-300x193.png)\n\n![setting remote URL](https://www.cloudways.com/blog/wp-content/uploads/set-remote-url-300x193.png)\n\n![setting remote name](https://www.cloudways.com/blog/wp-content/uploads/set-remote-name.png)\n\n![setting remote name](https://www.cloudways.com/blog/wp-content/uploads/set-remote-name.png)\n\nOnce you are connected with the GitHub repository, use **git: push** to push the changes.\n\n![pushing changes](https://www.cloudways.com/blog/wp-content/uploads/push-file.png)\n\n![pushing changes](https://www.cloudways.com/blog/wp-content/uploads/push-file.png)\n\nSelect the **origin** and the branch name **master**.\n\n![setting branch name and origin](https://www.cloudways.com/blog/wp-content/uploads/origin-branch-300x179.png)\n\n![setting branch name and origin](https://www.cloudways.com/blog/wp-content/uploads/origin-branch-300x179.png)\n\nNote: If you are not logged into your GitHub account, it may ask you to login.\n\n![successfully pushed file to GitHub](https://www.cloudways.com/blog/wp-content/uploads/pushed-file-300x196.png)\n\n![successfully pushed file to GitHub](https://www.cloudways.com/blog/wp-content/uploads/pushed-file-300x196.png)\n\n### Step 8: Connect GitHub with Live Environment\n\nAfter connecting Sublime Text to GitHub, you need to log in to your Cloudways account and get into the WordPress application. From the left panel in the dashboard, go to **Deployment via Git** and tap on **Generate SSH Keys**.\n\n![generate ssh key ](https://www.cloudways.com/blog/wp-content/uploads/generate-SSH-key-300x148.png)\n\n![generate ssh key ](https://www.cloudways.com/blog/wp-content/uploads/generate-SSH-key-300x148.png)\n\nClick **VIEW SSH KEY** and download SSH Keys.\n\n![view and download ssh key](https://www.cloudways.com/blog/wp-content/uploads/download-SHH-key-300x149.png)\n\n![view and download ssh key](https://www.cloudways.com/blog/wp-content/uploads/download-SHH-key-300x149.png)\n\nGo back to GitHub repository and navigate to **Settings > Deploy Keys > Add Deploy Key**, set title, and enter the downloaded **SSH Keys**.\n\n![adding ssh key in github deploy keys](https://www.cloudways.com/blog/wp-content/uploads/deploy-SSH-key-GitHub-300x179.png)\n\n![adding ssh key in github deploy keys](https://www.cloudways.com/blog/wp-content/uploads/deploy-SSH-key-GitHub-300x179.png)\n\nAs you can see, I have marked the checkbox where it says **Allow write access** because I am going to exchange the changes.\n\nWithin your GitHub repository, navigate to the **Code** tab, copy **SSH Key**, make sure you have selected **use SSH**.\n\n![cloning via ssh](https://www.cloudways.com/blog/wp-content/uploads/use-SSH.png)\n\n![cloning via ssh](https://www.cloudways.com/blog/wp-content/uploads/use-SSH.png)\n\nNow, get back to the Cloudways Platform where it says **Deployment via Git**. Paste the **SSH Key** in the **Git Remote Address** field, click **Authenticate**, and choose the branch of your Git repository (I am using **master**).\n\nThe deployment path is left empty because I am going to connect WordPress application’s **public\\_html** folder with the GitHub repository. Now tap on **Start Deployment** to connect the Cloudways Platform with GitHub.\n\n![connecting cloudways and github](https://www.cloudways.com/blog/wp-content/uploads/start-deployment.png)\n\n![connecting cloudways and github](https://www.cloudways.com/blog/wp-content/uploads/start-deployment.png)\n\nOnce it is done, you will get a notification at the top right corner of the screen.\n\n![message on successful repository cloning](https://www.cloudways.com/blog/wp-content/uploads/successful-notification.png)\n\n![message on successful repository cloning](https://www.cloudways.com/blog/wp-content/uploads/successful-notification.png)\n\n### Step 9: Pull Changes to a Live Environment from GitHub\n\nOK so, everything is configured and working well. Now, we need to pull changes from the GitHub repository to a WordPress site on Cloudways.\n\nFrom Cloudways platform, get into your application and then navigate to **Application Management > Deployment via Git**, hit the **Pull** button.\n\n![pulling changes from github](https://www.cloudways.com/blog/wp-content/uploads/pull-changes.png)\n\n![pulling changes from github](https://www.cloudways.com/blog/wp-content/uploads/pull-changes.png)\n\nBingo!\n\nAll changes have been updated on the live site. Here is how they look.\n\n![checking pulled file](https://www.cloudways.com/blog/wp-content/uploads/testing-file-300x226.png)\n\n![checking pulled file](https://www.cloudways.com/blog/wp-content/uploads/testing-file-300x226.png)\n\nWhy Isn’t The Pull Automated?\n-----------------------------\n\nThe process of pulling all the changes may seem hassle because you have to do it manually. The reason is to avoid unwanted push to GitHub repo that can happen by mistake. It is advisable to only make a Pull request when you are confident enough to apply changes on the live site.\n\nThe whole live environment process might look complex, but once everything is properly configured, you just need to make changes in the local WordPress folder using the Sublime Text editor, push to GitHub and Pull on the live site.\n\nHow to Use WordPress and GitHub – Local Environment\n---------------------------------------------------\n\nThis is the second case where you’re working on your local machine and want to push your WordPress files to the GitHub repository.\n\nHere, I’m assuming that you have a local setup ready (if not, here’s a [complete guide](https://www.cloudways.com/blog/install-wordpress-locally/) that will help you to do that).\n\nSo, let’s get started!\n\n### Step1: Download and Install Git\n\nFirst, you need to [download](https://git-scm.com/downloads) and install Git on your local machine. Choose the version that is compatible with your OS.\n\n![installing git](https://www.cloudways.com/blog/wp-content/uploads/install-and-setup-Git.png)\n\n![installing git](https://www.cloudways.com/blog/wp-content/uploads/install-and-setup-Git.png)\n\n### Step 2: Sign in to GitHub and Create a New Repository\n\nAfter installing Git, log in to your GitHub account > **Respostories** > **New**.\n\n![github repository folder](https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-1-300x117.png)\n\n![github repository folder](https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-1-300x117.png)\n\nNext, you need to fill the fields and click **Create repository**.\n\n![creating a new repository](https://www.cloudways.com/blog/wp-content/uploads/new-repository.png)\n\n![creating a new repository](https://www.cloudways.com/blog/wp-content/uploads/new-repository.png)\n\n### Step 3: Push WordPress files from the local environment to GitHub\n\nI’m going to push the local WordPress theme files (the Twenty Twenty theme) to the GitHub repository.\n\nFor this, go to the WordPress theme folder and right-click for the context menu, and click **Git Bash Here.**\n\n![git bash here](https://www.cloudways.com/blog/wp-content/uploads/open-Git-Bash-300x147.png)\n\n![git bash here](https://www.cloudways.com/blog/wp-content/uploads/open-Git-Bash-300x147.png)\n\nA command prompt will pop up and all you need to do is use the following commands.\n\ngit init\n\n1.  git init\n\ngit init\n\n![initialized empty git repository](https://www.cloudways.com/blog/wp-content/uploads/Git-intialize.png)\n\n![initialized empty git repository](https://www.cloudways.com/blog/wp-content/uploads/Git-intialize.png)\n\ngit add .\n\n1.  git add .\n\ngit add .\n\n![adding all files via git](https://www.cloudways.com/blog/wp-content/uploads/adding-all-files.png)\n\n![adding all files via git](https://www.cloudways.com/blog/wp-content/uploads/adding-all-files.png)\n\ngit commit -m \"first commit\"\n\n1.  git commit -m \"first commit\"\n\ngit commit -m \"first commit\"\n\n![first git commit](https://www.cloudways.com/blog/wp-content/uploads/add-commit.png)\n\n![first git commit](https://www.cloudways.com/blog/wp-content/uploads/add-commit.png)\n\ngit remote add origin https://github.com/farhanayub/MyWordPress.git\n\n1.  git remote add origin https://github.com/farhanayub/MyWordPress.git\n\ngit remote add origin https://github.com/farhanayub/MyWordPress.git\n\n![adding GitHub repository URL](https://www.cloudways.com/blog/wp-content/uploads/add-GitHub-repo-URL.png)\n\n![adding GitHub repository URL](https://www.cloudways.com/blog/wp-content/uploads/add-GitHub-repo-URL.png)\n\nYou can copy your URL from here:\n\n![repository https url](https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-URL-300x44.png)\n\n![repository https url](https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-URL-300x44.png)\n\ngit push -u origin master\n\n1.  git push -u origin master\n\ngit push -u origin master\n\n![pushing all files](https://www.cloudways.com/blog/wp-content/uploads/push-files.png)\n\n![pushing all files](https://www.cloudways.com/blog/wp-content/uploads/push-files.png)\n\n### Step 4: Check GitHub Repository\n\nNow, go to GitHub and refresh the repository page. As you can see, all theme files (the Twenty Twenty) have been successfully pushed to this GitHub repo.\n\n![checking github repository](https://www.cloudways.com/blog/wp-content/uploads/check-repository-300x210.png)\n\n![checking github repository](https://www.cloudways.com/blog/wp-content/uploads/check-repository-300x210.png)\n\nFinal Words\n-----------\n\nI hope this article helped you integrate WordPress with GitHub. I’ve discussed two scenarios of working with a live and a local environment of WordPress and GitHub.\n\nIf you have any questions, feel free to ask in the comments section below.",
      "html": "<p>source: <a href=\"https://www.cloudways.com/blog/wordpress-github/\">https://www.cloudways.com/blog/wordpress-github/</a></p>\n<h2 id=\"wordpress-and-github-integration-%E2%80%93-live-and-local-environment\">WordPress and GitHub Integration – Live and Local Environment <a class=\"heading-anchor-permalink\" href=\"#wordpress-and-github-integration-%E2%80%93-live-and-local-environment\">#</a></h2>\n<p>This article outlines the use of Git in WordPress development and how developers can set up a Git-enabled WordPress development workflow.</p>\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#how-to-use-wordpress-and-github\">How to Use WordPress and GitHub</a></li>\n<li><a href=\"#how-to-use-wordpress-and-github-live-environment\">How to Use WordPress and GitHub – Live Environment</a>\n<ul>\n<li><a href=\"#create-repository-on-github\">Step 1: Create Repository on GitHub</a></li>\n<li><a href=\"#push-live-wordpress-site-files-to--the-github-repository\">Step 2: Push Live WordPress site files to the GitHub Repository</a></li>\n<li><a href=\"#install-git\">Step 3: Install Git</a></li>\n<li><a href=\"#pull-to-local-folder-from-github-repository\">Step 4: Pull to Local Folder from GitHub Repository</a></li>\n<li><a href=\"#build-development-environment-on-the-local-machine\">Step 5: Build Development Environment on the local Machine</a></li>\n<li><a href=\"#connect-sublime-to-github\">Step 6: Connect Sublime to GitHub</a></li>\n<li><a href=\"#push-from-local-to-github\">Step 7: Push from Local to GitHub</a></li>\n<li><a href=\"#connect-github-with-live-environment\">Step 8: Connect GitHub with Live Environment</a></li>\n<li><a href=\"#pull-changes-to-a-live-environment-from-github\">Step 9: Pull Changes to a Live Environment from GitHub</a></li>\n</ul>\n</li>\n<li><a href=\"#why-isn't-the-pull-automated?\">Why Isn’t The Pull Automated?</a></li>\n<li><a href=\"#how-to-use-wordpress-and-github-local-environment\">How to Use WordPress and GitHub – Local Environment</a>\n<ul>\n<li><a href=\"#download-and-install-git\">Step1: Download and Install Git</a></li>\n<li><a href=\"#sign-in-to-github-and-create-a-new-repository\">Step 2: Sign in to GitHub and Create a New Repository</a></li>\n<li><a href=\"#push-wordpress-files-from-the-local-environment-to-github\">Step 3: Push WordPress files from the local environment to GitHub</a></li>\n<li><a href=\"#check-github-repository\">Step 4: Check GitHub repository</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-to-use-wordpress-and-github\">How to Use WordPress and GitHub <a class=\"heading-anchor-permalink\" href=\"#how-to-use-wordpress-and-github\">#</a></h2>\n<ol>\n<li>When you have a live WordPress site on a live server and want to push the files directly to the GitHub repository (this helps developers collaborate effortlessly). I’m going to create a development environment and deploy changes to the live site.</li>\n<li>When you have a local environment and want to push WordPress files to GitHub repository.</li>\n</ol>\n<h2 id=\"how-to-use-wordpress-and-github-%E2%80%93-live-environment\">How to Use WordPress and GitHub – Live Environment <a class=\"heading-anchor-permalink\" href=\"#how-to-use-wordpress-and-github-%E2%80%93-live-environment\">#</a></h2>\n<p>I’m going to assume that you have a WordPress site on your live server. In my case, my WordPress site is hosted on a Cloudways managed server.</p>\n<h3 id=\"step-1%3A-create-repository-on-github\">Step 1: Create Repository on GitHub <a class=\"heading-anchor-permalink\" href=\"#step-1%3A-create-repository-on-github\">#</a></h3>\n<p>Log into GitHub and create a repository by following this <a href=\"https://github.com/new\">link</a>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/GitHub-new-respository.png\" alt=\"create new github repository\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/GitHub-new-respository.png\" alt=\"create new github repository\"></p>\n<p>Give a name to your repository (in my case, it’s <strong>GitHub</strong>). You can also add a description and access control (I selected <strong>Public)</strong> and click <strong>Create repository</strong>.</p>\n<h3 id=\"step-2%3A-push-live-wordpress-site-files-to-the-github-repository\">Step 2: Push Live WordPress site files to the GitHub Repository <a class=\"heading-anchor-permalink\" href=\"#step-2%3A-push-live-wordpress-site-files-to-the-github-repository\">#</a></h3>\n<p>After creating a new repository, you need to push all your WordPress files and folders from the live server to the brand new GitHub repository.</p>\n<p>As I mentioned earlier, I’m going to use the Cloudways Platform to demonstrate the live environment.</p>\n<p>I am going to launch the server <strong>SSH Terminal</strong>. If you’re a Cloudways customer, you may be familiar with the SSH terminal that is a command-line interface (CLI) through which you can handle your application files.</p>\n<p>To launch SSH Terminal, you need to navigate to Cloudways <strong>Server Management Panel</strong> &gt; <strong>Master Credentials</strong> &gt; <strong>Launch SSH Terminal</strong> and paste your server Master Credentials <strong>(username and password</strong>).</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Cloudways-SSH-Terminal-2-300x134.png\" alt=\"ssh terminal cloudways\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Cloudways-SSH-Terminal-2-300x134.png\" alt=\"ssh terminal cloudways\"></p>\n<p>Next, run the following commands.</p>\n<p>cd applications/xxxxxx/public_html (xxxxxx is the folder name of your WordPress application).</p>\n<ol>\n<li>cd applications/xxxxxx/public_html (xxxxxx is the folder name of your WordPress application).</li>\n</ol>\n<p>This is the path of your WordPress folder. You can also push a specific folder such as wp-content or themes folder/files by using the correct path.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-1-1.png\" alt=\"wordpress folder\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-1-1.png\" alt=\"wordpress folder\"></p>\n<p>git init</p>\n<ol>\n<li>git init</li>\n</ol>\n<p>git init</p>\n<p>This initializes the empty Git repository.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-2.png\" alt=\"git initialize \"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-2.png\" alt=\"git initialize \"></p>\n<p>git add .</p>\n<ol>\n<li>git add .</li>\n</ol>\n<p>git add .</p>\n<p>This command adds all files to the local GitHub repository and stages them for the first commit.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-3.png\" alt=\"git command add files\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-3.png\" alt=\"git command add files\"></p>\n<p>git checkout -b master</p>\n<ol>\n<li>git checkout -b master</li>\n</ol>\n<p>git checkout -b master</p>\n<p>Switch to the master branch.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-4.png\" alt=\"master branch\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-4.png\" alt=\"master branch\"></p>\n<p>git commit -m “first commit”</p>\n<ol>\n<li>git commit -m “first commit”</li>\n</ol>\n<p>git commit -m “first commit”</p>\n<p>Commit the changes that have been tracked and prepare them for the push to the GitHub repository.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-5.png\" alt=\"first git commit\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-5.png\" alt=\"first git commit\"></p>\n<p>If you see this message “Please tell me who you are”, you need to run these commands:</p>\n<p>git config --global user.email “<a href=\"mailto:you@example.com\">you@example.com</a>”<br>\ngit config --global <a href=\"http://user.name\">user.name</a> “Your Name”</p>\n<ol>\n<li>git config --global user.email “<a href=\"mailto:you@example.com\">you@example.com</a>”</li>\n<li>git config --global <a href=\"http://user.name\">user.name</a> “Your Name”</li>\n</ol>\n<p>git config --global user.email “<a href=\"mailto:you@example.com\">you@example.com</a>”<br>\ngit config --global <a href=\"http://user.name\">user.name</a> “Your Name”</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Please-tell-me-who-you-are-1.png\" alt=\"setting account identity \"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Please-tell-me-who-you-are-1.png\" alt=\"setting account identity \"></p>\n<p>Replace the email and name with your own.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-6-300x16.png\" alt=\"config user email and name\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-6-300x16.png\" alt=\"config user email and name\"></p>\n<p><strong>git remote add origin</strong> _remote repository URL<br>\n_The URL of your GitHub repository where all files will be pushed. Copy <strong>HTTPS</strong> remote URL and paste it to the remote <em>repository URL</em>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/URL-of-your-GitHub-repository-300x42.png\" alt=\"github repository url\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/URL-of-your-GitHub-repository-300x42.png\" alt=\"github repository url\"></p>\n<p>In my case, the entire command will be:</p>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/GitHub.git\">https://github.com/farhanayub/GitHub.git</a></p>\n<ol>\n<li>git remote add origin <a href=\"https://github.com/farhanayub/GitHub.git\">https://github.com/farhanayub/GitHub.git</a></li>\n</ol>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/GitHub.git\">https://github.com/farhanayub/GitHub.git</a></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-7-300x8.png\" alt=\"git remote add origin \"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-7-300x8.png\" alt=\"git remote add origin \"></p>\n<p>git push origin master</p>\n<ol>\n<li>git push origin master</li>\n</ol>\n<p>git push origin master</p>\n<p>This command will finally push all the files to the GitHub repository in the master branch.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-8.png\" alt=\"push all files\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-8.png\" alt=\"push all files\"></p>\n<p>Note: You will need to enter your GitHub username and password.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/user-and-password-GitHub.png\" alt=\"github username and password\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/user-and-password-GitHub.png\" alt=\"github username and password\"></p>\n<p><strong><em>If you see any errors, use the following command, and repeat all commands in sequence.</em></strong></p>\n<p>rm -rf .git/</p>\n<ol>\n<li>rm -rf .git/</li>\n</ol>\n<p>rm -rf .git/</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-9.png\" alt=\"remove the file\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/command-9.png\" alt=\"remove the file\"></p>\n<p><strong>Note:</strong> <em>If you have a public repository, a good practice is to delete the wp-config.php from the GitHub repository because it contains credentials of your WordPress application. You can always edit it directly on the live site.</em></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Push-WordPress-files-to-GitHub.png\" alt=\"successfully pushed to github\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Push-WordPress-files-to-GitHub.png\" alt=\"successfully pushed to github\"></p>\n<p>Next, check your GitHub repository and tada! You’ve successfully pushed your WordPress files.</p>\n<h3 id=\"step-3%3A-install-git\">Step 3: Install Git <a class=\"heading-anchor-permalink\" href=\"#step-3%3A-install-git\">#</a></h3>\n<p>Now, you can pull your files from GitHub to your local PC and for that, you need to download and install <a href=\"https://git-scm.com/downloads\">Git</a> at your local system.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Install-Git-300x177.png\" alt=\"download and install git\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Install-Git-300x177.png\" alt=\"download and install git\"></p>\n<h3 id=\"step-4%3A-pull-to-local-folder-from-github-repository\">Step 4: Pull to Local Folder from GitHub Repository <a class=\"heading-anchor-permalink\" href=\"#step-4%3A-pull-to-local-folder-from-github-repository\">#</a></h3>\n<p>After installing Git, let’s start pulling files and folders to a local folder.</p>\n<p>Create a folder, get into it and press <strong>Right-Click</strong> &gt; <strong>Git Bash Here</strong>. It will open a window (resembling the command prompt), where you can enter Git commands to connect this folder to the online GitHub repository.</p>\n<p>Enter the following Git commands one by one.</p>\n<p>git init</p>\n<p>git add .</p>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/GitHub.git\">https://github.com/farhanayub/GitHub.git</a></p>\n<p>/* Don’t forget to replace the URL with your own. */</p>\n<p>git pull origin master</p>\n<ol>\n<li>\n<p>git init</p>\n</li>\n<li>\n<p>git add .</p>\n</li>\n<li>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/GitHub.git\">https://github.com/farhanayub/GitHub.git</a></p>\n</li>\n<li>\n<p>/* Don’t forget to replace the URL with your own. */</p>\n</li>\n<li>\n<p>git pull origin master</p>\n</li>\n</ol>\n<p>git init</p>\n<p>git add .</p>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/GitHub.git\">https://github.com/farhanayub/GitHub.git</a></p>\n<p>/* Don’t forget to replace the URL with your own. */</p>\n<p>git pull origin master</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Pull-Git-comamnds.png\" alt=\"pull wordpress files from github\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Pull-Git-comamnds.png\" alt=\"pull wordpress files from github\"></p>\n<p>It will take some time, depending on your connection speed and the size of your WordPress repository.</p>\n<p>Once the process finishes, go to your local WordPress folder. You can see that all the files from the GitHub repo have been pulled successfully.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/WordPress-files.png\" alt=\"pulled wordpress files\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/WordPress-files.png\" alt=\"pulled wordpress files\"></p>\n<h3 id=\"step-5%3A-build-development-environment-on-the-local-machine\">Step 5: Build Development Environment on the Local Machine <a class=\"heading-anchor-permalink\" href=\"#step-5%3A-build-development-environment-on-the-local-machine\">#</a></h3>\n<p>Now, let’s create a development environment for WordPress and GitHub on the local machine. For that, I’m going to install Sublime Text and a GitHub package known as GitSavvy.</p>\n<ol>\n<li>Install Sublime Text<br>\nI am using Sublime Text as my <a href=\"https://www.cloudways.com/blog/top-ide-and-code-editors-php-development/\">code editor</a>. You need to download and install the latest version of the <a href=\"https://www.sublimetext.com/\">Sublime Text editor</a>.</li>\n<li>Install GitHub Package for Sublime Text Editor<br>\nYou will find many GitHub Tools for Sublime Text. I am using <a href=\"https://github.com/divmain/GitSavvy\">GitSavvy</a>, a popular package</li>\n</ol>\n<p>GitSavvy has <a href=\"https://github.com/timbrel/GitSavvy/blob/master/docs/README.md\">a complete list of GitHub commands</a> that can help you manage your Push and Pull processes. To install the package, open the <strong>Command Palette</strong> by pressing <strong>CTRL+SHIFT+P</strong> or navigate to <strong>Tools</strong> &gt; <strong>Command Palette</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Sublime-Command-Palette.png\" alt=\"command palette\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Sublime-Command-Palette.png\" alt=\"command palette\"></p>\n<p>A new popup will appear, asking you to perform a task. Now, you need to install the <strong>Package Control</strong> that will enable adding different Sublime Text packages. Search for <strong>Install Package</strong> and press enter.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Install-Sublime-package.png\" alt=\"install package on sublime\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Install-Sublime-package.png\" alt=\"install package on sublime\"></p>\n<p>Within a few seconds, you will see a new popup displaying a complete list of available packages. Now, search and install <strong>GitSavvy</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Sublime-GitSavvy.png\" alt=\"gitsavvy package\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Sublime-GitSavvy.png\" alt=\"gitsavvy package\"></p>\n<p>On the successful installation of the GitSavvy package, a new tab will be opened displaying a welcome message from the GitSavvy team.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/welcome-message-300x110.png\" alt=\"welcome message from gitsavvy\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/welcome-message-300x110.png\" alt=\"welcome message from gitsavvy\"></p>\n<p>Note: I would suggest reading this in full as you will have a good understanding of the GitSavvy basics. You can also get help within Sublime Text by pressing <strong>CTRL+SHIFT+P</strong> and typing <strong>GitSavvy: help</strong>.</p>\n<h3 id=\"step-6%3A-connect-sublime-text-to-github\">Step 6: Connect Sublime Text to GitHub <a class=\"heading-anchor-permalink\" href=\"#step-6%3A-connect-sublime-text-to-github\">#</a></h3>\n<p>Next, you need to connect Sublime Text with GitHub so that you can easily push changes from the local environment to the WordPress repository on GitHub.</p>\n<p>Open the local WordPress folder in Sublime Text by going to <strong>File</strong> &gt; <strong>Open Folder</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/WordPress-files-Sublime.png\" alt=\"open wordpress folder \"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/WordPress-files-Sublime.png\" alt=\"open wordpress folder \"></p>\n<p>To test this environment I am going to edit the <strong>wp-login.php</strong> file and</p>\n<p>add <strong>echo “Hello World!”;</strong> at the top of the file just below <strong>&lt;?php</strong> and <strong>Save</strong> it.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/edit-WordPress-file-300x164.png\" alt=\"adding code\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/edit-WordPress-file-300x164.png\" alt=\"adding code\"></p>\n<p>Then, initialize GitHub on Sublime Text by opening the Command Palette, search for <strong>status</strong>, and press enter where it says <strong>git: status</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/status-Sublime-300x168.png\" alt=\"check file status\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/status-Sublime-300x168.png\" alt=\"check file status\"></p>\n<p>This command will compare the local folder with the GitHub repository version and let you know the name of the files that you changed.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/unstagged-file.png\" alt=\"unstagged mode\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/unstagged-file.png\" alt=\"unstagged mode\"></p>\n<p>You can see, <strong>wp-login.php</strong> is in <strong>unstaged</strong> mode. You can do a lot with this file by following the instructed commands. But first, you need to <strong>stage</strong> this file, <strong>commit</strong> it, and then <strong>push</strong> it to GitHub repository.</p>\n<p>Press <strong>S</strong> to stage this file, and check the status through the <strong>git: status</strong> command. You will notice that the file has been moved to the staged mode.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/stagged-file.png\" alt=\"stagged mode\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/stagged-file.png\" alt=\"stagged mode\"></p>\n<p>To commit this change, press <strong>c</strong>. A new tab will open describing the changes I have done in the <strong>wp-login.php</strong> file. Write “<strong>my commit”</strong> at the top of the file and press <strong>CTRL+ENTER</strong> to submit the commit.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/my-commit.png\" alt=\"submitting commit\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/my-commit.png\" alt=\"submitting commit\"></p>\n<p><strong>Note</strong>: It might ask your name and email so that the <strong>commit</strong> could be submitted under your name.</p>\n<h3 id=\"step-7%3A-push-from-local-to-github\">Step 7: Push from Local to GitHub <a class=\"heading-anchor-permalink\" href=\"#step-7%3A-push-from-local-to-github\">#</a></h3>\n<p>Now, I need to tell Sublime Text about the repository I am going to <strong>push</strong> the change. Use <strong>git: remote add</strong> command to set the remote URL.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/set-remote-url-300x193.png\" alt=\"setting remote URL\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/set-remote-url-300x193.png\" alt=\"setting remote URL\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/set-remote-name.png\" alt=\"setting remote name\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/set-remote-name.png\" alt=\"setting remote name\"></p>\n<p>Once you are connected with the GitHub repository, use <strong>git: push</strong> to push the changes.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/push-file.png\" alt=\"pushing changes\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/push-file.png\" alt=\"pushing changes\"></p>\n<p>Select the <strong>origin</strong> and the branch name <strong>master</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/origin-branch-300x179.png\" alt=\"setting branch name and origin\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/origin-branch-300x179.png\" alt=\"setting branch name and origin\"></p>\n<p>Note: If you are not logged into your GitHub account, it may ask you to login.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/pushed-file-300x196.png\" alt=\"successfully pushed file to GitHub\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/pushed-file-300x196.png\" alt=\"successfully pushed file to GitHub\"></p>\n<h3 id=\"step-8%3A-connect-github-with-live-environment\">Step 8: Connect GitHub with Live Environment <a class=\"heading-anchor-permalink\" href=\"#step-8%3A-connect-github-with-live-environment\">#</a></h3>\n<p>After connecting Sublime Text to GitHub, you need to log in to your Cloudways account and get into the WordPress application. From the left panel in the dashboard, go to <strong>Deployment via Git</strong> and tap on <strong>Generate SSH Keys</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/generate-SSH-key-300x148.png\" alt=\"generate ssh key \"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/generate-SSH-key-300x148.png\" alt=\"generate ssh key \"></p>\n<p>Click <strong>VIEW SSH KEY</strong> and download SSH Keys.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/download-SHH-key-300x149.png\" alt=\"view and download ssh key\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/download-SHH-key-300x149.png\" alt=\"view and download ssh key\"></p>\n<p>Go back to GitHub repository and navigate to <strong>Settings &gt; Deploy Keys &gt; Add Deploy Key</strong>, set title, and enter the downloaded <strong>SSH Keys</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/deploy-SSH-key-GitHub-300x179.png\" alt=\"adding ssh key in github deploy keys\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/deploy-SSH-key-GitHub-300x179.png\" alt=\"adding ssh key in github deploy keys\"></p>\n<p>As you can see, I have marked the checkbox where it says <strong>Allow write access</strong> because I am going to exchange the changes.</p>\n<p>Within your GitHub repository, navigate to the <strong>Code</strong> tab, copy <strong>SSH Key</strong>, make sure you have selected <strong>use SSH</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/use-SSH.png\" alt=\"cloning via ssh\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/use-SSH.png\" alt=\"cloning via ssh\"></p>\n<p>Now, get back to the Cloudways Platform where it says <strong>Deployment via Git</strong>. Paste the <strong>SSH Key</strong> in the <strong>Git Remote Address</strong> field, click <strong>Authenticate</strong>, and choose the branch of your Git repository (I am using <strong>master</strong>).</p>\n<p>The deployment path is left empty because I am going to connect WordPress application’s <strong>public_html</strong> folder with the GitHub repository. Now tap on <strong>Start Deployment</strong> to connect the Cloudways Platform with GitHub.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/start-deployment.png\" alt=\"connecting cloudways and github\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/start-deployment.png\" alt=\"connecting cloudways and github\"></p>\n<p>Once it is done, you will get a notification at the top right corner of the screen.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/successful-notification.png\" alt=\"message on successful repository cloning\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/successful-notification.png\" alt=\"message on successful repository cloning\"></p>\n<h3 id=\"step-9%3A-pull-changes-to-a-live-environment-from-github\">Step 9: Pull Changes to a Live Environment from GitHub <a class=\"heading-anchor-permalink\" href=\"#step-9%3A-pull-changes-to-a-live-environment-from-github\">#</a></h3>\n<p>OK so, everything is configured and working well. Now, we need to pull changes from the GitHub repository to a WordPress site on Cloudways.</p>\n<p>From Cloudways platform, get into your application and then navigate to <strong>Application Management &gt; Deployment via Git</strong>, hit the <strong>Pull</strong> button.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/pull-changes.png\" alt=\"pulling changes from github\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/pull-changes.png\" alt=\"pulling changes from github\"></p>\n<p>Bingo!</p>\n<p>All changes have been updated on the live site. Here is how they look.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/testing-file-300x226.png\" alt=\"checking pulled file\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/testing-file-300x226.png\" alt=\"checking pulled file\"></p>\n<h2 id=\"why-isn%E2%80%99t-the-pull-automated%3F\">Why Isn’t The Pull Automated? <a class=\"heading-anchor-permalink\" href=\"#why-isn%E2%80%99t-the-pull-automated%3F\">#</a></h2>\n<p>The process of pulling all the changes may seem hassle because you have to do it manually. The reason is to avoid unwanted push to GitHub repo that can happen by mistake. It is advisable to only make a Pull request when you are confident enough to apply changes on the live site.</p>\n<p>The whole live environment process might look complex, but once everything is properly configured, you just need to make changes in the local WordPress folder using the Sublime Text editor, push to GitHub and Pull on the live site.</p>\n<h2 id=\"how-to-use-wordpress-and-github-%E2%80%93-local-environment\">How to Use WordPress and GitHub – Local Environment <a class=\"heading-anchor-permalink\" href=\"#how-to-use-wordpress-and-github-%E2%80%93-local-environment\">#</a></h2>\n<p>This is the second case where you’re working on your local machine and want to push your WordPress files to the GitHub repository.</p>\n<p>Here, I’m assuming that you have a local setup ready (if not, here’s a <a href=\"https://www.cloudways.com/blog/install-wordpress-locally/\">complete guide</a> that will help you to do that).</p>\n<p>So, let’s get started!</p>\n<h3 id=\"step1%3A-download-and-install-git\">Step1: Download and Install Git <a class=\"heading-anchor-permalink\" href=\"#step1%3A-download-and-install-git\">#</a></h3>\n<p>First, you need to <a href=\"https://git-scm.com/downloads\">download</a> and install Git on your local machine. Choose the version that is compatible with your OS.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/install-and-setup-Git.png\" alt=\"installing git\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/install-and-setup-Git.png\" alt=\"installing git\"></p>\n<h3 id=\"step-2%3A-sign-in-to-github-and-create-a-new-repository\">Step 2: Sign in to GitHub and Create a New Repository <a class=\"heading-anchor-permalink\" href=\"#step-2%3A-sign-in-to-github-and-create-a-new-repository\">#</a></h3>\n<p>After installing Git, log in to your GitHub account &gt; <strong>Respostories</strong> &gt; <strong>New</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-1-300x117.png\" alt=\"github repository folder\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-1-300x117.png\" alt=\"github repository folder\"></p>\n<p>Next, you need to fill the fields and click <strong>Create repository</strong>.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/new-repository.png\" alt=\"creating a new repository\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/new-repository.png\" alt=\"creating a new repository\"></p>\n<h3 id=\"step-3%3A-push-wordpress-files-from-the-local-environment-to-github\">Step 3: Push WordPress files from the local environment to GitHub <a class=\"heading-anchor-permalink\" href=\"#step-3%3A-push-wordpress-files-from-the-local-environment-to-github\">#</a></h3>\n<p>I’m going to push the local WordPress theme files (the Twenty Twenty theme) to the GitHub repository.</p>\n<p>For this, go to the WordPress theme folder and right-click for the context menu, and click <strong>Git Bash Here.</strong></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/open-Git-Bash-300x147.png\" alt=\"git bash here\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/open-Git-Bash-300x147.png\" alt=\"git bash here\"></p>\n<p>A command prompt will pop up and all you need to do is use the following commands.</p>\n<p>git init</p>\n<ol>\n<li>git init</li>\n</ol>\n<p>git init</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Git-intialize.png\" alt=\"initialized empty git repository\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/Git-intialize.png\" alt=\"initialized empty git repository\"></p>\n<p>git add .</p>\n<ol>\n<li>git add .</li>\n</ol>\n<p>git add .</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/adding-all-files.png\" alt=\"adding all files via git\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/adding-all-files.png\" alt=\"adding all files via git\"></p>\n<p>git commit -m “first commit”</p>\n<ol>\n<li>git commit -m “first commit”</li>\n</ol>\n<p>git commit -m “first commit”</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/add-commit.png\" alt=\"first git commit\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/add-commit.png\" alt=\"first git commit\"></p>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/MyWordPress.git\">https://github.com/farhanayub/MyWordPress.git</a></p>\n<ol>\n<li>git remote add origin <a href=\"https://github.com/farhanayub/MyWordPress.git\">https://github.com/farhanayub/MyWordPress.git</a></li>\n</ol>\n<p>git remote add origin <a href=\"https://github.com/farhanayub/MyWordPress.git\">https://github.com/farhanayub/MyWordPress.git</a></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/add-GitHub-repo-URL.png\" alt=\"adding GitHub repository URL\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/add-GitHub-repo-URL.png\" alt=\"adding GitHub repository URL\"></p>\n<p>You can copy your URL from here:</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-URL-300x44.png\" alt=\"repository https url\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/GitHub-repository-URL-300x44.png\" alt=\"repository https url\"></p>\n<p>git push -u origin master</p>\n<ol>\n<li>git push -u origin master</li>\n</ol>\n<p>git push -u origin master</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/push-files.png\" alt=\"pushing all files\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/push-files.png\" alt=\"pushing all files\"></p>\n<h3 id=\"step-4%3A-check-github-repository\">Step 4: Check GitHub Repository <a class=\"heading-anchor-permalink\" href=\"#step-4%3A-check-github-repository\">#</a></h3>\n<p>Now, go to GitHub and refresh the repository page. As you can see, all theme files (the Twenty Twenty) have been successfully pushed to this GitHub repo.</p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/check-repository-300x210.png\" alt=\"checking github repository\"></p>\n<p><img src=\"https://www.cloudways.com/blog/wp-content/uploads/check-repository-300x210.png\" alt=\"checking github repository\"></p>\n<h2 id=\"final-words\">Final Words <a class=\"heading-anchor-permalink\" href=\"#final-words\">#</a></h2>\n<p>I hope this article helped you integrate WordPress with GitHub. I’ve discussed two scenarios of working with a live and a local environment of WordPress and GitHub.</p>\n<p>If you have any questions, feel free to ask in the comments section below.</p>\n",
      "id": 15
    },
    {
      "path": "Github/md-to-github.md",
      "url": "Github/md-to-github.html",
      "content": "# Convert Markdown files in Github to a full website using Github Pages and `Jekyll`\n\n- create `_config.yml` and must create on the root or your repo. Copy and paste this inside it:\n  \n```yml\nplugins:\n  - jekyll-relative-links\nrelative_links:\n  enabled: true\n  collections: true\ninclude:\n  - CONTRIBUTING.md\n  - README.md\n  - LICENSE.md\n  - COPYING.md\n  - CODE_OF_CONDUCT.md\n  - CONTRIBUTING.md\n  - ISSUE_TEMPLATE.md\n  - PULL_REQUEST_TEMPLATE.md\n```\n\n- Activate Github Pages in your repository configuration (setting->options->Github Pages in `Source` select `master branch` then `Save`).\n\n",
      "html": "<h1 id=\"convert-markdown-files-in-github-to-a-full-website-using-github-pages-and-jekyll\">Convert Markdown files in Github to a full website using Github Pages and <code>Jekyll</code> <a class=\"heading-anchor-permalink\" href=\"#convert-markdown-files-in-github-to-a-full-website-using-github-pages-and-jekyll\">#</a></h1>\n<ul>\n<li>create <code>_config.yml</code> and must create on the root or your repo. Copy and paste this inside it:</li>\n</ul>\n<pre><code class=\"language-yml\">plugins:\n  - jekyll-relative-links\nrelative_links:\n  enabled: true\n  collections: true\ninclude:\n  - CONTRIBUTING.md\n  - README.md\n  - LICENSE.md\n  - COPYING.md\n  - CODE_OF_CONDUCT.md\n  - CONTRIBUTING.md\n  - ISSUE_TEMPLATE.md\n  - PULL_REQUEST_TEMPLATE.md\n</code></pre>\n<ul>\n<li>Activate Github Pages in your repository configuration (setting-&gt;options-&gt;Github Pages in <code>Source</code> select <code>master branch</code> then <code>Save</code>).</li>\n</ul>\n",
      "id": 16
    },
    {
      "path": "Leaf-3/basic.md",
      "url": "Leaf-3/basic.html",
      "content": "<style>\nh1{\n color:blue;\n}\ncode{\ncolor:green;\n}\n</style>\nLeaf is a PHP framework that helps you create clean, simple but powerful web apps and APIs quickly and easily. Leaf introduces a cleaner and much simpler structure to the PHP language while maintaining it's flexibility. With a simple structure and a shallow learning curve, it's an excellent way to rapidly build powerful and high performant web apps and APIs.\n\n## Leaf CLI\nLeaf CLI is a simple command line tool for creating and interacting with your Leaf applications. It gives you the options to create projects, install dependencies, run scripts, scaffold items and much more. \n\n> To install Composer (../Symfony/composer.md)\n\n\nTo install cli using composer:\n\n```sh\ncomposer global require leafs/cli\n```\n\n## Creating a leaf app after installing leafs/cli:\n```sh\n$ leaf create <project-name>\n\n```sh\nThen,\n```sh\n$ cd <project-name>\n$ leaf serve\n```\n\nAnother way, `Composer`\n\n```sh\ncomposer init   # interactive\ncomposer global require leafs/cli\nleaf serve\n```\n# create index.php as above and run\nThis is a \"hello world\" application created using Leaf. After [installing](#-installation) Leaf, create an _index.php_ file.\n\n```php\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\napp()->get('/', function () {\n  response()->json([\n    'message' => 'Welcome!'\n  ]);\n});\n\napp()->run();\n```\n\nYou may quickly test this using the Leaf CLI:\n\n```bash\nleaf serve\n```\n\nOr with the built-in PHP server:\n\n```bash\nphp -S localhost:8000\n```\n\n__Definitions__:\n\n- _Modules_ are pieces of leaf's functionality which are served as installable plugins which mean's that you can have only what you need in your app but can extend on demand.\n- \n\n\n# Creating our route (get,post,...)[go to site](https://leafphp.dev/docs/introduction/first-app.html#modules)\n\nFirst, You can easily install Leaf using Composer.\n\n`$ composer require leafs/router`\n\n- creating route (notes):\n\n```bash\n$app->get('/notes', function () {\n  // fetch all notes from the database\n  // output notes as JSON\n  echo 'all notes';\n});\n```\n- Fetching notes using the `db` module to access your database:\n`$ leaf install db` or `$ composer require leafs/db`\n\n## Conntecting to db. (place it before `routes` so you can use the `$db` everywhere.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "html": "<style>\nh1{\n color:blue;\n}\ncode{\ncolor:green;\n}\n</style>\n<p>Leaf is a PHP framework that helps you create clean, simple but powerful web apps and APIs quickly and easily. Leaf introduces a cleaner and much simpler structure to the PHP language while maintaining it’s flexibility. With a simple structure and a shallow learning curve, it’s an excellent way to rapidly build powerful and high performant web apps and APIs.</p>\n<h2 id=\"leaf-cli\">Leaf CLI <a class=\"heading-anchor-permalink\" href=\"#leaf-cli\">#</a></h2>\n<p>Leaf CLI is a simple command line tool for creating and interacting with your Leaf applications. It gives you the options to create projects, install dependencies, run scripts, scaffold items and much more.</p>\n<blockquote>\n<p>To install Composer (…/Symfony/composer.md)</p>\n</blockquote>\n<p>To install cli using composer:</p>\n<pre><code class=\"language-sh\">composer global require leafs/cli\n</code></pre>\n<h2 id=\"creating-a-leaf-app-after-installing-leafs%2Fcli%3A\">Creating a leaf app after installing leafs/cli: <a class=\"heading-anchor-permalink\" href=\"#creating-a-leaf-app-after-installing-leafs%2Fcli%3A\">#</a></h2>\n<pre><code class=\"language-sh\">$ leaf create &lt;project-name&gt;\n\n```sh\nThen,\n```sh\n$ cd &lt;project-name&gt;\n$ leaf serve\n</code></pre>\n<p>Another way, <code>Composer</code></p>\n<pre><code class=\"language-sh\">composer init   # interactive\ncomposer global require leafs/cli\nleaf serve\n</code></pre>\n<h1 id=\"create-index.php-as-above-and-run\">create index.php as above and run <a class=\"heading-anchor-permalink\" href=\"#create-index.php-as-above-and-run\">#</a></h1>\n<p>This is a “hello world” application created using Leaf. After <a href=\"#-installation\">installing</a> Leaf, create an <em>index.php</em> file.</p>\n<pre><code class=\"language-php\">&lt;?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\napp()-&gt;get('/', function () {\n  response()-&gt;json([\n    'message' =&gt; 'Welcome!'\n  ]);\n});\n\napp()-&gt;run();\n</code></pre>\n<p>You may quickly test this using the Leaf CLI:</p>\n<pre><code class=\"language-bash\">leaf serve\n</code></pre>\n<p>Or with the built-in PHP server:</p>\n<pre><code class=\"language-bash\">php -S localhost:8000\n</code></pre>\n<p><strong>Definitions</strong>:</p>\n<ul>\n<li><em>Modules</em> are pieces of leaf’s functionality which are served as installable plugins which mean’s that you can have only what you need in your app but can extend on demand.</li>\n<li></li>\n</ul>\n<h1 id=\"creating-our-route-(get%2Cpost%2C%E2%80%A6)go-to-site\">Creating our route (get,post,…)<a href=\"https://leafphp.dev/docs/introduction/first-app.html#modules\">go to site</a> <a class=\"heading-anchor-permalink\" href=\"#creating-our-route-(get%2Cpost%2C%E2%80%A6)go-to-site\">#</a></h1>\n<p>First, You can easily install Leaf using Composer.</p>\n<p><code>$ composer require leafs/router</code></p>\n<ul>\n<li>creating route (notes):</li>\n</ul>\n<pre><code class=\"language-bash\">$app-&gt;get('/notes', function () {\n  // fetch all notes from the database\n  // output notes as JSON\n  echo 'all notes';\n});\n</code></pre>\n<ul>\n<li>Fetching notes using the <code>db</code> module to access your database:\n<code>$ leaf install db</code> or <code>$ composer require leafs/db</code></li>\n</ul>\n<h2 id=\"conntecting-to-db.-(place-it-before-routes-so-you-can-use-the-%24db-everywhere.\">Conntecting to db. (place it before <code>routes</code> so you can use the <code>$db</code> everywhere. <a class=\"heading-anchor-permalink\" href=\"#conntecting-to-db.-(place-it-before-routes-so-you-can-use-the-%24db-everywhere.\">#</a></h2>\n",
      "id": 17
    },
    {
      "path": "Leaf-3/helpers.md",
      "url": "Leaf-3/helpers.html",
      "content": "- **Leaf Codelabs**: \nCodelabs is a space we created to give interactive tutorials on Leaf, PHP and JS concepts that help you achieve specific results in your apps. Codelabs takes one topic or \"how-to\" and dives deep into it, giving you all the information you need to successfully complete the tutorial yourself while also explaining useful concepts along the way. see more (https://leafphp.dev/codelabs/)\n\n",
      "html": "<ul>\n<li><strong>Leaf Codelabs</strong>:\nCodelabs is a space we created to give interactive tutorials on Leaf, PHP and JS concepts that help you achieve specific results in your apps. Codelabs takes one topic or “how-to” and dives deep into it, giving you all the information you need to successfully complete the tutorial yourself while also explaining useful concepts along the way. see more (<a href=\"https://leafphp.dev/codelabs/\">https://leafphp.dev/codelabs/</a>)</li>\n</ul>\n",
      "id": 18
    },
    {
      "path": "Leaf-3/mvc.md",
      "url": "Leaf-3/mvc.html",
      "content": "# What is MVC?\n\nMVC stands for Model-View-Controller. It is a pattern that separates your application into three distinct parts:\n\n- Models: These are the classes that represent your data. They are responsible for interacting with your database, and for validating your data.\n- Views: These are the files that are responsible for displaying your data to the user. They are usually written in HTML, but can also be written in other templating languages like BareUI or Blade or frameworks like Vue or React\n- Controllers: These are the classes that are responsible for handling the user's request, and for returning the appropriate response.\n\n> guide at: (https://leafphp.dev/docs/leafmvc/)\n\n## Directory Structure:\n\nYou can completely change the directory structure to suit your needs, just be sure to update the paths in the `config.php` file.\n\n    The app directory\n\n    The app directory contains the core code of your application. It's divided into a few sub-directories:\n        console - Contains the console commands for your application. These are used to perform tasks on the command line.\n        controllers - Contains the controllers for your application. These are used to handle HTTP requests.\n        database - Contains the database related code for your application. This includes migrations, seeds, factories and schema.\n        helpers - Contains the helper functions for your application.\n        models - Contains the models for your application. These are used to interact with the database.\n        routes - Contains the routes for your application. These are used to map HTTP requests to controllers.\n        views - Contains the views for your application. These are used to render HTML responses.\n\n    The config directory\n\n    The config directory contains the configuration files for your application. These are used to configure how Leaf and it's modules interact with your application. You can find more information about the configuration files in the Configuration section.\n\n    The public directory\n\n    The public directory contains the entry point for your application, and it's also used to serve static assets. The index.php file is the entry point for your application. All requests are routed through this file by the web server. This file doesn't contain any application logic, but it does load the Composer autoloader, the application config and all your routes.\n\n    There is also an assets directory found in the public directory. It contains the static assets for your application. These are served by the web server and are accessible to users.\n\n    The storage directory\n\n    The storage directory contains the compiled views, logs and other files generated by your application. It's divided into a few sub-directories:\n        app - Contains the files generated by your application. This includes the compiled views and the files uploaded by users.\n        framework - Contains the framework generated files for your application.\n        logs - Contains the log files generated by your application.\n\n    The vendor directory\n\n    The vendor directory contains all the dependencies installed by Composer. It's automatically generated when you install the dependencies using Composer.\n\n\nExample for configure routing:\n- create html static page (change extension to `.php`) inside app/views/.....\n- Edit `app/routs/_app.php` and add your routes:\n```php\n<?php\n\n// main/index route\napp()->get('/', function () {\n    /**\n     * `render(view, [])` is the same as `echo view(view, [])`\n     */\n    render('index');\n});\n\n// make other routes:\n\n// welcome page\napp()->get('/welcome',function(){ //requeste url\n render('welcome'); // points to: /app/views/welcome.php\n});\n// .....\n```\n\n## Tutorial\n\nlive interactive tutorial at (https://leafphp.dev/tutorial/#step-1)\n\n## bootstrap\n\n`composer require twbs/bootstrap`\n\ninsde `<head>`\n` <link rel=\"stylesheet\" href=\"vendor/twbs/bootstrap/dist/css/bootstrap.css\">`\n\nand before `</body>`\n`  <script type=\"module\" src=\"/vendor/twbs/bootstrap/dist/js/bootstrap.bundle.js\"></script>`\n---\n\n\n",
      "html": "<h1 id=\"what-is-mvc%3F\">What is MVC? <a class=\"heading-anchor-permalink\" href=\"#what-is-mvc%3F\">#</a></h1>\n<p>MVC stands for Model-View-Controller. It is a pattern that separates your application into three distinct parts:</p>\n<ul>\n<li>Models: These are the classes that represent your data. They are responsible for interacting with your database, and for validating your data.</li>\n<li>Views: These are the files that are responsible for displaying your data to the user. They are usually written in HTML, but can also be written in other templating languages like BareUI or Blade or frameworks like Vue or React</li>\n<li>Controllers: These are the classes that are responsible for handling the user’s request, and for returning the appropriate response.</li>\n</ul>\n<blockquote>\n<p>guide at: (<a href=\"https://leafphp.dev/docs/leafmvc/\">https://leafphp.dev/docs/leafmvc/</a>)</p>\n</blockquote>\n<h2 id=\"directory-structure%3A\">Directory Structure: <a class=\"heading-anchor-permalink\" href=\"#directory-structure%3A\">#</a></h2>\n<p>You can completely change the directory structure to suit your needs, just be sure to update the paths in the <code>config.php</code> file.</p>\n<pre><code>The app directory\n\nThe app directory contains the core code of your application. It's divided into a few sub-directories:\n    console - Contains the console commands for your application. These are used to perform tasks on the command line.\n    controllers - Contains the controllers for your application. These are used to handle HTTP requests.\n    database - Contains the database related code for your application. This includes migrations, seeds, factories and schema.\n    helpers - Contains the helper functions for your application.\n    models - Contains the models for your application. These are used to interact with the database.\n    routes - Contains the routes for your application. These are used to map HTTP requests to controllers.\n    views - Contains the views for your application. These are used to render HTML responses.\n\nThe config directory\n\nThe config directory contains the configuration files for your application. These are used to configure how Leaf and it's modules interact with your application. You can find more information about the configuration files in the Configuration section.\n\nThe public directory\n\nThe public directory contains the entry point for your application, and it's also used to serve static assets. The index.php file is the entry point for your application. All requests are routed through this file by the web server. This file doesn't contain any application logic, but it does load the Composer autoloader, the application config and all your routes.\n\nThere is also an assets directory found in the public directory. It contains the static assets for your application. These are served by the web server and are accessible to users.\n\nThe storage directory\n\nThe storage directory contains the compiled views, logs and other files generated by your application. It's divided into a few sub-directories:\n    app - Contains the files generated by your application. This includes the compiled views and the files uploaded by users.\n    framework - Contains the framework generated files for your application.\n    logs - Contains the log files generated by your application.\n\nThe vendor directory\n\nThe vendor directory contains all the dependencies installed by Composer. It's automatically generated when you install the dependencies using Composer.\n</code></pre>\n<p>Example for configure routing:</p>\n<ul>\n<li>create html static page (change extension to <code>.php</code>) inside app/views/…</li>\n<li>Edit <code>app/routs/_app.php</code> and add your routes:</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n\n// main/index route\napp()-&gt;get('/', function () {\n    /**\n     * `render(view, [])` is the same as `echo view(view, [])`\n     */\n    render('index');\n});\n\n// make other routes:\n\n// welcome page\napp()-&gt;get('/welcome',function(){ //requeste url\n render('welcome'); // points to: /app/views/welcome.php\n});\n// .....\n</code></pre>\n<h2 id=\"tutorial\">Tutorial <a class=\"heading-anchor-permalink\" href=\"#tutorial\">#</a></h2>\n<p>live interactive tutorial at (<a href=\"https://leafphp.dev/tutorial/#step-1\">https://leafphp.dev/tutorial/#step-1</a>)</p>\n<h2 id=\"bootstrap\">bootstrap <a class=\"heading-anchor-permalink\" href=\"#bootstrap\">#</a></h2>\n<p><code>composer require twbs/bootstrap</code></p>\n<p>insde <code>&lt;head&gt;</code>\n<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;vendor/twbs/bootstrap/dist/css/bootstrap.css&quot;&gt;</code></p>\n<h2 id=\"and-before-%3C%2Fbody%3E%3Cscript-type%3D%22module%22-src%3D%22%2Fvendor%2Ftwbs%2Fbootstrap%2Fdist%2Fjs%2Fbootstrap.bundle.js%22%3E%3C%2Fscript%3E\">and before <code>&lt;/body&gt;</code>\n<code>&lt;script type=&quot;module&quot; src=&quot;/vendor/twbs/bootstrap/dist/js/bootstrap.bundle.js&quot;&gt;&lt;/script&gt;</code> <a class=\"heading-anchor-permalink\" href=\"#and-before-%3C%2Fbody%3E%3Cscript-type%3D%22module%22-src%3D%22%2Fvendor%2Ftwbs%2Fbootstrap%2Fdist%2Fjs%2Fbootstrap.bundle.js%22%3E%3C%2Fscript%3E\">#</a></h2>\n",
      "id": 19
    },
    {
      "path": "Network_Net/anonsurf_vpn_install.md",
      "url": "Network_Net/anonsurf_vpn_install.html",
      "content": "### Step 1. Clone\n\n```bash\n$ git clone  https://github.com/Und3rf10w/kali-anonsurf.git\n```\n\n> This repo was forked from ParrotSec. Und3rf10w has made some improvisations, like using DNS servers of Private Internet access. Plus, it already contains the Pandora package.\n\n### Step 2. Install\n\n```bash\n$  cd  kali-anonsurf\n# Give the installer execute permissions.\n$ chmod  +x installer.sh\n# Run the installer with ./installer.sh.\n$ ./installer.sh\n```\n**Note**: This adds keys, updates, and installs anonsurf for you.\n\n--- \nTo check whether the installation is successful, enter the following command:\n```bash\n$ anonsurf\n```\n\nThe following screen will appear if you have correctly gone through the installation process:\n\n[![](https://linuxhint.com/wp-content/uploads/2020/07/2-68.png)](https://linuxhint.com/wp-content/uploads/2020/07/2-68.png)\n\n### Step 3. Go Anonymous\n\nNow that you have a working Anonsurf module, the following simple commands will help get you started.\n\n-   **start**  starts the anon mode\n-   **stop**  finishes the anon session\n-   **restart**  combines “stop” and “start” options\n-   **start-bridge**  starts system-wide Tor tunnel with Obfs4 bridge support\n-   **changeid** restarts Tor to change identity\n-   **enable-boot**  enables Anonsurf at boot\n    -   Also by $ systemctl enable anonsurf\n-   **disable-boot** disables Anonsurf at boot\n    -   Also by $ systemctl disable anonsurf\n-   **status**  checks whether Anonsurf is working properly\n    -   Uses the  _Nyx_  application to display information about Tor service, bandwidth, nodes, etc.\n-   **myip**  checks your IP and verifies your Tor connection\n-   **dns**  replaces your DNS with the OpenNIC DNS servers.\n\nRun the following command from the terminal to launch a secure Tor channel to direct your traffic, which will change your IP every five to ten minutes\n\n```shell\n$ anonsurf start\n```\n\n**Yes, it is that simple. Be sure that you are running this command as the root user or using the sudo prefix. However, if you are a Parrot OS user, you can simply select the ‘start service’ option to anonymize your browsing immediately.**\n\n```js\n$ sudo  anonsurf start\n```\n\nThe program may prompt for a restart of various applications to clean out dangerous caches.\n\n[![](https://linuxhint.com/wp-content/uploads/2020/07/3-63.png)](https://linuxhint.com/wp-content/uploads/2020/07/3-63.png)\n\n**To check your IP at any given time, enter the following command:**\n\n```bash\n$ anonsurf myip\n```\n\nTo check the status of the module, enter the following command:\n\n```bash\n$ anonsurf status\n```\nNyx shows us information about the Tor service, bandwidth, and other information, such as nodes, average speed, etc.\n\n[![](https://linuxhint.com/wp-content/uploads/2020/07/4-60-1024x263.png)](https://linuxhint.com/wp-content/uploads/2020/07/4-60.png)\n\n**A simple stop command ends the session and wipes clean any traces.**\n\n```bash\n$ anonsurf stop\n```\n\n[![](https://linuxhint.com/wp-content/uploads/2020/07/5-52.png)](https://linuxhint.com/wp-content/uploads/2020/07/5-52.png)\n",
      "html": "<h3 id=\"step-1.-clone\">Step 1. Clone <a class=\"heading-anchor-permalink\" href=\"#step-1.-clone\">#</a></h3>\n<pre><code class=\"language-bash\">$ git clone  https://github.com/Und3rf10w/kali-anonsurf.git\n</code></pre>\n<blockquote>\n<p>This repo was forked from ParrotSec. Und3rf10w has made some improvisations, like using DNS servers of Private Internet access. Plus, it already contains the Pandora package.</p>\n</blockquote>\n<h3 id=\"step-2.-install\">Step 2. Install <a class=\"heading-anchor-permalink\" href=\"#step-2.-install\">#</a></h3>\n<pre><code class=\"language-bash\">$  cd  kali-anonsurf\n# Give the installer execute permissions.\n$ chmod  +x installer.sh\n# Run the installer with ./installer.sh.\n$ ./installer.sh\n</code></pre>\n<p><strong>Note</strong>: This adds keys, updates, and installs anonsurf for you.</p>\n<hr>\n<p>To check whether the installation is successful, enter the following command:</p>\n<pre><code class=\"language-bash\">$ anonsurf\n</code></pre>\n<p>The following screen will appear if you have correctly gone through the installation process:</p>\n<p><a href=\"https://linuxhint.com/wp-content/uploads/2020/07/2-68.png\"><img src=\"https://linuxhint.com/wp-content/uploads/2020/07/2-68.png\" alt=\"\"></a></p>\n<h3 id=\"step-3.-go-anonymous\">Step 3. Go Anonymous <a class=\"heading-anchor-permalink\" href=\"#step-3.-go-anonymous\">#</a></h3>\n<p>Now that you have a working Anonsurf module, the following simple commands will help get you started.</p>\n<ul>\n<li><strong>start</strong>  starts the anon mode</li>\n<li><strong>stop</strong>  finishes the anon session</li>\n<li><strong>restart</strong>  combines “stop” and “start” options</li>\n<li><strong>start-bridge</strong>  starts system-wide Tor tunnel with Obfs4 bridge support</li>\n<li><strong>changeid</strong> restarts Tor to change identity</li>\n<li><strong>enable-boot</strong>  enables Anonsurf at boot\n<ul>\n<li>Also by $ systemctl enable anonsurf</li>\n</ul>\n</li>\n<li><strong>disable-boot</strong> disables Anonsurf at boot\n<ul>\n<li>Also by $ systemctl disable anonsurf</li>\n</ul>\n</li>\n<li><strong>status</strong>  checks whether Anonsurf is working properly\n<ul>\n<li>Uses the  <em>Nyx</em>  application to display information about Tor service, bandwidth, nodes, etc.</li>\n</ul>\n</li>\n<li><strong>myip</strong>  checks your IP and verifies your Tor connection</li>\n<li><strong>dns</strong>  replaces your DNS with the OpenNIC DNS servers.</li>\n</ul>\n<p>Run the following command from the terminal to launch a secure Tor channel to direct your traffic, which will change your IP every five to ten minutes</p>\n<pre><code class=\"language-shell\">$ anonsurf start\n</code></pre>\n<p><strong>Yes, it is that simple. Be sure that you are running this command as the root user or using the sudo prefix. However, if you are a Parrot OS user, you can simply select the ‘start service’ option to anonymize your browsing immediately.</strong></p>\n<pre><code class=\"language-js\">$ sudo  anonsurf start\n</code></pre>\n<p>The program may prompt for a restart of various applications to clean out dangerous caches.</p>\n<p><a href=\"https://linuxhint.com/wp-content/uploads/2020/07/3-63.png\"><img src=\"https://linuxhint.com/wp-content/uploads/2020/07/3-63.png\" alt=\"\"></a></p>\n<p><strong>To check your IP at any given time, enter the following command:</strong></p>\n<pre><code class=\"language-bash\">$ anonsurf myip\n</code></pre>\n<p>To check the status of the module, enter the following command:</p>\n<pre><code class=\"language-bash\">$ anonsurf status\n</code></pre>\n<p>Nyx shows us information about the Tor service, bandwidth, and other information, such as nodes, average speed, etc.</p>\n<p><a href=\"https://linuxhint.com/wp-content/uploads/2020/07/4-60.png\"><img src=\"https://linuxhint.com/wp-content/uploads/2020/07/4-60-1024x263.png\" alt=\"\"></a></p>\n<p><strong>A simple stop command ends the session and wipes clean any traces.</strong></p>\n<pre><code class=\"language-bash\">$ anonsurf stop\n</code></pre>\n<p><a href=\"https://linuxhint.com/wp-content/uploads/2020/07/5-52.png\"><img src=\"https://linuxhint.com/wp-content/uploads/2020/07/5-52.png\" alt=\"\"></a></p>\n",
      "id": 20
    },
    {
      "path": "Network_Net/dd-wrt.md",
      "url": "Network_Net/dd-wrt.html",
      "content": "\nApplication\n\n-   [Basic Setup](http://10.10.10.1/help/HSetup.asp)\n-   [DDNS](http://10.10.10.1/help/HDDNS.asp)\n-   [MAC Address Clone](http://10.10.10.1/help/HWanMAC.asp)\n-   [Advanced Routing](http://10.10.10.1/help/HRouting.asp)\n-   [Networking](http://10.10.10.1/help/HNetworking.asp)\n\nWireless\n\n-   [Basic Settings](http://10.10.10.1/help/HWireless.asp)\n\n`Wireless Physical Interface ath0 [2.4 GHz]\nPhysical Interface ath0 - SSID [dd-wrt] HWAddr [50:C7:BF:39:75:74]\n\nWireless Network Name (SSID)\n\nThe SSID is the network name shared among all devices in a wireless network. The SSID must be identical for all devices in the wireless network. It is case-sensitive and must not exceed 32 alphanumeric characters, which may be any keyboard character. Make sure this setting is the same for all devices in your wireless network.  \n\n#### Note\n\nFor added security, it is recommended to change the default SSID dd-wrt to a unique name of your choice.\n\n**Wireless Channel**\n\nAll devices in your wireless network must use the **same channel** in order to function correctly. Try to avoid conflicts with other wireless networks by choosing a channel where the upper and lower three channels are not in use.\n\n\n\n\n---\n-   [Radius](http://10.10.10.1/help/Hradauth.asp)\n\n-   [Wireless Security](http://10.10.10.1/help/HWPA.asp)\n-   [MAC Filter](http://10.10.10.1/help/HWirelessMAC.asp)\n-   [Advanced Settings](http://10.10.10.1/help/HWirelessAdvanced.asp)\n- ---\n\n\n-   [WDS](http://10.10.10.1/help/HWDS.asp)\nWDS (Wireless Distribution System) is a Wireless Access Point mode that enables wireless bridging in which WDS APs communicate only with each other only (without allowing for wireless clients or stations to access them), and/or wireless repeating in which APs communicate both with each other and with wireless stations (at the expense of half the throughput). This firmware currently supports two types of WDS, LAN and Point to Point.\n\na. LAN-type WDS\n\nThis is the easiest, and currently most common, type of WDS used for linking LANs. It is very simple to setup and requires no extra routing protocols or knowledge of networking. Simply put, it is pure bridging. A simple example would be extending the range of an existing AP by setting up a 2nd AP and connecting it to the first using LAN-type WDS.\n\n1.  Make sure you are using the same [Wireless Settings](http://10.10.10.1/help/HWireless.asp) on both routers and not any type of [Wireless Security](http://10.10.10.1/help/HWPA.asp).\n2.  Find a drop-down selection that has _Disabled_ displayed. Click this and select _LAN_, do the same on the other router.\n3.  On the first router, take the numbers next to _Wireless MAC_ and enter them in to the second router on the same line that you set to \"LAN\".\n4.  Take the Wireless MAC from the second router and enter them on the first router.\n5.  Check for any typing errors and then click _Save Settings_.\n6.  Go to the [Wireless Status](http://10.10.10.1/help/HStatusWireless.asp) page. You should see _WDS Link_ and the Wireless MAC of the other router listed, with a signal reading. If the signal is \"0dBm\" then there may be something wrong. Check your antenna connections and configuration settings, and try again.\n7.  Once you have a good signal (-70dBm to -30dBm, -70dBm being lowest), you can change the _Internet Connection Type_ on the [Basic Setup](http://10.10.10.1/help/HSetup.asp) page of the second router to _Disabled_ and set the _Gateway_ to the LAN IP Address of the first router. You can now run normal tests to check if you are connected (like ping).\n\n  \n  \n\n#### Note\n\nWDS is only available in _AP_ mode. Also Wireless encryption _WPA2_ and Wireless network mode _B-Only_ are not supported under WDS.\n\n---\n\n\n**Services**\n\n-   [Services](http://10.10.10.1/help/HServices.asp)\nRFlow / MACupd\n\nRFlow Collector is a traffic monitoring and management tool that allows to watch a complete network of DD-WRT routers.  \n\n-   RFlow Default port is 2055\n-   MACupd Default port is 2056\n-   Interval = 10 seems messages will be sent to server each 10 seconds\n-   Interface : choose which interface to monitor\n\n  \n\n#### Note\n\nFor each RFlow and MACupd server IP : enter the IP address of the listening server (win32 PC with RFlow Collector).\n\nSecure Shell\n\nEnabling SSHd allows you to access the Linux OS of your router with an SSH client (Putty works well on Windows, for example).\n\n-   Password login – allow login with the router password (username is root)\n-   SSHd Port – the port number for SSHd (default is 22)\n-   Authorized Keys – here you paste your public keys to enable key-based login (more secure than a simple password)\n\nSystem Log\n\nEnable Syslogd to capture system messages. By default they will be collected in the local file /var/log/messages. To send them to another system, enter the IP address of a remote syslog server.\n\nTelnet\n\nEnable a telnet server to connect to the router with telnet. The username is root and the password is the router password.  \n  \n\n#### Note\n\nIf you using the router in an untrusted environment (for example as a public hotspot), it is strongly recommended to use SSHd and deactivate telnet.\n\n\n\n-   [VPN](http://10.10.10.1/help/HPPTP.asp)\n-   [USB](http://10.10.10.1/help/HUSB.asp)\n-   [NAS](http://10.10.10.1/help/HNAS.asp)\n-   [Hotspot](http://10.10.10.1/help/HHotspot.asp)\n\nSecurity\n\n-   [Firewall](http://10.10.10.1/help/HFirewall.asp)\n-   [VPN Passthrough](http://10.10.10.1/help/HVPN.asp)\n\nAccess Restrictions\n\n-   [WAN Access](http://10.10.10.1/help/HFilters.asp)\n\nNAT / QoS\n\n-   [Port Range Forwarding](http://10.10.10.1/help/HForward.asp)\n-   [Port Forwarding](http://10.10.10.1/help/HForwardSpec.asp)\n-   [Port Triggering](http://10.10.10.1/help/HTrigger.asp)\n-   [UPnP](http://10.10.10.1/help/HUPnP.asp)\n-   [DMZ](http://10.10.10.1/help/HDMZ.asp)\n-   [QoS](http://10.10.10.1/help/HQos.asp)\n\nAdministration\n\n-   [Management](http://10.10.10.1/help/HManagement.asp)\n-   [Keep Alive](http://10.10.10.1/help/HAlive.asp)\n-   [Commands](http://10.10.10.1/help/HDiagnostics.asp)\n-   [WOL](http://10.10.10.1/help/HWol.asp)\n-   [Factory Defaults](http://10.10.10.1/help/HDefault.asp)\n-   [Firmware Upgrade](http://10.10.10.1/help/HUpgrade.asp)\n-   [Backup](http://10.10.10.1/help/HBackup.asp)\n\nStatus\n\n-   [Router](http://10.10.10.1/help/HStatus.asp)\n-   [LAN](http://10.10.10.1/help/HStatusLan.asp)\n-   [Wireless](http://10.10.10.1/help/HStatusWireless.asp)\n\nOnline / DD-WRT Community\n\n-   [DD-WRT Homepage](http://www.dd-wrt.com)\n-   [Forum](http://www.dd-wrt.com/forum)\n-   [Wiki](http://www.dd-wrt.com/wiki)\n-   [Bugtracker](http://www.dd-wrt.com/bugtracker)",
      "html": "<p>Application</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HSetup.asp\">Basic Setup</a></li>\n<li><a href=\"http://10.10.10.1/help/HDDNS.asp\">DDNS</a></li>\n<li><a href=\"http://10.10.10.1/help/HWanMAC.asp\">MAC Address Clone</a></li>\n<li><a href=\"http://10.10.10.1/help/HRouting.asp\">Advanced Routing</a></li>\n<li><a href=\"http://10.10.10.1/help/HNetworking.asp\">Networking</a></li>\n</ul>\n<p>Wireless</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HWireless.asp\">Basic Settings</a></li>\n</ul>\n<p>`Wireless Physical Interface ath0 [2.4 GHz]\nPhysical Interface ath0 - SSID [dd-wrt] HWAddr [50:C7:BF:39:75:74]</p>\n<p>Wireless Network Name (SSID)</p>\n<p>The SSID is the network name shared among all devices in a wireless network. The SSID must be identical for all devices in the wireless network. It is case-sensitive and must not exceed 32 alphanumeric characters, which may be any keyboard character. Make sure this setting is the same for all devices in your wireless network.</p>\n<h4 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h4>\n<p>For added security, it is recommended to change the default SSID dd-wrt to a unique name of your choice.</p>\n<p><strong>Wireless Channel</strong></p>\n<p>All devices in your wireless network must use the <strong>same channel</strong> in order to function correctly. Try to avoid conflicts with other wireless networks by choosing a channel where the upper and lower three channels are not in use.</p>\n<hr>\n<ul>\n<li>\n<p><a href=\"http://10.10.10.1/help/Hradauth.asp\">Radius</a></p>\n</li>\n<li>\n<p><a href=\"http://10.10.10.1/help/HWPA.asp\">Wireless Security</a></p>\n</li>\n<li>\n<p><a href=\"http://10.10.10.1/help/HWirelessMAC.asp\">MAC Filter</a></p>\n</li>\n<li>\n<p><a href=\"http://10.10.10.1/help/HWirelessAdvanced.asp\">Advanced Settings</a></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HWDS.asp\">WDS</a>\nWDS (Wireless Distribution System) is a Wireless Access Point mode that enables wireless bridging in which WDS APs communicate only with each other only (without allowing for wireless clients or stations to access them), and/or wireless repeating in which APs communicate both with each other and with wireless stations (at the expense of half the throughput). This firmware currently supports two types of WDS, LAN and Point to Point.</li>\n</ul>\n<p>a. LAN-type WDS</p>\n<p>This is the easiest, and currently most common, type of WDS used for linking LANs. It is very simple to setup and requires no extra routing protocols or knowledge of networking. Simply put, it is pure bridging. A simple example would be extending the range of an existing AP by setting up a 2nd AP and connecting it to the first using LAN-type WDS.</p>\n<ol>\n<li>Make sure you are using the same <a href=\"http://10.10.10.1/help/HWireless.asp\">Wireless Settings</a> on both routers and not any type of <a href=\"http://10.10.10.1/help/HWPA.asp\">Wireless Security</a>.</li>\n<li>Find a drop-down selection that has <em>Disabled</em> displayed. Click this and select <em>LAN</em>, do the same on the other router.</li>\n<li>On the first router, take the numbers next to <em>Wireless MAC</em> and enter them in to the second router on the same line that you set to “LAN”.</li>\n<li>Take the Wireless MAC from the second router and enter them on the first router.</li>\n<li>Check for any typing errors and then click <em>Save Settings</em>.</li>\n<li>Go to the <a href=\"http://10.10.10.1/help/HStatusWireless.asp\">Wireless Status</a> page. You should see <em>WDS Link</em> and the Wireless MAC of the other router listed, with a signal reading. If the signal is “0dBm” then there may be something wrong. Check your antenna connections and configuration settings, and try again.</li>\n<li>Once you have a good signal (-70dBm to -30dBm, -70dBm being lowest), you can change the <em>Internet Connection Type</em> on the <a href=\"http://10.10.10.1/help/HSetup.asp\">Basic Setup</a> page of the second router to <em>Disabled</em> and set the <em>Gateway</em> to the LAN IP Address of the first router. You can now run normal tests to check if you are connected (like ping).</li>\n</ol>\n<h4 id=\"note-2\">Note <a class=\"heading-anchor-permalink\" href=\"#note-2\">#</a></h4>\n<p>WDS is only available in <em>AP</em> mode. Also Wireless encryption <em>WPA2</em> and Wireless network mode <em>B-Only</em> are not supported under WDS.</p>\n<hr>\n<p><strong>Services</strong></p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HServices.asp\">Services</a>\nRFlow / MACupd</li>\n</ul>\n<p>RFlow Collector is a traffic monitoring and management tool that allows to watch a complete network of DD-WRT routers.</p>\n<ul>\n<li>RFlow Default port is 2055</li>\n<li>MACupd Default port is 2056</li>\n<li>Interval = 10 seems messages will be sent to server each 10 seconds</li>\n<li>Interface : choose which interface to monitor</li>\n</ul>\n<h4 id=\"note-3\">Note <a class=\"heading-anchor-permalink\" href=\"#note-3\">#</a></h4>\n<p>For each RFlow and MACupd server IP : enter the IP address of the listening server (win32 PC with RFlow Collector).</p>\n<p>Secure Shell</p>\n<p>Enabling SSHd allows you to access the Linux OS of your router with an SSH client (Putty works well on Windows, for example).</p>\n<ul>\n<li>Password login – allow login with the router password (username is root)</li>\n<li>SSHd Port – the port number for SSHd (default is 22)</li>\n<li>Authorized Keys – here you paste your public keys to enable key-based login (more secure than a simple password)</li>\n</ul>\n<p>System Log</p>\n<p>Enable Syslogd to capture system messages. By default they will be collected in the local file /var/log/messages. To send them to another system, enter the IP address of a remote syslog server.</p>\n<p>Telnet</p>\n<p>Enable a telnet server to connect to the router with telnet. The username is root and the password is the router password.</p>\n<h4 id=\"note-4\">Note <a class=\"heading-anchor-permalink\" href=\"#note-4\">#</a></h4>\n<p>If you using the router in an untrusted environment (for example as a public hotspot), it is strongly recommended to use SSHd and deactivate telnet.</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HPPTP.asp\">VPN</a></li>\n<li><a href=\"http://10.10.10.1/help/HUSB.asp\">USB</a></li>\n<li><a href=\"http://10.10.10.1/help/HNAS.asp\">NAS</a></li>\n<li><a href=\"http://10.10.10.1/help/HHotspot.asp\">Hotspot</a></li>\n</ul>\n<p>Security</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HFirewall.asp\">Firewall</a></li>\n<li><a href=\"http://10.10.10.1/help/HVPN.asp\">VPN Passthrough</a></li>\n</ul>\n<p>Access Restrictions</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HFilters.asp\">WAN Access</a></li>\n</ul>\n<p>NAT / QoS</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HForward.asp\">Port Range Forwarding</a></li>\n<li><a href=\"http://10.10.10.1/help/HForwardSpec.asp\">Port Forwarding</a></li>\n<li><a href=\"http://10.10.10.1/help/HTrigger.asp\">Port Triggering</a></li>\n<li><a href=\"http://10.10.10.1/help/HUPnP.asp\">UPnP</a></li>\n<li><a href=\"http://10.10.10.1/help/HDMZ.asp\">DMZ</a></li>\n<li><a href=\"http://10.10.10.1/help/HQos.asp\">QoS</a></li>\n</ul>\n<p>Administration</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HManagement.asp\">Management</a></li>\n<li><a href=\"http://10.10.10.1/help/HAlive.asp\">Keep Alive</a></li>\n<li><a href=\"http://10.10.10.1/help/HDiagnostics.asp\">Commands</a></li>\n<li><a href=\"http://10.10.10.1/help/HWol.asp\">WOL</a></li>\n<li><a href=\"http://10.10.10.1/help/HDefault.asp\">Factory Defaults</a></li>\n<li><a href=\"http://10.10.10.1/help/HUpgrade.asp\">Firmware Upgrade</a></li>\n<li><a href=\"http://10.10.10.1/help/HBackup.asp\">Backup</a></li>\n</ul>\n<p>Status</p>\n<ul>\n<li><a href=\"http://10.10.10.1/help/HStatus.asp\">Router</a></li>\n<li><a href=\"http://10.10.10.1/help/HStatusLan.asp\">LAN</a></li>\n<li><a href=\"http://10.10.10.1/help/HStatusWireless.asp\">Wireless</a></li>\n</ul>\n<p>Online / DD-WRT Community</p>\n<ul>\n<li><a href=\"http://www.dd-wrt.com\">DD-WRT Homepage</a></li>\n<li><a href=\"http://www.dd-wrt.com/forum\">Forum</a></li>\n<li><a href=\"http://www.dd-wrt.com/wiki\">Wiki</a></li>\n<li><a href=\"http://www.dd-wrt.com/bugtracker\">Bugtracker</a></li>\n</ul>\n",
      "id": 21
    },
    {
      "path": "Network_Net/dd-wrt_multiple_bssids.md",
      "url": "Network_Net/dd-wrt_multiple_bssids.html",
      "content": "\nWas this HowTo useful to you?  \n\nRevision:\n\n \n\n**v8.0** ([history](http://www.pennock.nl/dd-wrt/Multiple_BSSIDs.html#revhistory))\n\nLast update:\n\n \n\n**Mar 9, 2014**\n\n  \nI have seen several HowTos, tutorials, and forum posts about how to setup multiple (B)SSIDs using [DD-WRT](http://www.dd-wrt.com/) and although most of these write-ups indeed helped creating multiple SSIDs, none gave me an actual _working_ virtual SSID. Most of the time I wasn't even able to connect to the new virtual interface and in those rare occassions that it did connect, I never got an IP address. The reason none of these write-ups work, is because they are all based on the same base tutorial which, for one reason or the other, no longer works reliably.\n\nI took all these write-ups and figured out what is needed to get it to work again. The following HowTo is what worked for me on my **Linksys WRT54GL v1.1** and **Linksys WRT310N**. It created two BSSIDs, each with their own MAC address so any device is able to connect to either BSSID without getting utterly confused. The main BSSID has access to the internet and to your local network. The second (virtual) BSSID only has access to the internet.\n\nI was only able to test it on my routers, so I would appreciate it if you dropped me an email [here](mailto:dd-wrt@pennock.nl) to let me know if this worked for you too (or not).\n\nBefore you continue...\n----------------------\n\nTo make things easier for you, I made this HowTo _interactive_ meaning I will ask you now to enter some information about the setup you wish to create. After you have entered the information, this HowTo will automatically change to reflect your setup. If you are unsure what to enter here, just leave it as it is - you will be able to create multiple BSSIDs just fine with the default values.\n\n**Enter the information and press **\"Done\"** when done:**\n\n**Main Wireless Interface**\n\n**Virtual Wireless Interface**\n\n**Wireless Network Name (SSID)**\n\n**IP Address**\n\n...\n\n...\n\n**Subnet Mask**\n\n...\n\n...\n\n**Start IP Address (DHCP)**\n\n192.168.1.\n\n192.168.2.\n\n**End IP Address (DHCP)**\n\n192.168.1.\n\n192.168.2.\n\n**Security Mode**\n\n**WPA Algorithms**\n\n  \n\nBSSID vs SSID\n-------------\n\nThere's much confusion about what the difference is between a SSID and a **B**SSID. Some routers can only create multiple SSIDs while others can create multiple **B**SSIDs. For now, it's only important to know that multiple **B**SSIDs is what you want if your router supports it. A BSSID is a truly seperate interface with its own MAC address, while multiple SSIDs share the same MAC address confusing many wireless clients (like PDAs) causing them to be unable to see some or all of the created wireless networks.\n\nWhat will my router support?\n----------------------------\n\nIf you want to know if your router supports multiple SSIDs at all, you will need to make a telnet connection to your router and query the wl0\\_corerev variable.\n\nIn Windows, click **Start**, **Run** and in the window that appears, type cmd and click **OK**.\n\n![](http://www.pennock.nl/dd-wrt/images/mb_cmd_2.gif)\n\n  \nA Command Prompt window will now open. In this window type\n\ntelnet 192.168.1.1\n\n  \nand press Enter. You will now see the DD-WRT login screen.\n\n![](http://www.pennock.nl/dd-wrt/images/mb_login_2.gif)\n\n  \nEnter \"**root**\" (without the quotes) as your login name, press Enter, then enter your password and press Enter again. You will now see yet another prompt. At the prompt, type nvram get wl0\\_corerev and press Enter.\n\n![](http://www.pennock.nl/dd-wrt/images/mb_corerev_2.gif)\n\n  \nA number will be printed, here's what that number means for you:\n\n0 - 4\n\nYou are out of luck. Your router will **not** do multiple (B)SSIDs.\n\n5 - 8\n\nYour router _will_ do multiple SSIDs, but not multiple **B**SSIDs.\n\n9 and up\n\nYour router will do multiple BSSIDs. Kudos!\n\n  \nTo close the telnet session, type \"exit\" at the prompt.\n\nWhich version of DD-WRT do I need?\n----------------------------------\n\nFor newer routers, check the [Router Database](http://www.dd-wrt.com/site/support/router-database) on dd-wrt.com to see what the latest stable version is for your router.\n\nFor older routers, either check the [Router Database](http://www.dd-wrt.com/site/support/router-database), or get one of EKO's TNG builds. You can find them here:\n\n  \nA higher number means it's a newer build. Always try the highest number first and if that gives problems, try a lower number. You will also notice there are several versions for each build. The most notably are the \"VINT\" and the \"NEWD\" branches. \"VINT\" stands for \"Vintage\" and you need that if you have a wl0\\_corerev smaller than 9. If you have a wl0\\_corerev of 9 or up, use one of the \"NEWD\" versions. \"NEWD\" stands for \"New Driver\". Within each of these two branches, there are more subversions like \"mini\", \"mega\", \"voip\". What this means exactly can be found elsewhere on the net. If you are unsure which file to get, just go for the \"std\" version. Chances are that's what you need anyway.\n\nFlashing DD-WRT\n---------------\n\nYou can also find many very good tutorials on the interwebs on how to flash a new version of DD-WRT to your router so I won't go into much detail here. A few things to remember though. First and foremost, if your router still has its original firmware and this is the first time you are going to flash dd-wrt, please check the [Supported Devices](http://www.dd-wrt.com/wiki/index.php/Supported_Devices#Supported_Devices) list for any special instructions (which can be found under \"Notes for running dd-wrt\"). Sometimes you need to flash a special version first before you can flash any of the other versions. Another thing to remember is that it's best to reset the router to its default settings **before** and **after** you flash the new firmware. It's not always necessary but it rules out certain problems you might encounter when you don't.\n\nThere are two ways to reset the router to its factory defaults. You can either _telnet_ to your router and at the prompt type these two commands:\n\nerase nvram  \nreboot\n\n  \nOr you can reset the router to its default settings using the 30/30/30/**30** method (yes, I added an extra \"30\"):\n\n*   Remove all cables (except the power cable) from the router.\n*   Press and hold the reset button (at the back of the router) for 30 seconds.\n*   While keeping the reset button pressed, remove the power cable and wait another 30 seconds.\n*   Still while keeping the reset button pressed, reconnect the power cable and wait another 30 seconds.\n*   Finally, release the reset button and wait another 30 seconds.\n*   Reboot your router (by power cycling it)\n\n  \nPersonally, I prefer the first method for resetting my modem. :)\n\nSetting up Multiple (B)SSIDs\n----------------------------\n\nFrom this point onwards, I assume you already flashed the appropriate version of DD-WRT to your router. Now it's finally time to create a second (virtual) SSID.\n\nAll existing HowTos I found, were creating the new virtual wireless interface as an \"Unbridged\" interface. And this is actually where it goes wrong. We are going to do something different. We are going to create a new bridge called \"br1\" and hook the new virtual wireless interface to this new bridge.\n\nFirst point your webbrowser to your router's web interface by typing \"http://192.168.1.1\" in your browser's address bar. If all is well, you will see something like this:\n\n![](http://www.pennock.nl/dd-wrt/images/ddwrt_s01_2.gif)\n\n  \nNow click the Wireless tab. A screen with your existing wireless interfaces will appear:\n\n![](http://www.pennock.nl/dd-wrt/images/ddwrt_s02_2.gif)\n\n  \nClick the Add button just below Virtual Interfaces and enter the following information for the new interface:\n\nWireless Network Name (SSID)\n\n**SSIDVirtual**\n\nOr whatever name you want to give this interface.\n\nWireless SSID Broadcast\n\n**Enabled**\n\nIf you don't want the SSID to be visible, choose **Disabled** here.\n\nAP Isolation\n\n**Disabled**\n\nYou can enable this if you don't want clients on this interface to talk to each other.\n\nNetwork Configuration\n\n**Bridged**\n\nThat's **not** a typo! Every other HowTo says you should choose **UN**bridged, but you should really choose **Bridged** here!\n\n  \nClick the Save button. Your screen should look something like this:\n\n![](http://www.pennock.nl/dd-wrt/images/ddwrt_s03_2.gif)\n\n  \nNow click the Wireless Security sub-tab. For each interface, choose the appropriate security mode and enter a key (if necessary). Click the Save button. Your screen will now look something like this:\n\n![](http://www.pennock.nl/dd-wrt/images/ddwrt_s04_2.gif)\n\n  \nClick the Services tab, and scroll down to the DNSMasq  frame. In the \"Additional DNSMasq Options\" input box, enter the following:\n\ninterface=br1  \ndhcp-range=br1,192.168.2.100,192.168.2.149,255.255.255.0,1440m\n\n  \nClick the Save button.\n\nThis tells the router that (amongst other things) the new bridge will give connecting clients an IP address in the 192.168.2.100 - 192.168.2.149 range.\n\nNow go to the Administration tab, sub-tab Commands. In the input box below Command Shell , enter the following:\n\nif \\[ \"\\`nvram get wan\\_proto\\`\" = \"pppoe\" \\]; then  \n  wanif=\"\\`nvram get pppoe\\_ifname\\`\"  \nelse  \n  wanif=\"\\`nvram get wan\\_ifname\\`\"  \nfi\n\n\\# Make sure br1 has access to the internet:  \niptables -I INPUT -i br1 -m state --state NEW -j logaccept  \niptables -I FORWARD -i br1 -o $wanif -m state --state NEW -j ACCEPT  \n\\# Keep the two wireless networks from talking to each other:  \niptables -I FORWARD -i br0 -o br1 -j logdrop  \niptables -I FORWARD -i br1 -o br0 -j logdrop  \n\\# Keep br1 from accessing the router:  \niptables -I INPUT -i br1 -p tcp --dport telnet -j REJECT --reject-with tcp-reset  \niptables -I INPUT -i br1 -p tcp --dport ssh -j REJECT --reject-with tcp-reset  \niptables -I INPUT -i br1 -p tcp --dport www -j REJECT --reject-with tcp-reset  \niptables -I INPUT -i br1 -p tcp --dport https -j REJECT --reject-with tcp-reset\n\niptables -t nat -I POSTROUTING -o \\`get\\_wanface\\` -j SNAT --to \\`nvram get wan\\_ipaddr\\`\n\n  \nClick the Save Firewall button.\n\nIn the same input box (which is now empty again), we need to enter a startup script to create the new bridge, move the virtual wireless interface to it, and setup the new interface's IP address. But for it all to work, we need to properly setup NAS. But **how** NAS needs to be setup depends on the security settings for each wireless interface. At the start of this HowTo, I asked you to enter the proper security settings for each interface. This information has been used to generate the code below. If you need different security settings, change it at the start of the HowTo and come back here.\n\n\\# Set some important values:  \nnvram set dnsmasq\\_enable=1  \nif \\[ \"\\`nvram get dhcpfwd\\_enable\\`\" = \"0\" \\]; then  \n  nvram set dns\\_dnsmasq=1  \n  nvram set dhcp\\_dnsmasq=1  \n  nvram set auth\\_dnsmasq=1  \nfi\n\n\\# Create bridge br1, move the virtual wireless interface to it,  \n\\# and setup the interface's IP address:  \nbrctl addbr br1  \nbrctl delif br0 wl0.1  \nbrctl addif br1 wl0.1  \nifconfig br1 192.168.2.1 netmask 255.255.255.0  \nifconfig br1 up\n\n\\# Properly setup NAS  \nkillall nas\n\n\\# Main:  \nnas -P /tmp/nas.wl0lan.pid -H 34954 -l br0 \\\\  \n    -i \"\\`nvram get wl0\\_ifname\\`\" -A -m 4 -k \"\\`nvram get wl0\\_wpa\\_psk\\`\" \\\\  \n    -s \"\\`nvram get wl0\\_ssid\\`\" -w 2 \\\\  \n    -g \"\\`nvram get wl0\\_wpa\\_gtk\\_rekey\\`\"\n\n\\# Virtual interface #1:  \nnas -P /tmp/nas.wl0.1lan.pid -H 34954 -l br1 \\\\  \n    -i wl0.1 -A -m 4 -k \"\\`nvram get wl0.1\\_wpa\\_psk\\`\" \\\\  \n    -s \"\\`nvram get wl0.1\\_ssid\\`\" -w 2 \\\\  \n    -g \"\\`nvram get wl0.1\\_wpa\\_gtk\\_rekey\\`\"\n\n  \nNow copy and paste the code from the box above into the Command Shell  input box.\n\nClick the Save Startup button.\n\nFinally, click the Management sub-tab, scroll down and click the Reboot Router button.\n\nWait until your router has rebooted itself and you should now have two working (B)SSIDs!\n\nIf you can't connect to the virtual interface, wait 5 minutes and try again. Sometimes, for reason completely unknown to me, it takes a few minutes before the virtual interface actually starts working. If waiting doesn't help, then you probably have some left-over configuration settings that are messing with the virtual interface. Try resetting your router to its factory default (see the part about resetting to factory default under \"Flashing DD-WRT\" above) and try the HowTo again. Be aware though that resetting your router to factory default means you will loose all your settings like port forwarding rules, MAC cloning, etc. So write down all your settings before resetting your router.\n\nRevision History  \n\nv8.0\n\n \n\nMar 9, 2014\n\n \n\nApparently this HowTo didn't work (properly) with newer routers. People were able to create multiple BSSIDs but the virtual wireless interfaces had no internet access. To solve this I've made some changes to the firewall script.\n\nv7.0\n\n \n\nSept 7, 2009\n\n \n\nSome people who connected to the internet through PPPoE reported the HowTo did not work for them. I made a small change in the firewall script which should hopefully solve the problem.\n\nv6.0\n\n \n\nAug 8, 2009\n\n \n\nI got myself a Linksys WRT310N and found out my HowTo did not result in working multiple BSSIDs on this router. After some experimenting I found out why and I have now corrected the HowTo so it works on more routers.\n\nv5.0\n\n \n\nMay 2, 2009\n\n \n\nNewer EKO firmwares did not work with this HowTo because it created an IP conflict between interface br1 and wl0.1. This has been fixed and this HowTo should now also work with the newer firmware versions.\n\nv4.1\n\n \n\nDec. 19, 2008\n\n \n\nI actually reverted some of the changes I made in the previous revision of this HowTo because WEP still didn't work as it should. As it is now, I don't experience any problems with WEP at all, but if you do, please let me know.\n\nv4.0\n\n \n\nDec. 13, 2008\n\n \n\nIf you set the security mode to WEP for one or both of the interfaces, the NAS settings didn't work causing the router to be unable to issue an IP address for the wireless interface. This has been fixed.\n\nv3.0\n\n \n\nNov. 28, 2008\n\n \n\nI removed the PPPoE tick box again since the WAN interface can actually be anything (and not either \"vlan1\" or \"ppp0\" as I assumed). This version of the HowTo creates code that should work with whatever your WAN interface's name is (\"vlan1\", \"vlan2\", \"ppp0\", etc.).\n\nv2.0\n\n \n\nNov. 18, 2008\n\n \n\nI assumed the WAN interface was always \"vlan1\" but when your router is setup as PPPoE, then the WAN interface is \"ppp0\". I added a tick box where you can specify wether or not you are using PPPoE.\n\nv1.0\n\n \n\nOct. 10, 2008\n\n \n\nOriginal Document",
      "html": "<p>Was this HowTo useful to you?</p>\n<p>Revision:</p>\n<p><strong>v8.0</strong> (<a href=\"http://www.pennock.nl/dd-wrt/Multiple_BSSIDs.html#revhistory\">history</a>)</p>\n<p>Last update:</p>\n<p><strong>Mar 9, 2014</strong></p>\n<p>I have seen several HowTos, tutorials, and forum posts about how to setup multiple (B)SSIDs using <a href=\"http://www.dd-wrt.com/\">DD-WRT</a> and although most of these write-ups indeed helped creating multiple SSIDs, none gave me an actual <em>working</em> virtual SSID. Most of the time I wasn’t even able to connect to the new virtual interface and in those rare occassions that it did connect, I never got an IP address. The reason none of these write-ups work, is because they are all based on the same base tutorial which, for one reason or the other, no longer works reliably.</p>\n<p>I took all these write-ups and figured out what is needed to get it to work again. The following HowTo is what worked for me on my <strong>Linksys WRT54GL v1.1</strong> and <strong>Linksys WRT310N</strong>. It created two BSSIDs, each with their own MAC address so any device is able to connect to either BSSID without getting utterly confused. The main BSSID has access to the internet and to your local network. The second (virtual) BSSID only has access to the internet.</p>\n<p>I was only able to test it on my routers, so I would appreciate it if you dropped me an email <a href=\"mailto:dd-wrt@pennock.nl\">here</a> to let me know if this worked for you too (or not).</p>\n<h2 id=\"before-you-continue%E2%80%A6\">Before you continue… <a class=\"heading-anchor-permalink\" href=\"#before-you-continue%E2%80%A6\">#</a></h2>\n<p>To make things easier for you, I made this HowTo <em>interactive</em> meaning I will ask you now to enter some information about the setup you wish to create. After you have entered the information, this HowTo will automatically change to reflect your setup. If you are unsure what to enter here, just leave it as it is - you will be able to create multiple BSSIDs just fine with the default values.</p>\n<p><strong>Enter the information and press <strong>“Done”</strong> when done:</strong></p>\n<p><strong>Main Wireless Interface</strong></p>\n<p><strong>Virtual Wireless Interface</strong></p>\n<p><strong>Wireless Network Name (SSID)</strong></p>\n<p><strong>IP Address</strong></p>\n<p>…</p>\n<p>…</p>\n<p><strong>Subnet Mask</strong></p>\n<p>…</p>\n<p>…</p>\n<p><strong>Start IP Address (DHCP)</strong></p>\n<p>192.168.1.</p>\n<p>192.168.2.</p>\n<p><strong>End IP Address (DHCP)</strong></p>\n<p>192.168.1.</p>\n<p>192.168.2.</p>\n<p><strong>Security Mode</strong></p>\n<p><strong>WPA Algorithms</strong></p>\n<h2 id=\"bssid-vs-ssid\">BSSID vs SSID <a class=\"heading-anchor-permalink\" href=\"#bssid-vs-ssid\">#</a></h2>\n<p>There’s much confusion about what the difference is between a SSID and a <strong>B</strong>SSID. Some routers can only create multiple SSIDs while others can create multiple <strong>B</strong>SSIDs. For now, it’s only important to know that multiple <strong>B</strong>SSIDs is what you want if your router supports it. A BSSID is a truly seperate interface with its own MAC address, while multiple SSIDs share the same MAC address confusing many wireless clients (like PDAs) causing them to be unable to see some or all of the created wireless networks.</p>\n<h2 id=\"what-will-my-router-support%3F\">What will my router support? <a class=\"heading-anchor-permalink\" href=\"#what-will-my-router-support%3F\">#</a></h2>\n<p>If you want to know if your router supports multiple SSIDs at all, you will need to make a telnet connection to your router and query the wl0_corerev variable.</p>\n<p>In Windows, click <strong>Start</strong>, <strong>Run</strong> and in the window that appears, type cmd and click <strong>OK</strong>.</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/mb_cmd_2.gif\" alt=\"\"></p>\n<p>A Command Prompt window will now open. In this window type</p>\n<p>telnet 192.168.1.1</p>\n<p>and press Enter. You will now see the DD-WRT login screen.</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/mb_login_2.gif\" alt=\"\"></p>\n<p>Enter “<strong>root</strong>” (without the quotes) as your login name, press Enter, then enter your password and press Enter again. You will now see yet another prompt. At the prompt, type nvram get wl0_corerev and press Enter.</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/mb_corerev_2.gif\" alt=\"\"></p>\n<p>A number will be printed, here’s what that number means for you:</p>\n<p>0 - 4</p>\n<p>You are out of luck. Your router will <strong>not</strong> do multiple (B)SSIDs.</p>\n<p>5 - 8</p>\n<p>Your router <em>will</em> do multiple SSIDs, but not multiple <strong>B</strong>SSIDs.</p>\n<p>9 and up</p>\n<p>Your router will do multiple BSSIDs. Kudos!</p>\n<p>To close the telnet session, type “exit” at the prompt.</p>\n<h2 id=\"which-version-of-dd-wrt-do-i-need%3F\">Which version of DD-WRT do I need? <a class=\"heading-anchor-permalink\" href=\"#which-version-of-dd-wrt-do-i-need%3F\">#</a></h2>\n<p>For newer routers, check the <a href=\"http://www.dd-wrt.com/site/support/router-database\">Router Database</a> on <a href=\"http://dd-wrt.com\">dd-wrt.com</a> to see what the latest stable version is for your router.</p>\n<p>For older routers, either check the <a href=\"http://www.dd-wrt.com/site/support/router-database\">Router Database</a>, or get one of EKO’s TNG builds. You can find them here:</p>\n<p>A higher number means it’s a newer build. Always try the highest number first and if that gives problems, try a lower number. You will also notice there are several versions for each build. The most notably are the “VINT” and the “NEWD” branches. “VINT” stands for “Vintage” and you need that if you have a wl0_corerev smaller than 9. If you have a wl0_corerev of 9 or up, use one of the “NEWD” versions. “NEWD” stands for “New Driver”. Within each of these two branches, there are more subversions like “mini”, “mega”, “voip”. What this means exactly can be found elsewhere on the net. If you are unsure which file to get, just go for the “std” version. Chances are that’s what you need anyway.</p>\n<h2 id=\"flashing-dd-wrt\">Flashing DD-WRT <a class=\"heading-anchor-permalink\" href=\"#flashing-dd-wrt\">#</a></h2>\n<p>You can also find many very good tutorials on the interwebs on how to flash a new version of DD-WRT to your router so I won’t go into much detail here. A few things to remember though. First and foremost, if your router still has its original firmware and this is the first time you are going to flash dd-wrt, please check the <a href=\"http://www.dd-wrt.com/wiki/index.php/Supported_Devices#Supported_Devices\">Supported Devices</a> list for any special instructions (which can be found under “Notes for running dd-wrt”). Sometimes you need to flash a special version first before you can flash any of the other versions. Another thing to remember is that it’s best to reset the router to its default settings <strong>before</strong> and <strong>after</strong> you flash the new firmware. It’s not always necessary but it rules out certain problems you might encounter when you don’t.</p>\n<p>There are two ways to reset the router to its factory defaults. You can either <em>telnet</em> to your router and at the prompt type these two commands:</p>\n<p>erase nvram<br>\nreboot</p>\n<p>Or you can reset the router to its default settings using the 30/30/30/<strong>30</strong> method (yes, I added an extra “30”):</p>\n<ul>\n<li>Remove all cables (except the power cable) from the router.</li>\n<li>Press and hold the reset button (at the back of the router) for 30 seconds.</li>\n<li>While keeping the reset button pressed, remove the power cable and wait another 30 seconds.</li>\n<li>Still while keeping the reset button pressed, reconnect the power cable and wait another 30 seconds.</li>\n<li>Finally, release the reset button and wait another 30 seconds.</li>\n<li>Reboot your router (by power cycling it)</li>\n</ul>\n<p>Personally, I prefer the first method for resetting my modem. :)</p>\n<h2 id=\"setting-up-multiple-(b)ssids\">Setting up Multiple (B)SSIDs <a class=\"heading-anchor-permalink\" href=\"#setting-up-multiple-(b)ssids\">#</a></h2>\n<p>From this point onwards, I assume you already flashed the appropriate version of DD-WRT to your router. Now it’s finally time to create a second (virtual) SSID.</p>\n<p>All existing HowTos I found, were creating the new virtual wireless interface as an “Unbridged” interface. And this is actually where it goes wrong. We are going to do something different. We are going to create a new bridge called “br1” and hook the new virtual wireless interface to this new bridge.</p>\n<p>First point your webbrowser to your router’s web interface by typing “<a href=\"http://192.168.1.1\">http://192.168.1.1</a>” in your browser’s address bar. If all is well, you will see something like this:</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/ddwrt_s01_2.gif\" alt=\"\"></p>\n<p>Now click the Wireless tab. A screen with your existing wireless interfaces will appear:</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/ddwrt_s02_2.gif\" alt=\"\"></p>\n<p>Click the Add button just below Virtual Interfaces and enter the following information for the new interface:</p>\n<p>Wireless Network Name (SSID)</p>\n<p><strong>SSIDVirtual</strong></p>\n<p>Or whatever name you want to give this interface.</p>\n<p>Wireless SSID Broadcast</p>\n<p><strong>Enabled</strong></p>\n<p>If you don’t want the SSID to be visible, choose <strong>Disabled</strong> here.</p>\n<p>AP Isolation</p>\n<p><strong>Disabled</strong></p>\n<p>You can enable this if you don’t want clients on this interface to talk to each other.</p>\n<p>Network Configuration</p>\n<p><strong>Bridged</strong></p>\n<p>That’s <strong>not</strong> a typo! Every other HowTo says you should choose <strong>UN</strong>bridged, but you should really choose <strong>Bridged</strong> here!</p>\n<p>Click the Save button. Your screen should look something like this:</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/ddwrt_s03_2.gif\" alt=\"\"></p>\n<p>Now click the Wireless Security sub-tab. For each interface, choose the appropriate security mode and enter a key (if necessary). Click the Save button. Your screen will now look something like this:</p>\n<p><img src=\"http://www.pennock.nl/dd-wrt/images/ddwrt_s04_2.gif\" alt=\"\"></p>\n<p>Click the Services tab, and scroll down to the DNSMasq  frame. In the “Additional DNSMasq Options” input box, enter the following:</p>\n<p>interface=br1<br>\ndhcp-range=br1,192.168.2.100,192.168.2.149,255.255.255.0,1440m</p>\n<p>Click the Save button.</p>\n<p>This tells the router that (amongst other things) the new bridge will give connecting clients an IP address in the 192.168.2.100 - 192.168.2.149 range.</p>\n<p>Now go to the Administration tab, sub-tab Commands. In the input box below Command Shell , enter the following:</p>\n<p>if [ “`nvram get wan_proto`” = “pppoe” ]; then<br>\nwanif=&quot;`nvram get pppoe_ifname`&quot;<br>\nelse<br>\nwanif=&quot;`nvram get wan_ifname`&quot;<br>\nfi</p>\n<p># Make sure br1 has access to the internet:<br>\niptables -I INPUT -i br1 -m state --state NEW -j logaccept<br>\niptables -I FORWARD -i br1 -o $wanif -m state --state NEW -j ACCEPT<br>\n# Keep the two wireless networks from talking to each other:<br>\niptables -I FORWARD -i br0 -o br1 -j logdrop<br>\niptables -I FORWARD -i br1 -o br0 -j logdrop<br>\n# Keep br1 from accessing the router:<br>\niptables -I INPUT -i br1 -p tcp --dport telnet -j REJECT --reject-with tcp-reset<br>\niptables -I INPUT -i br1 -p tcp --dport ssh -j REJECT --reject-with tcp-reset<br>\niptables -I INPUT -i br1 -p tcp --dport www -j REJECT --reject-with tcp-reset<br>\niptables -I INPUT -i br1 -p tcp --dport https -j REJECT --reject-with tcp-reset</p>\n<p>iptables -t nat -I POSTROUTING -o `get_wanface` -j SNAT --to `nvram get wan_ipaddr`</p>\n<p>Click the Save Firewall button.</p>\n<p>In the same input box (which is now empty again), we need to enter a startup script to create the new bridge, move the virtual wireless interface to it, and setup the new interface’s IP address. But for it all to work, we need to properly setup NAS. But <strong>how</strong> NAS needs to be setup depends on the security settings for each wireless interface. At the start of this HowTo, I asked you to enter the proper security settings for each interface. This information has been used to generate the code below. If you need different security settings, change it at the start of the HowTo and come back here.</p>\n<p># Set some important values:<br>\nnvram set dnsmasq_enable=1<br>\nif [ “`nvram get dhcpfwd_enable`” = “0” ]; then<br>\nnvram set dns_dnsmasq=1<br>\nnvram set dhcp_dnsmasq=1<br>\nnvram set auth_dnsmasq=1<br>\nfi</p>\n<p># Create bridge br1, move the virtual wireless interface to it,<br>\n# and setup the interface’s IP address:<br>\nbrctl addbr br1<br>\nbrctl delif br0 wl0.1<br>\nbrctl addif br1 wl0.1<br>\nifconfig br1 192.168.2.1 netmask 255.255.255.0<br>\nifconfig br1 up</p>\n<p># Properly setup NAS<br>\nkillall nas</p>\n<p># Main:<br>\nnas -P /tmp/nas.wl0lan.pid -H 34954 -l br0 \\<br>\n-i “`nvram get wl0_ifname`” -A -m 4 -k “`nvram get wl0_wpa_psk`” \\<br>\n-s “`nvram get wl0_ssid`” -w 2 \\<br>\n-g “`nvram get wl0_wpa_gtk_rekey`”</p>\n<p># Virtual interface #1:<br>\nnas -P /tmp/nas.wl0.1lan.pid -H 34954 -l br1 \\<br>\n-i wl0.1 -A -m 4 -k “`nvram get wl0.1_wpa_psk`” \\<br>\n-s “`nvram get wl0.1_ssid`” -w 2 \\<br>\n-g “`nvram get wl0.1_wpa_gtk_rekey`”</p>\n<p>Now copy and paste the code from the box above into the Command Shell  input box.</p>\n<p>Click the Save Startup button.</p>\n<p>Finally, click the Management sub-tab, scroll down and click the Reboot Router button.</p>\n<p>Wait until your router has rebooted itself and you should now have two working (B)SSIDs!</p>\n<p>If you can’t connect to the virtual interface, wait 5 minutes and try again. Sometimes, for reason completely unknown to me, it takes a few minutes before the virtual interface actually starts working. If waiting doesn’t help, then you probably have some left-over configuration settings that are messing with the virtual interface. Try resetting your router to its factory default (see the part about resetting to factory default under “Flashing DD-WRT” above) and try the HowTo again. Be aware though that resetting your router to factory default means you will loose all your settings like port forwarding rules, MAC cloning, etc. So write down all your settings before resetting your router.</p>\n<p>Revision History</p>\n<p>v8.0</p>\n<p>Mar 9, 2014</p>\n<p>Apparently this HowTo didn’t work (properly) with newer routers. People were able to create multiple BSSIDs but the virtual wireless interfaces had no internet access. To solve this I’ve made some changes to the firewall script.</p>\n<p>v7.0</p>\n<p>Sept 7, 2009</p>\n<p>Some people who connected to the internet through PPPoE reported the HowTo did not work for them. I made a small change in the firewall script which should hopefully solve the problem.</p>\n<p>v6.0</p>\n<p>Aug 8, 2009</p>\n<p>I got myself a Linksys WRT310N and found out my HowTo did not result in working multiple BSSIDs on this router. After some experimenting I found out why and I have now corrected the HowTo so it works on more routers.</p>\n<p>v5.0</p>\n<p>May 2, 2009</p>\n<p>Newer EKO firmwares did not work with this HowTo because it created an IP conflict between interface br1 and wl0.1. This has been fixed and this HowTo should now also work with the newer firmware versions.</p>\n<p>v4.1</p>\n<p>Dec. 19, 2008</p>\n<p>I actually reverted some of the changes I made in the previous revision of this HowTo because WEP still didn’t work as it should. As it is now, I don’t experience any problems with WEP at all, but if you do, please let me know.</p>\n<p>v4.0</p>\n<p>Dec. 13, 2008</p>\n<p>If you set the security mode to WEP for one or both of the interfaces, the NAS settings didn’t work causing the router to be unable to issue an IP address for the wireless interface. This has been fixed.</p>\n<p>v3.0</p>\n<p>Nov. 28, 2008</p>\n<p>I removed the PPPoE tick box again since the WAN interface can actually be anything (and not either “vlan1” or “ppp0” as I assumed). This version of the HowTo creates code that should work with whatever your WAN interface’s name is (“vlan1”, “vlan2”, “ppp0”, etc.).</p>\n<p>v2.0</p>\n<p>Nov. 18, 2008</p>\n<p>I assumed the WAN interface was always “vlan1” but when your router is setup as PPPoE, then the WAN interface is “ppp0”. I added a tick box where you can specify wether or not you are using PPPoE.</p>\n<p>v1.0</p>\n<p>Oct. 10, 2008</p>\n<p>Original Document</p>\n",
      "id": 22
    },
    {
      "path": "Network_Net/ddwrt_basic_wl_settings.md",
      "url": "Network_Net/ddwrt_basic_wl_settings.html",
      "content": "<div id=\"content\">\n        <a name=\"top\" id=\"top\"></a>\n                <h1 class=\"firstHeading\">Basic Wireless Settings</h1>\n        <div id=\"bodyContent\" class=\"gumax-bodyContent\">\n            <h3 id=\"siteSub\">From DD-WRT Wiki</h3>\n<table id=\"toc\" class=\"toc\" summary=\"Contents\"><tbody><tr><td><div id=\"toctitle\"><h2>Contents</h2> <span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>\n<ul>\n<li class=\"toclevel-1\"><a href=\"#Basic_Wireless_Settings\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Basic Wireless Settings</span></a>\n<ul>\n<li class=\"toclevel-2\"><a href=\"#Introduction\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Introduction</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Regulatory_Domain\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Regulatory Domain</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Regulatory_Mode\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Regulatory Mode</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#TPC_Mitigation_Factor\"><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">TPC Mitigation Factor</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Physical_Interface\"><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">Wireless Physical Interface</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Mode\"><span class=\"tocnumber\">1.6</span> <span class=\"toctext\">Wireless Mode</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Network_Mode\"><span class=\"tocnumber\">1.7</span> <span class=\"toctext\">Wireless Network Mode</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Channel\"><span class=\"tocnumber\">1.8</span> <span class=\"toctext\">Wireless Channel</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Channel_Width\"><span class=\"tocnumber\">1.9</span> <span class=\"toctext\">Channel Width</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Sensitivity_Range_.28ACK_Timing.29\"><span class=\"tocnumber\">1.10</span> <span class=\"toctext\">Sensitivity Range (ACK Timing)</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Network_Name_.28SSID.29\"><span class=\"tocnumber\">1.11</span> <span class=\"toctext\">Wireless Network Name (SSID)</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_SSID_Broadcast\"><span class=\"tocnumber\">1.12</span> <span class=\"toctext\">Wireless SSID Broadcast</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Network_Configuration\"><span class=\"tocnumber\">1.13</span> <span class=\"toctext\">Network Configuration</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Security\"><span class=\"tocnumber\">1.14</span> <span class=\"toctext\">Wireless Security</span></a>\n<ul>\n<li class=\"toclevel-3\"><a href=\"#Security_Mode\"><span class=\"tocnumber\">1.14.1</span> <span class=\"toctext\">Security Mode</span></a></li>\n<li class=\"toclevel-3\"><a href=\"#WPA_Algorithms\"><span class=\"tocnumber\">1.14.2</span> <span class=\"toctext\">WPA Algorithms</span></a></li>\n<li class=\"toclevel-3\"><a href=\"#WPA_Shared_Key\"><span class=\"tocnumber\">1.14.3</span> <span class=\"toctext\">WPA Shared Key</span></a></li>\n<li class=\"toclevel-3\"><a href=\"#Key_Renewal_Interval\"><span class=\"tocnumber\">1.14.4</span> <span class=\"toctext\">Key Renewal Interval</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</td></tr></tbody></table><script type=\"text/javascript\"> if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } </script>\n<a name=\"Basic_Wireless_Settings\"></a><h1><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=1\" title=\"Edit section: Basic Wireless Settings\">edit</a>]</span> <span class=\"mw-headline\"> Basic Wireless Settings </span></h1>\n<a name=\"Introduction\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=2\" title=\"Edit section: Introduction\">edit</a>]</span> <span class=\"mw-headline\"> Introduction </span></h2>\n<p>Note, if you do not see a certain setting on your router, it may be on a different screen or it is not supported. If in doubt, ask on the forums.\n</p><p>See: <a href=\"/wiki/index.php/Advanced_wireless_settings\" title=\"Advanced wireless settings\">Advanced Wireless Settings</a> for the rest of the settings not found on this page.\n</p>\n<a name=\"Regulatory_Domain\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=3\" title=\"Edit section: Regulatory Domain\">edit</a>]</span> <span class=\"mw-headline\"> Regulatory Domain </span></h2>\n<p><b>Available Settings:</b> 115+ different countries (several countries share the same regulations) \n</p><p><b>Default Setting:</b> Germany \n</p><p>This determines the channels available in the list for both bands (if you have a dual band router) and the maximum <a href=\"http://en.wikipedia.org/wiki/Equivalent_isotropically_radiated_power\" class=\"external text\" title=\"http://en.wikipedia.org/wiki/Equivalent_isotropically_radiated_power\" rel=\"nofollow\">EIRP</a> \"legally\" allowed by the telecom authorities in the chosen country. EIRP is TX power plus antenna gain, example: * 20 dBm TX power with a 10 dBi gain antenna has an EIRP of 30 dBm. \n</p>\n<ul><li> 24 dBm TX power with a 6 dBi gain antenna has an EIRP of 30 dBm. \n</li></ul>\n<p><br>\n</p><p>Maximum EIRP varies by nation and your max TX power will be capped by the regulatory domain if you have a powerful radio. For example, Canada's max allowed EIRP is 36 dBm while its max allowed TX power is 30 dBm, with Canada selected and antenna gain at 0 dBi, the radios will never go above 30 dBm assuming they are capable of reaching that of course. \n</p>\n<a name=\"Regulatory_Mode\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=4\" title=\"Edit section: Regulatory Mode\">edit</a>]</span> <span class=\"mw-headline\"> Regulatory Mode </span></h2>\n<p><b>Available Settings:</b> Off, 802.11h Loose, 802.11h Strict, 802.11d\n</p><p><b>Default Setting:</b> Off\n</p><p><b>Recommended Setting:</b> Off\n</p><p>Here's some information on what 80211h was supposed to do:<i>IEEE 802.11h is the IEEE standard for Spectrum and Transmit Power Management Extensions. It solves problems like interference with satellites and radar using the same 5 GHz frequency band. It was originally designed to address European regulations but is now applicable in many other countries. The standard provides Dynamic Frequency Selection (DFS) and transmit Power Control (TPC) to the IEEE 802.11a MAC.</i>\n</p>\n<a name=\"TPC_Mitigation_Factor\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=5\" title=\"Edit section: TPC Mitigation Factor\">edit</a>]</span> <span class=\"mw-headline\"> TPC Mitigation Factor </span></h2>\n<p><b>Available Settings:</b> 0 (Off), 1, 2, 3, 4\n</p><p><b>Default Setting:</b> Off\n</p><p><b>Recommended Setting:</b> Off\n</p><p>Here is what it changes: <a href=\"https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-3/b_RRM_White_Paper/b_RRM_White_Paper_chapter_0101.html\" class=\"external free\" title=\"https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-3/b_RRM_White_Paper/b_RRM_White_Paper_chapter_0101.html\" rel=\"nofollow\">https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-3/b_RRM_White_Paper/b_RRM_White_Paper_chapter_0101.html</a> \n</p>\n<a name=\"Wireless_Physical_Interface\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=6\" title=\"Edit section: Wireless Physical Interface\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Physical Interface </span></h2>\n<p><b>Available Interfaces:</b> athX (0, 1, 2 etc, varies by router as many routers have 2 or more radios in them) \n</p><p>If you have a dual band router ath1 will be displayed below ath0 with the same available settings. Ath0 is the 2.4GHz radio and ath1 is the 5GHz radio for most routers, for some like the TL-WDR4900 v1.3, ath0 is 5GHz &amp; ath1 is 2.4GHz; its just the way the radios are connected on the PCB &amp; is normal. If you create a VAP for 2.4GHz or 5GHz radio the VAPs will be labelled athX.1 &amp; athX.1 respectively where X = the interface's number. For example, a VAP made on ath0 will be ath0.1, then ath0.2, etc. Refer to <a href=\"http://www.dd-wrt.com/phpBB2/viewtopic.php?t=47708\" class=\"external text\" title=\"http://www.dd-wrt.com/phpBB2/viewtopic.php?t=47708\" rel=\"nofollow\">this thread</a> for some info about VAPs with Qualcomm Atheros. \n</p><p><br>\n</p>\n<a name=\"Wireless_Mode\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=7\" title=\"Edit section: Wireless Mode\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Mode  </span></h2>\n<p><b>Atheros available Settings:</b> AP, Client, Client Bridge, Adhoc, WDS Station, WDS AP<b>Broadcom available Settings:</b> AP, Client, Client Bridge, Adhoc, Repeater, Repeater Bridge<b>Default Setting</b> AP<b>Recommended Setting:</b> AP for most users, other options if you are advanced and know you need it \n</p><p><b>The help file says...</b> * The wireless part of your router can run in different modes: \n</p>\n<ul><li> AP mode â€“ This is the default mode, also called Infrastructure mode. Your router acts as an central connection point, to which wireless clients can connect. \n</li><li> Client mode â€“ The radio interface is used to connect the internet-facing side of the router (i.e., the WAN) as a client to a remote access point. NAT or routing are performed between WAN and LAN, like in \"normal\" gateway or router mode. Use this mode, e.g., if your internet connection is provided by a remote access point, and you want to connect a subnet of your own to it. \n</li><li> Client Bridged mode â€“ The radio interface is used to connect the LAN side of the router to a remote access point. The LAN and the remote AP will be in the same subnet (This is called a \"bridge\" between two network segments). The WAN side of the router is unused and can be disabled. Use this mode, e.g., to make the router act as a \"WLAN adapter\" for a device connected to one of its LAN Ethernet ports. \n</li><li> Ad-Hoc mode â€“ This is for peer to peer wireless connections. Clients running in Ad-Hoc mode can connect to each other as required without involving central access points. \n</li><li> See this page for more info on linking routers: <a href=\"https://www.dd-wrt.com/wiki/index.php/Linking_Routers\" class=\"external free\" title=\"https://www.dd-wrt.com/wiki/index.php/Linking_Routers\" rel=\"nofollow\">https://www.dd-wrt.com/wiki/index.php/Linking_Routers</a>\n</li></ul>\n<p><br>\n</p><p><b>How it works:</b>Determines how the specific wireless interface of the router is to behave. If you want to run a normal access point which most do, AP would be your choice. Client and Client Bridge with Virtual Interfaces is the Atheros equivalent Broadcom's Repeater and Repeater Bridge settings. \n</p><p><br>\n</p>\n<a name=\"Wireless_Network_Mode\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=8\" title=\"Edit section: Wireless Network Mode\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Network Mode  </span></h2>\n<p><b>Available Settings (2.4 GHz):</b> Disabled, Mixed, B-Only, G-Only, BG-Mixed, NG-Mixed, N-Only (2.4 GHz) \n</p><p><b>Available Settings (5 GHz):</b> Disabled, Mixed, A-Only, NA-Mixed, AC/N-Mixed, N-Only (5 GHz), AC-Only \n</p><p><b>Available Settings (60 GHz):</b> Disabled, Mixed, AD-Only \n</p><p><b>Default Setting:</b> Mixed \n</p><p><b>Recommended Setting:</b> NG-Mixed (2.4 GHz), AC/N-Mixed (5 GHz), AD-Only (60 GHz) \n</p><p>Controls which 802.11 signals are being broadcast by the radio. Depending on the selected network mode your wireless channel list and maximum TX power can vary. NG-Mixed for 2.4 GHz &amp; Mixed or AC/N-Mixed is the recommended setting for most people as your clients' NICs are able to use either (V)HT20, (V)HT40, &amp; VHT80 \"properly\" with this setting. If you have any issues or do not use 802.11b clients, switch to NG-Mixed. N-Only is broken on many units for some time (both bands) &amp; still is, try to avoid using as there is minimal performance change from NG-Mixed -&gt; N-Only if all you use is 802.11n clients for either of them. For 802.11a/n 5 GHz radios, Mixed &amp; NA-Mixed are the same. \n</p><p>Note on BCM routers, client / client bridged modes only should use straight mixed mode.\n</p><p><br>\n<b>The help file says...</b> * If you wish to exclude Wireless-G clients, choose B-Only mode. If you would like to disable wireless access, choose Disable.\n</p><p><br>\n</p><p>Note&nbsp;: when changing wireless mode, some advanced parameters are susceptible to be modified (\"Afterburner\", \"Basic Rate\" or \"Frame Burst\"). \n</p><p><b>How it works:</b> \n</p><p>In Mixed mode, dd-wrt routers are able to offer various wifi network types (B, G and N) at the same time from a single 2.4GHz radio. 802.11n transmission is always embedded in an 802.11a, for 5GHz radios, or 802.11g for 2.4GHz radio transmissions. This is called Mixed Mode Format protection (also known as L-SIG TXOP Protection). \n</p><p><b>See also:</b> \n</p>\n<ul><li> <a href=\"/wiki/index.php/Wireless-N_Configuration\" title=\"Wireless-N Configuration\">Wireless-N Configuration</a> - not required if recommended settings are used from this page.\n</li><li> <a href=\"/wiki/index.php/Wireless-N_Throughput_Testing\" title=\"Wireless-N Throughput Testing\">Wireless-N Throughput Testing</a>\n</li></ul>\n<a name=\"Wireless_Channel\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=9\" title=\"Edit section: Wireless Channel\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Channel  </span></h2>\n<p><b>Available Settings (2.4 GHz):</b> Channels 1 ~ 14 depending on your regulatory domain &amp; channel width \n</p><p><b>Available Settings (5 GHz):</b> Channels 34 ~ 48 (U-NII-1), 52 ~ 64 (U-NII-2), 100 ~ 144 (U-NII-2e), 149 ~ 161 (U-NII-3), 165 (ISM) depending on your regulatory domain* \n</p><p><b>Available Settings (60 GHz):</b> Channels 1 ~ 4 depending on your regulatory domain* \n</p><p><b>Default Setting:</b> Auto \n</p><p><b>Recommended Setting:</b> Please actually pick a channel and try to use the cleanest channel with the least noise, most stable throughput, &amp; lowest latency jitter. Using Channels 1, 6, or 11 assures no overlap with the adjacent channels. Using other channels will work, but may overlap with neighboring wifi which will likely be using one of the three channels above. \n</p><p><b>The help file says...</b> * Select the appropriate channel from the list provided to correspond with your network settings (in North America between channel 1 and 11, in Europe 1 and 13, in Japan all 14 channels). All devices in your wireless network must use the same channel in order to function correctly. Try to avoid conflicts with other wireless networks by choosing a channel where the upper and lower three channels are not in use. \n</p><p><br>\n</p><p><b>How it works:</b> \n</p><p>IEEE 802.11 is a set of standards that are published for the purposes of carrying out wireless local area network (WLAN) computer communication in the 2.4, 3.6 and 5 GHz frequency bands. They are implemented by the IEEE LAN/MAN Standards Committee ( aka \"IEEE 802\"). \n</p><p>2.4GHz Channels \n</p><p>2.4GHz band in the 802.11 standard uses radio frequencies in the range of 2.412-2.484 GHz. 802.11 splits up the frequencies within the band into 14 radio channels, numbered 1-14. These are the 14 channels designated in the 2.4 GHz range spaced 5 MHz apart (with the exception of a 12 MHz spacing before Channel 14). The frequency range of a channel partially overlaps with the next one, so not all the channels are therefore independent. By default on a 2.4GHz band radio DD-WRT routers, channels 1, 6 and 11 have no overlap with each other; those three channels are known in the wireless community as the \"standard\" for wireless channel independence within the 2.4GHz band. \n</p><p>In North America this 2.4GHz \"band\" is implemented by dividing the 2.4GHz band into 13 channels each with a width of 22 MHz but also spaced only 5 MHz apart, with channel 1 centred on 2412 MHz and 13 on 2472, to which Japan adds a 14th channel 12 MHz above channel 13. \n</p><p>5GHz Channels \n</p><p>5GHz band in the 802.11 standard uses radio frequencies in the range of 4.980 GHz to 5.825 GHz. 802.11 splits up the frequencies within the band into 42 wireless radio channels, numbered 7 to 196. These are the 42 channels designated in the 5 GHz range and they are spaced 5 MHz apart. The frequency range of a channel partially overlaps with the next one, so not all the channels are therefore independent but unlike the 2.4GHz band the 5GHz band offers many more non overlapping channels. \n</p><p>In North America this 5GHz \"band\" is implemented by dividing the 5GHz band into 24 channels (36 to 165) each with a width of 22 MHz but also spaced only 5 MHz apart, with channel 36 centred on 5.180 GHz and 165 on 5.825 GHz. \n</p><p>NOTE - The specifics of the frequency range and how channels are allocated is regulated by each country. Usually constrained in part by how each country allocates radio spectrum to various services. For example, in the 2.4Ghz band Japan has implemented 1 to 14 wireless channels, Europe #1-#13 and the FCC in the US decided with 1 to 11 wireless channels all within the same band. DD-WRT allows the use of all channels; this doesn't mean your client wireless adapter can support channels outside of its licensed region. \n</p><p>How it works in DD-WRT: To configure your radio channels in the WebGUI you browse to the \"Basic Settings\" under the \"Wireless\" page on your DD-WRT router. \n</p><p>If you have dual band router (ie. Two Radios inside the router) you will see two sections for configurations listed in this page with the headings as \"wl0\" for the 2.4GHz radio and \"wl1\" for the 5GHz radio. \n</p><p>DD-WRT has channel configuration settings that must be configured; \n</p><p>Wireless mode, this determines if the router will be used as an Access Point, Repeater, Client or in an Ad-hoc configuration mode. Channel options are only avalaible to a router running in AP or Ad-Hoc wireless mode. \n</p><p>Wireless Network mode, this setting determines what wireless protocols will be offered to the wireless clients that try to connect to the router. Depending on the wireless network mode your radio is configured for DD-WRT will have additional channel options for you to configure if you choose. \n</p><p><br>\n</p>\n<ul><li> If you want to introduce channel bonding in your wireless enviroment you should also start with \"CTS Protection\" set to Auto as well.\n</li></ul>\n<a name=\"Channel_Width\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=10\" title=\"Edit section: Channel Width\">edit</a>]</span> <span class=\"mw-headline\"> Channel Width </span></h2>\n<p>This determines the wireless channel width used- where higher values allow more bandwidth/throughput, but yield fewer free channels, and result in more overlapping channels. Using lower MHz channel width values yields more free non-overlapping channels but means less bandwidth/throughput is available. For a full table of possible MCS index connection rates see <a href=\"http://www.mcsindex.com\" class=\"external autonumber\" title=\"http://www.mcsindex.com\" rel=\"nofollow\">[1]</a>\n</p><p><br>\n<b>BEFORE DOING ANYTHING- MAKE NOTE:</b>\n</p><p><b>1) Select your country first and YOU MUST HIT APPLY! The driver needs to reconfigure the country for the speific wifi chipset and then the router needs to get the updated channel list for your country</b>\n</p><p><b>2) Set the Channel Width and hit Save.</b>\n</p><p><b>3A) Select the correct WiFi \"carrier\" channel and concurrently go to step 3B.</b>\n</p><p><b>3B) Set the Extension Channel UU, LL, UL, or LU .</b> (See table below of valid VHT80 &amp;VHT160 extensions)\n</p><p><br>\n<i>Carrier channel is defined as the main 20Mhz channel that \"carrying\" the signal. Extension channels are then added to yield HT40, VHT80, and VHT160. </i>\n</p><p><br>\n<b>Available Settings (2.4 GHz):</b> Dynamic (20/40 MHz), Wide HT40* (40 MHz), Full (20 MHz), Half (10 MHz)*, Quarter (5 MHz)*\n</p><p><i>*Note 1: You MUST have this setting on Wide HT40 (40 MHz) to allow 802.11n devices (2.4 GHz &amp; 5 GHz) to connect at their max!</i>\n<i>*Note 2&amp;3: Half (10MHz) and Quarter (5MHz) may not be supported on all models. It is best to just use Full (20MHz) or wider.</i> \n</p><p><b>Available Settings (5 GHz):</b> VHT160*, VHT160 (80+80 MHz)*, VHT80 (80 MHz)*, Dynamic (20/40 MHz), Wide HT40 (40 MHz), Full (20 MHz)\n</p><p><i>*Note: VHT80 (80 MHz), VHT160 (80+80 MHz), &amp; VHT160 is only displayed &amp; available for 802.11ac (5 GHz) routers that support it, &amp; it's required to reach the max MCS link rates of 802.11ac</i>\n</p><p><i>*WARNING ABOUT USING VHT160-Using DFS channels can significantly increase 5 GHz association times because devices (STAs) can only passively scan for available APs. So instead of being able to send out a probe request and waiting for APs to reply, a STA using DFS channels must wait until an AP announces itself. You wouldn't think this would make much difference, but when switching from running 2.4 to 5 GHz tests, it took over a minute to find and associate to the router's 5 GHz SSID.</i>\n</p>\n<hr>\n<p><b>Default Settings (2.4ghz):</b> Full (20 MHz)\n</p><p><br>\n<b>Recommended Setting (2.4 GHz):</b> Full (20 MHz)- Why? Because nearly all cell phones and tablets will limit their channel width to only 20MHz if they detect neighboring routers/wifi AP's and so 40MHZ wide communication will not be allowed; even if you enable HT40 on the router.  Your mileage may vary by enabling HT40 on the router for phones and tablets. As far as Laptops/Desktops, they usually have a way to allow 40MHz wide channels in the advanced driver settings. Disable \"Fat Channel Intolerant\" to take advantage of 40MHz on Windows OS's. Using HT40 enables channel bonding by using 2x20 MHz wide channels together to equal 40Mhz; but, it's considered \"not neighbor friendly\" and discouraged by industry standards- as noted above for android &amp; iPhone HT20 limit. Using HT40 may, <b>but usually doesn't</b>, create more interference for neighbors; it's usually not an issue unless you're in VERY packed/dense/congested wireless area like apartments- Again YMMV with HT40. HT40 allows your 802.11n devices to connect at their max rate: 300 Mbps (2x2:2 stream clients).\n</p><p><i>*Note: 193mbps is not an officially recognized MCS index rate, but some devices have reported 193mbps vs 173; 173 is the maximum for 2x2:2 stream clients per 802.11ac industry standards.</i>\n</p><p><b>Recommended Setting (5 GHz):</b> VHT80 (80 MHz), or Wide HT40 (40 MHz). For wifi 5-wave 2 routers, VHT160 can only be taken advantage of by two/three Intel Wifi cards right now (9260/9265/AX200 2x2:2); otherwise, backhaul from one VHT160 capable router to another VHT160 capable router is the other reason to use VHT160 right now. Also to note, VHT160 operates in spectrum which requires reduced TX pwr vs. VHT80: VHT160 spectrum only allows 23dBm vs. 30dBm for VHT80 (USA and similar countries). So, use VHT160 if you know you have clients that can take advantage of it; but realize your TX distance may be worse than if you use VHT80. Also note, it may take up to a minute to find your 5ghz signal if using VHT160 mode.\n</p><p><br>\n<i>Lastly, very few clients are 3x3 or 4x4 stream capable; usually only desktop wifi cards are 3x3 or 4x4 (due to space limits in tablets, phones, and laptops &amp; cost of more antenna's). You'll obviously gain more throughput by having 3x3 or 4x4 capable routers &amp; clients. Nearly all phones and tablets are 2x2:2 stream devices, at best, right now (limited room for 4 antenna's &amp; cost too). AFAIK, all laptops use 2x2:2 stream cards; though, apple has a few 3x3:3 stream cards in their devices...use google to find 3x3 or 4x4 stream wifi clients.</i>\n</p>\n<hr>\n<p><br>\n<b>!!!For BCM routers, you need to swap UU, UL, LU, and LL meanings (Not sure if this is a BCM issue or how BS coded the tables in the code)!!!</b>\n</p><p><b><i>FOR BCM-confirmed that in the table below you need to swap:</i></b>\n</p>\n<pre>UU- Select LL in gui \nUL- Select LU in gui\nLU- Select UL in gui\nLL-Select UU in gui\n</pre>\n<p>The below is the technical \"right\" way to describe the extension channels- use the above conversion on BCM routers. QCA implements per the below.\n</p><p>Valid VHT80 channels are: \n</p>\n<ul><li> 36+UU \n</li><li> 40+UL \n</li><li> 44+LU \n</li><li> 48+LL \n</li><li> 52+UU \n</li><li> 56+UL \n</li><li> 60+LU \n</li><li> 64+LL \n</li><li> 100+UU \n</li><li> 104+UL \n</li><li> 108+LU \n</li><li> 112+LL \n</li><li> 116+UU \n</li><li> 120+UL \n</li><li> 124+LU \n</li><li> 128+LL \n</li><li> 132+UU \n</li><li> 136+UL \n</li><li> 140+LU \n</li><li> 144+LL \n</li><li> 149+UU \n</li><li> 153+UL \n</li><li> 157+LU \n</li><li> 161+LL \n</li></ul>\n<p><br>\n</p><p>Valid VHT160 channels are: * 36+UUU \n</p>\n<ul><li> 64+LLL \n</li><li> 100+UUU \n</li><li> 128+LLL\n</li></ul>\n<a name=\"Sensitivity_Range_.28ACK_Timing.29\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=11\" title=\"Edit section: Sensitivity Range (ACK Timing)\">edit</a>]</span> <span class=\"mw-headline\"> Sensitivity Range (ACK Timing)  </span></h2>\n<p><b>Available Settings:</b> 0 ~ 999999 (meters) \n</p><p><b>Default Setting:</b> 500 (Used to be 2000 meters or approx. 1.242742 Miles) \n</p><p><b>Recommended Setting:</b> 90 (meters) for both bands. IEEE Spec is 300 feet and realistic! (90 meters is approx. 295.276 feet and most compatible with Atheros settings! 2000 meters is 1.242742 miles!). Unless you are using specialized equipment outdoors (For example Ubiquiti Networks equipment) you will suffer performance issues, cross-talk, and throughput drops. Try 90 first, if you have issues then try higher values like 120 up to 500 (in increments of 5). Values over 500 are only used when <b>needed</b> for long distance high performance links using specialized equipment.\n</p><p><br>\n<b>The help file says...</b> * Adjusts the ACK timing in Atheros typical way based on the maximum distance in meters. \n</p><p>A value of 0 disables ACK timing completely for Broadcom firmware. \nOn Atheros based firmware a value of 0 will turn into auto ACK timing mode. \n<b>BCM users, you can try setting ACK timing to 0 and check performance on clients- this may cause issues on QCA based clients.</b>\n</p><p><br>\n<b>How it works:</b> # AP sends a message: Everybody wait X time for a response \n</p>\n<ol><li> Client receives \n</li><li> Client sends a response to the AP called an ACK - Acknowledges the command waiting for X time. \n</li><li> AP sees the ACK \n</li><li> Other Clients and AP are free to send \n</li></ol>\n<p><br>\n</p><p>-ACK timing adjustment is used for distance links when the time needed to transmit is greater than the amount of time the sender waits before retrying to transmit the same packet again. \n</p><p>-You want to set the ACK timing to 2x the distance between bridged routers measured in meters. \n</p><p>-If the ACK timing is too high it will not affect the throughput that much. If the ACK time is too low it can drop your throughput to the point of being unusable and can even make the system not connect. \n</p><p>-Recommended setting is 0 for a household network. Which for Linksys users means DD-WRT doesn't use ACK timing at all.\n</p>\n<a name=\"Wireless_Network_Name_.28SSID.29\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=12\" title=\"Edit section: Wireless Network Name (SSID)\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Network Name (SSID) </span></h2>\n<p><b>Default Setting:</b> ddwrt \n</p><p>This is where you can choose the name of your wireless network when its being broadcast to roaming clients. You can name this anything you want. \n</p><p><br>\n</p>\n<a name=\"Wireless_SSID_Broadcast\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=13\" title=\"Edit section: Wireless SSID Broadcast\">edit</a>]</span> <span class=\"mw-headline\"> Wireless SSID Broadcast </span></h2>\n<p><b>Available Settings:</b> Enable, disable \n</p><p><b>Default Setting:</b> Enable \n</p><p><b>Recommended Setting:</b> Enable \n</p><p>Dependent on the setting above, this controls if your SSID is being broadcast or not. When disable is selected many clients still pick up the beacon and display it as \"Hidden\" along with the AP's MAC address. Disabling is not recommended as it hardly does anything for security, a determined intruder can still access your network with different methods. \n</p>\n<a name=\"Network_Configuration\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=14\" title=\"Edit section: Network Configuration\">edit</a>]</span> <span class=\"mw-headline\"> Network Configuration </span></h2>\n<p><b>Available Settings:</b> Unbridged, Bridged \n</p><p><b>Default Setting:</b> Bridged \n</p><p><b>Recommended Setting:</b> Bridged \n</p><p>This setting controls if the wireless interface is \"bridged\" with the LAN ports. Bridged meaning a client on the wireless interface and a client on the Ethernet LAN interface are on the same network on the same subnet. Unbridged allows you to \"separate\" the WLAN (wireless LAN) by giving it its own subnet and even its own DHCP server. If you want a unbridged interface, you are better off creating a VAP instead of unbridging the main interface.\n</p>\n<a name=\"Wireless_Security\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=15\" title=\"Edit section: Wireless Security\">edit</a>]</span> <span class=\"mw-headline\">Wireless Security</span></h2>\n<p>More info, not updated: <a href=\"/wiki/index.php/Wireless_security\" title=\"Wireless security\">Wireless Security</a>\n</p>\n<a name=\"Security_Mode\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=16\" title=\"Edit section: Security Mode\">edit</a>]</span> <span class=\"mw-headline\">Security Mode</span></h3>\n<p><b>Available Settings:</b> Disabled, WPA Personal, WPA Enterprise, WPA2 Personal, WPA2 Enterprise, WPA2 Personal Mixed, WPA2 Enterprise Mixed, RADIUS, WEP\n</p><p><b>Default Setting:</b> Disabled\n</p><p><b>Recommended Setting:</b> WPA2 Personal or WPA2 Personal Mixed (inc Enterprise)\n</p><p><br>\nDepends on what your network security needs are, for more advanced security like RADIUS etc. Do NOT use \"WPA\" (aka WPA1) only or WEP, they are weak ESPECIALLY WEP! Can be cracked easily, in seconds for the latter, they also go against the IEEE 802.11n/ac specification &amp; will usually force your link rates down to 802.11a/g speeds (54 Mbps!) This is one of the leading causes for users not knowing why they aren't getting N or AC speeds with DD-WRT.\n</p><p><br>\nSecurity from <font color=\"red\">weakest</font> --&gt; <font color=\"green\">strongest</font> goes in the following order (not counting enterprise):\n</p><p><br>\n<font color=\"red\">Unsecured</font> --&gt; WEP --&gt; WPA+TKIP --&gt; WPA+AES --&gt; <font color=\"green\">WPA2+AES</font>\n</p><p><br>\n</p>\n<a name=\"WPA_Algorithms\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=17\" title=\"Edit section: WPA Algorithms\">edit</a>]</span> <span class=\"mw-headline\">WPA Algorithms</span></h3>\n<p><b>Available Settings:</b> AES, TKIP+AES, TKIP\n</p><p><b>Default Setting:</b> Disabled\n</p><p><b>Recommended Setting:</b> AES\n</p><p><br>\nThe core of your wireless security strength besides having a complex password &amp; works hand in hand with security mode, to follow IEEE 802.11n/ac spec, you MUST use WPA2 Personal or WPA2 Personal Mixed + AES (inc Enterprise) do NOT ever, ever, use TKIP or even TKIP+AES or you will be forced down to a/g speeds along with your wireless security being weak. If you have some older devices that don't support WPA2, only WPA &amp; WEP, don't worry &amp; do NOT use WEP! Use WPA2 Personal Mixed + AES, this still follows spec &amp; allows full speed link rates with the best security possible. By default all wireless devices always connect using their strongest supported security, ie if your network has all WPA2 AES supported clients, but you have a PSP that only supports WPA AES, your other clients will still use WPA2 AES while the PSP uses WPA AES, no problem. <b>Having this set to TKIP or TKIP+AES in conjunction with incorrect security mode noted above, is THE leading cause of not getting n/ac speeds in DD-WRT.</b> <a href=\"http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\" class=\"external text\" title=\"http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\" rel=\"nofollow\">See this link for more in depth info about AES which stands for Advanced Encryption System.</a>\n</p><p><br>\n</p>\n<a name=\"WPA_Shared_Key\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=18\" title=\"Edit section: WPA Shared Key\">edit</a>]</span> <span class=\"mw-headline\">WPA Shared Key</span></h3>\n<p><b>Available Settings:</b> Anything\n</p><p><b>Recommended Setting:</b> Whatever you want, make it rememberable &amp; difficult/random\n</p><p><br>\nThis is your network password, make it complex coupled with WPA2 AES, you'll have the best security available, theres no WPA3 AES (yet)! The \"unmask\" checkbox toggles between hiding your password with the traditional dots, or displaying it in clear text.\n</p><p><br>\n</p>\n<a name=\"Key_Renewal_Interval\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=19\" title=\"Edit section: Key Renewal Interval\">edit</a>]</span> <span class=\"mw-headline\">Key Renewal Interval</span></h3>\n<p><b>Available Settings:</b> 1 ~ 99999\n</p><p><b>Default Setting:</b> 3600\n</p><p><b>Recommended Setting:</b> 3600\n</p><p><br>\nIn seconds, which is 1 hour by default for almost every router firmware out there including stock (3600 sec = 1 hr), is how often the wireless encryption key is changed, this is NOT your password changing, this is within the core of how wireless security functions &amp; is a instant seamless silent event that happens with all connected clients every hour by default. Most users have no need to change this setting, its purpose is to further thwart off potential hackers &amp; thieves by having the encryption key change frequently, WPA2 AES is extremely hard to crack &amp; in the event a stranger in range was pulling their hair out trying to break in to your network, once the key refreshes they'll have to start all over again with a different encryption key to defeat.\n</p><!-- \nPre-expand include size: 3261 bytes\nPost-expand include size: 1402 bytes\nTemplate argument size: 276 bytes\nMaximum: 2097152 bytes\n-->\n\n<!-- Saved in parser cache with key wiki_ddwrt-mw_:pcache:idhash:5515-0!1!0!!en!2 and timestamp 20210529050705 -->\n<div class=\"printfooter\">\nRetrieved from \"<a href=\"http://forum.dd-wrt.com/wiki/index.php/Basic_Wireless_Settings\">http://forum.dd-wrt.com/wiki/index.php/Basic_Wireless_Settings</a>\"</div>\n            <div id=\"catlinks\"><p class=\"catlinks\"><a href=\"/wiki/index.php/Special:Categories\" title=\"Special:Categories\">Categories</a>: <span dir=\"ltr\"><a href=\"/wiki/index.php/Category:Wlan\" title=\"Category:Wlan\">Wlan</a></span> | <span dir=\"ltr\"><a href=\"/wiki/index.php/Category:Documentation\" title=\"Category:Documentation\">Documentation</a></span> | <span dir=\"ltr\"><a href=\"/wiki/index.php/Category:Basic_tutorials\" title=\"Category:Basic tutorials\">Basic tutorials</a></span></p></div>            <!-- end content -->\n            <!-- show back to top link only if the body is longer than the window height -->\n            <script type=\"text/javascript\">\n                var winheight = parseInt(document.documentElement.clientHeight)\n                var boheight = parseInt(document.body.scrollHeight)\n                if(winheight <= boheight) {\n                    document.write('<div class=\"backToTop\"><a href=\"#\" onclick=\"window.scrollTo(0,0);return false;\" title=\"Back to the top of the page\">&nbsp;</a></div>');\n                }\n            </script><div class=\"backToTop\"><a href=\"#\" onclick=\"window.scrollTo(0,0);return false;\" title=\"Back to the top of the page\">&nbsp;</a></div>\n            <div class=\"visualClear\"></div>\n        </div>\n    </div>",
      "html": "<div id=\"content\">\n        <a name=\"top\" id=\"top\"></a>\n                <h1 class=\"firstHeading\">Basic Wireless Settings</h1>\n        <div id=\"bodyContent\" class=\"gumax-bodyContent\">\n            <h3 id=\"siteSub\">From DD-WRT Wiki</h3>\n<table id=\"toc\" class=\"toc\" summary=\"Contents\"><tbody><tr><td><div id=\"toctitle\"><h2>Contents</h2> <span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>\n<ul>\n<li class=\"toclevel-1\"><a href=\"#Basic_Wireless_Settings\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Basic Wireless Settings</span></a>\n<ul>\n<li class=\"toclevel-2\"><a href=\"#Introduction\"><span class=\"tocnumber\">1.1</span> <span class=\"toctext\">Introduction</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Regulatory_Domain\"><span class=\"tocnumber\">1.2</span> <span class=\"toctext\">Regulatory Domain</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Regulatory_Mode\"><span class=\"tocnumber\">1.3</span> <span class=\"toctext\">Regulatory Mode</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#TPC_Mitigation_Factor\"><span class=\"tocnumber\">1.4</span> <span class=\"toctext\">TPC Mitigation Factor</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Physical_Interface\"><span class=\"tocnumber\">1.5</span> <span class=\"toctext\">Wireless Physical Interface</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Mode\"><span class=\"tocnumber\">1.6</span> <span class=\"toctext\">Wireless Mode</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Network_Mode\"><span class=\"tocnumber\">1.7</span> <span class=\"toctext\">Wireless Network Mode</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Channel\"><span class=\"tocnumber\">1.8</span> <span class=\"toctext\">Wireless Channel</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Channel_Width\"><span class=\"tocnumber\">1.9</span> <span class=\"toctext\">Channel Width</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Sensitivity_Range_.28ACK_Timing.29\"><span class=\"tocnumber\">1.10</span> <span class=\"toctext\">Sensitivity Range (ACK Timing)</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Network_Name_.28SSID.29\"><span class=\"tocnumber\">1.11</span> <span class=\"toctext\">Wireless Network Name (SSID)</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_SSID_Broadcast\"><span class=\"tocnumber\">1.12</span> <span class=\"toctext\">Wireless SSID Broadcast</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Network_Configuration\"><span class=\"tocnumber\">1.13</span> <span class=\"toctext\">Network Configuration</span></a></li>\n<li class=\"toclevel-2\"><a href=\"#Wireless_Security\"><span class=\"tocnumber\">1.14</span> <span class=\"toctext\">Wireless Security</span></a>\n<ul>\n<li class=\"toclevel-3\"><a href=\"#Security_Mode\"><span class=\"tocnumber\">1.14.1</span> <span class=\"toctext\">Security Mode</span></a></li>\n<li class=\"toclevel-3\"><a href=\"#WPA_Algorithms\"><span class=\"tocnumber\">1.14.2</span> <span class=\"toctext\">WPA Algorithms</span></a></li>\n<li class=\"toclevel-3\"><a href=\"#WPA_Shared_Key\"><span class=\"tocnumber\">1.14.3</span> <span class=\"toctext\">WPA Shared Key</span></a></li>\n<li class=\"toclevel-3\"><a href=\"#Key_Renewal_Interval\"><span class=\"tocnumber\">1.14.4</span> <span class=\"toctext\">Key Renewal Interval</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</td></tr></tbody></table><script type=\"text/javascript\"> if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } </script>\n<a name=\"Basic_Wireless_Settings\"></a><h1><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=1\" title=\"Edit section: Basic Wireless Settings\">edit</a>]</span> <span class=\"mw-headline\"> Basic Wireless Settings </span></h1>\n<a name=\"Introduction\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=2\" title=\"Edit section: Introduction\">edit</a>]</span> <span class=\"mw-headline\"> Introduction </span></h2>\n<p>Note, if you do not see a certain setting on your router, it may be on a different screen or it is not supported. If in doubt, ask on the forums.\n</p><p>See: <a href=\"/wiki/index.php/Advanced_wireless_settings\" title=\"Advanced wireless settings\">Advanced Wireless Settings</a> for the rest of the settings not found on this page.\n</p>\n<a name=\"Regulatory_Domain\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=3\" title=\"Edit section: Regulatory Domain\">edit</a>]</span> <span class=\"mw-headline\"> Regulatory Domain </span></h2>\n<p><b>Available Settings:</b> 115+ different countries (several countries share the same regulations) \n</p><p><b>Default Setting:</b> Germany \n</p><p>This determines the channels available in the list for both bands (if you have a dual band router) and the maximum <a href=\"http://en.wikipedia.org/wiki/Equivalent_isotropically_radiated_power\" class=\"external text\" title=\"http://en.wikipedia.org/wiki/Equivalent_isotropically_radiated_power\" rel=\"nofollow\">EIRP</a> \"legally\" allowed by the telecom authorities in the chosen country. EIRP is TX power plus antenna gain, example: * 20 dBm TX power with a 10 dBi gain antenna has an EIRP of 30 dBm. \n</p>\n<ul><li> 24 dBm TX power with a 6 dBi gain antenna has an EIRP of 30 dBm. \n</li></ul>\n<p><br>\n</p><p>Maximum EIRP varies by nation and your max TX power will be capped by the regulatory domain if you have a powerful radio. For example, Canada's max allowed EIRP is 36 dBm while its max allowed TX power is 30 dBm, with Canada selected and antenna gain at 0 dBi, the radios will never go above 30 dBm assuming they are capable of reaching that of course. \n</p>\n<a name=\"Regulatory_Mode\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=4\" title=\"Edit section: Regulatory Mode\">edit</a>]</span> <span class=\"mw-headline\"> Regulatory Mode </span></h2>\n<p><b>Available Settings:</b> Off, 802.11h Loose, 802.11h Strict, 802.11d\n</p><p><b>Default Setting:</b> Off\n</p><p><b>Recommended Setting:</b> Off\n</p><p>Here's some information on what 80211h was supposed to do:<i>IEEE 802.11h is the IEEE standard for Spectrum and Transmit Power Management Extensions. It solves problems like interference with satellites and radar using the same 5 GHz frequency band. It was originally designed to address European regulations but is now applicable in many other countries. The standard provides Dynamic Frequency Selection (DFS) and transmit Power Control (TPC) to the IEEE 802.11a MAC.</i>\n</p>\n<a name=\"TPC_Mitigation_Factor\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=5\" title=\"Edit section: TPC Mitigation Factor\">edit</a>]</span> <span class=\"mw-headline\"> TPC Mitigation Factor </span></h2>\n<p><b>Available Settings:</b> 0 (Off), 1, 2, 3, 4\n</p><p><b>Default Setting:</b> Off\n</p><p><b>Recommended Setting:</b> Off\n</p><p>Here is what it changes: <a href=\"https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-3/b_RRM_White_Paper/b_RRM_White_Paper_chapter_0101.html\" class=\"external free\" title=\"https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-3/b_RRM_White_Paper/b_RRM_White_Paper_chapter_0101.html\" rel=\"nofollow\">https://www.cisco.com/c/en/us/td/docs/wireless/controller/technotes/8-3/b_RRM_White_Paper/b_RRM_White_Paper_chapter_0101.html</a> \n</p>\n<a name=\"Wireless_Physical_Interface\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=6\" title=\"Edit section: Wireless Physical Interface\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Physical Interface </span></h2>\n<p><b>Available Interfaces:</b> athX (0, 1, 2 etc, varies by router as many routers have 2 or more radios in them) \n</p><p>If you have a dual band router ath1 will be displayed below ath0 with the same available settings. Ath0 is the 2.4GHz radio and ath1 is the 5GHz radio for most routers, for some like the TL-WDR4900 v1.3, ath0 is 5GHz &amp; ath1 is 2.4GHz; its just the way the radios are connected on the PCB &amp; is normal. If you create a VAP for 2.4GHz or 5GHz radio the VAPs will be labelled athX.1 &amp; athX.1 respectively where X = the interface's number. For example, a VAP made on ath0 will be ath0.1, then ath0.2, etc. Refer to <a href=\"http://www.dd-wrt.com/phpBB2/viewtopic.php?t=47708\" class=\"external text\" title=\"http://www.dd-wrt.com/phpBB2/viewtopic.php?t=47708\" rel=\"nofollow\">this thread</a> for some info about VAPs with Qualcomm Atheros. \n</p><p><br>\n</p>\n<a name=\"Wireless_Mode\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=7\" title=\"Edit section: Wireless Mode\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Mode  </span></h2>\n<p><b>Atheros available Settings:</b> AP, Client, Client Bridge, Adhoc, WDS Station, WDS AP<b>Broadcom available Settings:</b> AP, Client, Client Bridge, Adhoc, Repeater, Repeater Bridge<b>Default Setting</b> AP<b>Recommended Setting:</b> AP for most users, other options if you are advanced and know you need it \n</p><p><b>The help file says...</b> * The wireless part of your router can run in different modes: \n</p>\n<ul><li> AP mode â€“ This is the default mode, also called Infrastructure mode. Your router acts as an central connection point, to which wireless clients can connect. \n</li><li> Client mode â€“ The radio interface is used to connect the internet-facing side of the router (i.e., the WAN) as a client to a remote access point. NAT or routing are performed between WAN and LAN, like in \"normal\" gateway or router mode. Use this mode, e.g., if your internet connection is provided by a remote access point, and you want to connect a subnet of your own to it. \n</li><li> Client Bridged mode â€“ The radio interface is used to connect the LAN side of the router to a remote access point. The LAN and the remote AP will be in the same subnet (This is called a \"bridge\" between two network segments). The WAN side of the router is unused and can be disabled. Use this mode, e.g., to make the router act as a \"WLAN adapter\" for a device connected to one of its LAN Ethernet ports. \n</li><li> Ad-Hoc mode â€“ This is for peer to peer wireless connections. Clients running in Ad-Hoc mode can connect to each other as required without involving central access points. \n</li><li> See this page for more info on linking routers: <a href=\"https://www.dd-wrt.com/wiki/index.php/Linking_Routers\" class=\"external free\" title=\"https://www.dd-wrt.com/wiki/index.php/Linking_Routers\" rel=\"nofollow\">https://www.dd-wrt.com/wiki/index.php/Linking_Routers</a>\n</li></ul>\n<p><br>\n</p><p><b>How it works:</b>Determines how the specific wireless interface of the router is to behave. If you want to run a normal access point which most do, AP would be your choice. Client and Client Bridge with Virtual Interfaces is the Atheros equivalent Broadcom's Repeater and Repeater Bridge settings. \n</p><p><br>\n</p>\n<a name=\"Wireless_Network_Mode\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=8\" title=\"Edit section: Wireless Network Mode\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Network Mode  </span></h2>\n<p><b>Available Settings (2.4 GHz):</b> Disabled, Mixed, B-Only, G-Only, BG-Mixed, NG-Mixed, N-Only (2.4 GHz) \n</p><p><b>Available Settings (5 GHz):</b> Disabled, Mixed, A-Only, NA-Mixed, AC/N-Mixed, N-Only (5 GHz), AC-Only \n</p><p><b>Available Settings (60 GHz):</b> Disabled, Mixed, AD-Only \n</p><p><b>Default Setting:</b> Mixed \n</p><p><b>Recommended Setting:</b> NG-Mixed (2.4 GHz), AC/N-Mixed (5 GHz), AD-Only (60 GHz) \n</p><p>Controls which 802.11 signals are being broadcast by the radio. Depending on the selected network mode your wireless channel list and maximum TX power can vary. NG-Mixed for 2.4 GHz &amp; Mixed or AC/N-Mixed is the recommended setting for most people as your clients' NICs are able to use either (V)HT20, (V)HT40, &amp; VHT80 \"properly\" with this setting. If you have any issues or do not use 802.11b clients, switch to NG-Mixed. N-Only is broken on many units for some time (both bands) &amp; still is, try to avoid using as there is minimal performance change from NG-Mixed -&gt; N-Only if all you use is 802.11n clients for either of them. For 802.11a/n 5 GHz radios, Mixed &amp; NA-Mixed are the same. \n</p><p>Note on BCM routers, client / client bridged modes only should use straight mixed mode.\n</p><p><br>\n<b>The help file says...</b> * If you wish to exclude Wireless-G clients, choose B-Only mode. If you would like to disable wireless access, choose Disable.\n</p><p><br>\n</p><p>Note&nbsp;: when changing wireless mode, some advanced parameters are susceptible to be modified (\"Afterburner\", \"Basic Rate\" or \"Frame Burst\"). \n</p><p><b>How it works:</b> \n</p><p>In Mixed mode, dd-wrt routers are able to offer various wifi network types (B, G and N) at the same time from a single 2.4GHz radio. 802.11n transmission is always embedded in an 802.11a, for 5GHz radios, or 802.11g for 2.4GHz radio transmissions. This is called Mixed Mode Format protection (also known as L-SIG TXOP Protection). \n</p><p><b>See also:</b> \n</p>\n<ul><li> <a href=\"/wiki/index.php/Wireless-N_Configuration\" title=\"Wireless-N Configuration\">Wireless-N Configuration</a> - not required if recommended settings are used from this page.\n</li><li> <a href=\"/wiki/index.php/Wireless-N_Throughput_Testing\" title=\"Wireless-N Throughput Testing\">Wireless-N Throughput Testing</a>\n</li></ul>\n<a name=\"Wireless_Channel\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=9\" title=\"Edit section: Wireless Channel\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Channel  </span></h2>\n<p><b>Available Settings (2.4 GHz):</b> Channels 1 ~ 14 depending on your regulatory domain &amp; channel width \n</p><p><b>Available Settings (5 GHz):</b> Channels 34 ~ 48 (U-NII-1), 52 ~ 64 (U-NII-2), 100 ~ 144 (U-NII-2e), 149 ~ 161 (U-NII-3), 165 (ISM) depending on your regulatory domain* \n</p><p><b>Available Settings (60 GHz):</b> Channels 1 ~ 4 depending on your regulatory domain* \n</p><p><b>Default Setting:</b> Auto \n</p><p><b>Recommended Setting:</b> Please actually pick a channel and try to use the cleanest channel with the least noise, most stable throughput, &amp; lowest latency jitter. Using Channels 1, 6, or 11 assures no overlap with the adjacent channels. Using other channels will work, but may overlap with neighboring wifi which will likely be using one of the three channels above. \n</p><p><b>The help file says...</b> * Select the appropriate channel from the list provided to correspond with your network settings (in North America between channel 1 and 11, in Europe 1 and 13, in Japan all 14 channels). All devices in your wireless network must use the same channel in order to function correctly. Try to avoid conflicts with other wireless networks by choosing a channel where the upper and lower three channels are not in use. \n</p><p><br>\n</p><p><b>How it works:</b> \n</p><p>IEEE 802.11 is a set of standards that are published for the purposes of carrying out wireless local area network (WLAN) computer communication in the 2.4, 3.6 and 5 GHz frequency bands. They are implemented by the IEEE LAN/MAN Standards Committee ( aka \"IEEE 802\"). \n</p><p>2.4GHz Channels \n</p><p>2.4GHz band in the 802.11 standard uses radio frequencies in the range of 2.412-2.484 GHz. 802.11 splits up the frequencies within the band into 14 radio channels, numbered 1-14. These are the 14 channels designated in the 2.4 GHz range spaced 5 MHz apart (with the exception of a 12 MHz spacing before Channel 14). The frequency range of a channel partially overlaps with the next one, so not all the channels are therefore independent. By default on a 2.4GHz band radio DD-WRT routers, channels 1, 6 and 11 have no overlap with each other; those three channels are known in the wireless community as the \"standard\" for wireless channel independence within the 2.4GHz band. \n</p><p>In North America this 2.4GHz \"band\" is implemented by dividing the 2.4GHz band into 13 channels each with a width of 22 MHz but also spaced only 5 MHz apart, with channel 1 centred on 2412 MHz and 13 on 2472, to which Japan adds a 14th channel 12 MHz above channel 13. \n</p><p>5GHz Channels \n</p><p>5GHz band in the 802.11 standard uses radio frequencies in the range of 4.980 GHz to 5.825 GHz. 802.11 splits up the frequencies within the band into 42 wireless radio channels, numbered 7 to 196. These are the 42 channels designated in the 5 GHz range and they are spaced 5 MHz apart. The frequency range of a channel partially overlaps with the next one, so not all the channels are therefore independent but unlike the 2.4GHz band the 5GHz band offers many more non overlapping channels. \n</p><p>In North America this 5GHz \"band\" is implemented by dividing the 5GHz band into 24 channels (36 to 165) each with a width of 22 MHz but also spaced only 5 MHz apart, with channel 36 centred on 5.180 GHz and 165 on 5.825 GHz. \n</p><p>NOTE - The specifics of the frequency range and how channels are allocated is regulated by each country. Usually constrained in part by how each country allocates radio spectrum to various services. For example, in the 2.4Ghz band Japan has implemented 1 to 14 wireless channels, Europe #1-#13 and the FCC in the US decided with 1 to 11 wireless channels all within the same band. DD-WRT allows the use of all channels; this doesn't mean your client wireless adapter can support channels outside of its licensed region. \n</p><p>How it works in DD-WRT: To configure your radio channels in the WebGUI you browse to the \"Basic Settings\" under the \"Wireless\" page on your DD-WRT router. \n</p><p>If you have dual band router (ie. Two Radios inside the router) you will see two sections for configurations listed in this page with the headings as \"wl0\" for the 2.4GHz radio and \"wl1\" for the 5GHz radio. \n</p><p>DD-WRT has channel configuration settings that must be configured; \n</p><p>Wireless mode, this determines if the router will be used as an Access Point, Repeater, Client or in an Ad-hoc configuration mode. Channel options are only avalaible to a router running in AP or Ad-Hoc wireless mode. \n</p><p>Wireless Network mode, this setting determines what wireless protocols will be offered to the wireless clients that try to connect to the router. Depending on the wireless network mode your radio is configured for DD-WRT will have additional channel options for you to configure if you choose. \n</p><p><br>\n</p>\n<ul><li> If you want to introduce channel bonding in your wireless enviroment you should also start with \"CTS Protection\" set to Auto as well.\n</li></ul>\n<a name=\"Channel_Width\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=10\" title=\"Edit section: Channel Width\">edit</a>]</span> <span class=\"mw-headline\"> Channel Width </span></h2>\n<p>This determines the wireless channel width used- where higher values allow more bandwidth/throughput, but yield fewer free channels, and result in more overlapping channels. Using lower MHz channel width values yields more free non-overlapping channels but means less bandwidth/throughput is available. For a full table of possible MCS index connection rates see <a href=\"http://www.mcsindex.com\" class=\"external autonumber\" title=\"http://www.mcsindex.com\" rel=\"nofollow\">[1]</a>\n</p><p><br>\n<b>BEFORE DOING ANYTHING- MAKE NOTE:</b>\n</p><p><b>1) Select your country first and YOU MUST HIT APPLY! The driver needs to reconfigure the country for the speific wifi chipset and then the router needs to get the updated channel list for your country</b>\n</p><p><b>2) Set the Channel Width and hit Save.</b>\n</p><p><b>3A) Select the correct WiFi \"carrier\" channel and concurrently go to step 3B.</b>\n</p><p><b>3B) Set the Extension Channel UU, LL, UL, or LU .</b> (See table below of valid VHT80 &amp;VHT160 extensions)\n</p><p><br>\n<i>Carrier channel is defined as the main 20Mhz channel that \"carrying\" the signal. Extension channels are then added to yield HT40, VHT80, and VHT160. </i>\n</p><p><br>\n<b>Available Settings (2.4 GHz):</b> Dynamic (20/40 MHz), Wide HT40* (40 MHz), Full (20 MHz), Half (10 MHz)*, Quarter (5 MHz)*\n</p><p><i>*Note 1: You MUST have this setting on Wide HT40 (40 MHz) to allow 802.11n devices (2.4 GHz &amp; 5 GHz) to connect at their max!</i>\n<i>*Note 2&amp;3: Half (10MHz) and Quarter (5MHz) may not be supported on all models. It is best to just use Full (20MHz) or wider.</i> \n</p><p><b>Available Settings (5 GHz):</b> VHT160*, VHT160 (80+80 MHz)*, VHT80 (80 MHz)*, Dynamic (20/40 MHz), Wide HT40 (40 MHz), Full (20 MHz)\n</p><p><i>*Note: VHT80 (80 MHz), VHT160 (80+80 MHz), &amp; VHT160 is only displayed &amp; available for 802.11ac (5 GHz) routers that support it, &amp; it's required to reach the max MCS link rates of 802.11ac</i>\n</p><p><i>*WARNING ABOUT USING VHT160-Using DFS channels can significantly increase 5 GHz association times because devices (STAs) can only passively scan for available APs. So instead of being able to send out a probe request and waiting for APs to reply, a STA using DFS channels must wait until an AP announces itself. You wouldn't think this would make much difference, but when switching from running 2.4 to 5 GHz tests, it took over a minute to find and associate to the router's 5 GHz SSID.</i>\n</p>\n<hr>\n<p><b>Default Settings (2.4ghz):</b> Full (20 MHz)\n</p><p><br>\n<b>Recommended Setting (2.4 GHz):</b> Full (20 MHz)- Why? Because nearly all cell phones and tablets will limit their channel width to only 20MHz if they detect neighboring routers/wifi AP's and so 40MHZ wide communication will not be allowed; even if you enable HT40 on the router.  Your mileage may vary by enabling HT40 on the router for phones and tablets. As far as Laptops/Desktops, they usually have a way to allow 40MHz wide channels in the advanced driver settings. Disable \"Fat Channel Intolerant\" to take advantage of 40MHz on Windows OS's. Using HT40 enables channel bonding by using 2x20 MHz wide channels together to equal 40Mhz; but, it's considered \"not neighbor friendly\" and discouraged by industry standards- as noted above for android &amp; iPhone HT20 limit. Using HT40 may, <b>but usually doesn't</b>, create more interference for neighbors; it's usually not an issue unless you're in VERY packed/dense/congested wireless area like apartments- Again YMMV with HT40. HT40 allows your 802.11n devices to connect at their max rate: 300 Mbps (2x2:2 stream clients).\n</p><p><i>*Note: 193mbps is not an officially recognized MCS index rate, but some devices have reported 193mbps vs 173; 173 is the maximum for 2x2:2 stream clients per 802.11ac industry standards.</i>\n</p><p><b>Recommended Setting (5 GHz):</b> VHT80 (80 MHz), or Wide HT40 (40 MHz). For wifi 5-wave 2 routers, VHT160 can only be taken advantage of by two/three Intel Wifi cards right now (9260/9265/AX200 2x2:2); otherwise, backhaul from one VHT160 capable router to another VHT160 capable router is the other reason to use VHT160 right now. Also to note, VHT160 operates in spectrum which requires reduced TX pwr vs. VHT80: VHT160 spectrum only allows 23dBm vs. 30dBm for VHT80 (USA and similar countries). So, use VHT160 if you know you have clients that can take advantage of it; but realize your TX distance may be worse than if you use VHT80. Also note, it may take up to a minute to find your 5ghz signal if using VHT160 mode.\n</p><p><br>\n<i>Lastly, very few clients are 3x3 or 4x4 stream capable; usually only desktop wifi cards are 3x3 or 4x4 (due to space limits in tablets, phones, and laptops &amp; cost of more antenna's). You'll obviously gain more throughput by having 3x3 or 4x4 capable routers &amp; clients. Nearly all phones and tablets are 2x2:2 stream devices, at best, right now (limited room for 4 antenna's &amp; cost too). AFAIK, all laptops use 2x2:2 stream cards; though, apple has a few 3x3:3 stream cards in their devices...use google to find 3x3 or 4x4 stream wifi clients.</i>\n</p>\n<hr>\n<p><br>\n<b>!!!For BCM routers, you need to swap UU, UL, LU, and LL meanings (Not sure if this is a BCM issue or how BS coded the tables in the code)!!!</b>\n</p><p><b><i>FOR BCM-confirmed that in the table below you need to swap:</i></b>\n</p>\n<pre>UU- Select LL in gui \nUL- Select LU in gui\nLU- Select UL in gui\nLL-Select UU in gui\n</pre>\n<p>The below is the technical \"right\" way to describe the extension channels- use the above conversion on BCM routers. QCA implements per the below.\n</p><p>Valid VHT80 channels are: \n</p>\n<ul><li> 36+UU \n</li><li> 40+UL \n</li><li> 44+LU \n</li><li> 48+LL \n</li><li> 52+UU \n</li><li> 56+UL \n</li><li> 60+LU \n</li><li> 64+LL \n</li><li> 100+UU \n</li><li> 104+UL \n</li><li> 108+LU \n</li><li> 112+LL \n</li><li> 116+UU \n</li><li> 120+UL \n</li><li> 124+LU \n</li><li> 128+LL \n</li><li> 132+UU \n</li><li> 136+UL \n</li><li> 140+LU \n</li><li> 144+LL \n</li><li> 149+UU \n</li><li> 153+UL \n</li><li> 157+LU \n</li><li> 161+LL \n</li></ul>\n<p><br>\n</p><p>Valid VHT160 channels are: * 36+UUU \n</p>\n<ul><li> 64+LLL \n</li><li> 100+UUU \n</li><li> 128+LLL\n</li></ul>\n<a name=\"Sensitivity_Range_.28ACK_Timing.29\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=11\" title=\"Edit section: Sensitivity Range (ACK Timing)\">edit</a>]</span> <span class=\"mw-headline\"> Sensitivity Range (ACK Timing)  </span></h2>\n<p><b>Available Settings:</b> 0 ~ 999999 (meters) \n</p><p><b>Default Setting:</b> 500 (Used to be 2000 meters or approx. 1.242742 Miles) \n</p><p><b>Recommended Setting:</b> 90 (meters) for both bands. IEEE Spec is 300 feet and realistic! (90 meters is approx. 295.276 feet and most compatible with Atheros settings! 2000 meters is 1.242742 miles!). Unless you are using specialized equipment outdoors (For example Ubiquiti Networks equipment) you will suffer performance issues, cross-talk, and throughput drops. Try 90 first, if you have issues then try higher values like 120 up to 500 (in increments of 5). Values over 500 are only used when <b>needed</b> for long distance high performance links using specialized equipment.\n</p><p><br>\n<b>The help file says...</b> * Adjusts the ACK timing in Atheros typical way based on the maximum distance in meters. \n</p><p>A value of 0 disables ACK timing completely for Broadcom firmware. \nOn Atheros based firmware a value of 0 will turn into auto ACK timing mode. \n<b>BCM users, you can try setting ACK timing to 0 and check performance on clients- this may cause issues on QCA based clients.</b>\n</p><p><br>\n<b>How it works:</b> # AP sends a message: Everybody wait X time for a response \n</p>\n<ol><li> Client receives \n</li><li> Client sends a response to the AP called an ACK - Acknowledges the command waiting for X time. \n</li><li> AP sees the ACK \n</li><li> Other Clients and AP are free to send \n</li></ol>\n<p><br>\n</p><p>-ACK timing adjustment is used for distance links when the time needed to transmit is greater than the amount of time the sender waits before retrying to transmit the same packet again. \n</p><p>-You want to set the ACK timing to 2x the distance between bridged routers measured in meters. \n</p><p>-If the ACK timing is too high it will not affect the throughput that much. If the ACK time is too low it can drop your throughput to the point of being unusable and can even make the system not connect. \n</p><p>-Recommended setting is 0 for a household network. Which for Linksys users means DD-WRT doesn't use ACK timing at all.\n</p>\n<a name=\"Wireless_Network_Name_.28SSID.29\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=12\" title=\"Edit section: Wireless Network Name (SSID)\">edit</a>]</span> <span class=\"mw-headline\"> Wireless Network Name (SSID) </span></h2>\n<p><b>Default Setting:</b> ddwrt \n</p><p>This is where you can choose the name of your wireless network when its being broadcast to roaming clients. You can name this anything you want. \n</p><p><br>\n</p>\n<a name=\"Wireless_SSID_Broadcast\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=13\" title=\"Edit section: Wireless SSID Broadcast\">edit</a>]</span> <span class=\"mw-headline\"> Wireless SSID Broadcast </span></h2>\n<p><b>Available Settings:</b> Enable, disable \n</p><p><b>Default Setting:</b> Enable \n</p><p><b>Recommended Setting:</b> Enable \n</p><p>Dependent on the setting above, this controls if your SSID is being broadcast or not. When disable is selected many clients still pick up the beacon and display it as \"Hidden\" along with the AP's MAC address. Disabling is not recommended as it hardly does anything for security, a determined intruder can still access your network with different methods. \n</p>\n<a name=\"Network_Configuration\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=14\" title=\"Edit section: Network Configuration\">edit</a>]</span> <span class=\"mw-headline\"> Network Configuration </span></h2>\n<p><b>Available Settings:</b> Unbridged, Bridged \n</p><p><b>Default Setting:</b> Bridged \n</p><p><b>Recommended Setting:</b> Bridged \n</p><p>This setting controls if the wireless interface is \"bridged\" with the LAN ports. Bridged meaning a client on the wireless interface and a client on the Ethernet LAN interface are on the same network on the same subnet. Unbridged allows you to \"separate\" the WLAN (wireless LAN) by giving it its own subnet and even its own DHCP server. If you want a unbridged interface, you are better off creating a VAP instead of unbridging the main interface.\n</p>\n<a name=\"Wireless_Security\"></a><h2><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=15\" title=\"Edit section: Wireless Security\">edit</a>]</span> <span class=\"mw-headline\">Wireless Security</span></h2>\n<p>More info, not updated: <a href=\"/wiki/index.php/Wireless_security\" title=\"Wireless security\">Wireless Security</a>\n</p>\n<a name=\"Security_Mode\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=16\" title=\"Edit section: Security Mode\">edit</a>]</span> <span class=\"mw-headline\">Security Mode</span></h3>\n<p><b>Available Settings:</b> Disabled, WPA Personal, WPA Enterprise, WPA2 Personal, WPA2 Enterprise, WPA2 Personal Mixed, WPA2 Enterprise Mixed, RADIUS, WEP\n</p><p><b>Default Setting:</b> Disabled\n</p><p><b>Recommended Setting:</b> WPA2 Personal or WPA2 Personal Mixed (inc Enterprise)\n</p><p><br>\nDepends on what your network security needs are, for more advanced security like RADIUS etc. Do NOT use \"WPA\" (aka WPA1) only or WEP, they are weak ESPECIALLY WEP! Can be cracked easily, in seconds for the latter, they also go against the IEEE 802.11n/ac specification &amp; will usually force your link rates down to 802.11a/g speeds (54 Mbps!) This is one of the leading causes for users not knowing why they aren't getting N or AC speeds with DD-WRT.\n</p><p><br>\nSecurity from <font color=\"red\">weakest</font> --&gt; <font color=\"green\">strongest</font> goes in the following order (not counting enterprise):\n</p><p><br>\n<font color=\"red\">Unsecured</font> --&gt; WEP --&gt; WPA+TKIP --&gt; WPA+AES --&gt; <font color=\"green\">WPA2+AES</font>\n</p><p><br>\n</p>\n<a name=\"WPA_Algorithms\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=17\" title=\"Edit section: WPA Algorithms\">edit</a>]</span> <span class=\"mw-headline\">WPA Algorithms</span></h3>\n<p><b>Available Settings:</b> AES, TKIP+AES, TKIP\n</p><p><b>Default Setting:</b> Disabled\n</p><p><b>Recommended Setting:</b> AES\n</p><p><br>\nThe core of your wireless security strength besides having a complex password &amp; works hand in hand with security mode, to follow IEEE 802.11n/ac spec, you MUST use WPA2 Personal or WPA2 Personal Mixed + AES (inc Enterprise) do NOT ever, ever, use TKIP or even TKIP+AES or you will be forced down to a/g speeds along with your wireless security being weak. If you have some older devices that don't support WPA2, only WPA &amp; WEP, don't worry &amp; do NOT use WEP! Use WPA2 Personal Mixed + AES, this still follows spec &amp; allows full speed link rates with the best security possible. By default all wireless devices always connect using their strongest supported security, ie if your network has all WPA2 AES supported clients, but you have a PSP that only supports WPA AES, your other clients will still use WPA2 AES while the PSP uses WPA AES, no problem. <b>Having this set to TKIP or TKIP+AES in conjunction with incorrect security mode noted above, is THE leading cause of not getting n/ac speeds in DD-WRT.</b> <a href=\"http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\" class=\"external text\" title=\"http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\" rel=\"nofollow\">See this link for more in depth info about AES which stands for Advanced Encryption System.</a>\n</p><p><br>\n</p>\n<a name=\"WPA_Shared_Key\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=18\" title=\"Edit section: WPA Shared Key\">edit</a>]</span> <span class=\"mw-headline\">WPA Shared Key</span></h3>\n<p><b>Available Settings:</b> Anything\n</p><p><b>Recommended Setting:</b> Whatever you want, make it rememberable &amp; difficult/random\n</p><p><br>\nThis is your network password, make it complex coupled with WPA2 AES, you'll have the best security available, theres no WPA3 AES (yet)! The \"unmask\" checkbox toggles between hiding your password with the traditional dots, or displaying it in clear text.\n</p><p><br>\n</p>\n<a name=\"Key_Renewal_Interval\"></a><h3><span class=\"editsection\">[<a href=\"/wiki/index.php?title=Basic_Wireless_Settings&amp;action=edit&amp;section=19\" title=\"Edit section: Key Renewal Interval\">edit</a>]</span> <span class=\"mw-headline\">Key Renewal Interval</span></h3>\n<p><b>Available Settings:</b> 1 ~ 99999\n</p><p><b>Default Setting:</b> 3600\n</p><p><b>Recommended Setting:</b> 3600\n</p><p><br>\nIn seconds, which is 1 hour by default for almost every router firmware out there including stock (3600 sec = 1 hr), is how often the wireless encryption key is changed, this is NOT your password changing, this is within the core of how wireless security functions &amp; is a instant seamless silent event that happens with all connected clients every hour by default. Most users have no need to change this setting, its purpose is to further thwart off potential hackers &amp; thieves by having the encryption key change frequently, WPA2 AES is extremely hard to crack &amp; in the event a stranger in range was pulling their hair out trying to break in to your network, once the key refreshes they'll have to start all over again with a different encryption key to defeat.\n</p><!-- \nPre-expand include size: 3261 bytes\nPost-expand include size: 1402 bytes\nTemplate argument size: 276 bytes\nMaximum: 2097152 bytes\n-->\n<!-- Saved in parser cache with key wiki_ddwrt-mw_:pcache:idhash:5515-0!1!0!!en!2 and timestamp 20210529050705 -->\n<div class=\"printfooter\">\nRetrieved from \"<a href=\"http://forum.dd-wrt.com/wiki/index.php/Basic_Wireless_Settings\">http://forum.dd-wrt.com/wiki/index.php/Basic_Wireless_Settings</a>\"</div>\n            <div id=\"catlinks\"><p class=\"catlinks\"><a href=\"/wiki/index.php/Special:Categories\" title=\"Special:Categories\">Categories</a>: <span dir=\"ltr\"><a href=\"/wiki/index.php/Category:Wlan\" title=\"Category:Wlan\">Wlan</a></span> | <span dir=\"ltr\"><a href=\"/wiki/index.php/Category:Documentation\" title=\"Category:Documentation\">Documentation</a></span> | <span dir=\"ltr\"><a href=\"/wiki/index.php/Category:Basic_tutorials\" title=\"Category:Basic tutorials\">Basic tutorials</a></span></p></div>            <!-- end content -->\n            <!-- show back to top link only if the body is longer than the window height -->\n            <script type=\"text/javascript\">\n                var winheight = parseInt(document.documentElement.clientHeight)\n                var boheight = parseInt(document.body.scrollHeight)\n                if(winheight <= boheight) {\n                    document.write('<div class=\"backToTop\"><a href=\"#\" onclick=\"window.scrollTo(0,0);return false;\" title=\"Back to the top of the page\">&nbsp;</a></div>');\n                }\n            </script><div class=\"backToTop\"><a href=\"#\" onclick=\"window.scrollTo(0,0);return false;\" title=\"Back to the top of the page\">&nbsp;</a></div>\n            <div class=\"visualClear\"></div>\n        </div>\n    </div>",
      "id": 23
    },
    {
      "path": "Network_Net/download_youtube_videos.md",
      "url": "Network_Net/download_youtube_videos.html",
      "content": "https://ostechnix.com/20-ffmpeg-commands-beginners/\n\n> This tutorial explains the list of most commonly used Youtube-dl commands to download videos from Youtube and other websites in Linux.\n\n# Youtube-dl Tutorial With Examples For Beginners - OSTechNix\n**Youtube-dl** is a most popular command line YouTube downloader application. It is not just to download videos from Youtube, but also from a lot of other websites. You can view the complete list of supported sites [**here**](https://ytdl-org.github.io/youtube-dl/supportedsites.html). Youtube-dl can be able to download a single track or entire playlist in one go. It is a free and open source program written in **Python**. It supports GNU/Linux, Mac OS X and Microsoft Windows. In this detailed Youtube-dl tutorial, we will learn to use most commonly used commands with examples to download audio and video streams from online in Linux.\n\n1\\. Install Youtube-dl On Linux\n-------------------------------\n\nYoutube-dl can be installed in many ways.\n\n### 1.1. The officially recommended way to install Youtube-dl\n\nThe officially recommended way to install Youtube-dl is just download it, save it in your PATH, make it executable and start using it right away.\n\n$ sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl\n\nIf you don't have curl, use **`wget`** instead:\n\n$ sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl\n\n$ sudo chmod a+rx /usr/local/bin/youtube-dl\n\n### 1.2. Install Youtube-dl using Pip\n\nAlternatively, you can install it using [**Pip**](https://ostechnix.com/manage-python-packages-using-pip/) as shown below.\n\n$ sudo -H pip install --upgrade youtube-dl\n\n### 1.3. Install Youtube-dl using package manager\n\nYoutube-dl is also available in the official repositories of some Linux distributions. For example, you can install it in Arch Linux using command:\n\n$ sudo pacman -S youtube-dl\n\nOn Debian, Ubuntu, Linux mint:\n\n$ sudo apt install youtube-dl\n\nOn Fedora:\n\n$ sudo dnf install youtube-dl\n\n### 1.4. Install FFmpeg on Linux\n\nYoutube-dl depends on **FFmpeg** to download 720p videos from YouTube and convert videos to other formats. To install FFmpeg on Linux, refer the following guide.\n\n*   [**How to install FFmpeg on Linux**](https://ostechnix.com/install-ffmpeg-linux/)\n\n### 1.5. Update Youtube-dl\n\nIf you've manually installed Youtube-dl using `curl` or `wget`, run the following command to update it:\n\n$ sudo youtube-dl -U\n\nIf you installed it using `pip`, do:\n\n$ sudo pip install -U youtube-dl\n\nThose who installed Youtube-dl using the distribution's package manager, just use the appropriate update command. For example, on Arch Linux, you can update Youtube-dl by simply running the following command:\n\n$ sudo pacman -Syu\n\nOn Debian, Ubuntu:\n\n$ sudo apt update\n\nNow, let us see some examples to learn to use Youtube-dl.\n\n2\\. Youtube-dl Tutorial With Examples\n-------------------------------------\n\nHere, I have compiled most commonly used Youtube-dl commands to download a video or playlist from YouTube.\n\n### 2.1. Download video or playlist\n\nTo download a video or the entire playlist from YouTube, just mention the URL like below:\n\n$ youtube-dl https://www.youtube.com/watch?v=7E-cwdnsiow\n\nIf you want to download video or playlist with a custom name of your choice, the command would be:\n\n$ youtube-dl -o 'abdul kalam inspirational speech' https://www.youtube.com/watch?v=7E-cwdnsiow\n\nReplace \"abdul kalam inspirational speech\" with your own name.\n\nDo you want to save the video in some other location? Here you go!\n\n$ youtube-dl -o '~/Downloads/abdul kalam speech' https://www.youtube.com/watch?v=7E-cwdnsiow\n\nHere I am downloading the video to the **`Downloads`** directory.\n\n\\[youtube\\] 7E-cwdnsiow: Downloading webpage\n\\[download\\] Destination: /home/sk/Downloads/abdul kalam speech.f271\n\\[download\\] 100% of 111.86MiB in 01:00\n\\[download\\] Destination: /home/sk/Downloads/abdul kalam speech.f251\n\\[download\\] 100% of 6.12MiB in 00:03\n\\[ffmpeg\\] Merging formats into **\"/home/sk/Downloads/abdul kalam speech.webm\"**\nDeleting original file /home/sk/Downloads/abdul kalam speech.f271 (pass -k to keep)\nDeleting original file /home/sk/Downloads/abdul kalam speech.f251 (pass -k to keep)\n\nYou can also include additional details,  such as the title, the uploader name (channel name) and upload date etc., in the file name by using the following command:\n\n$ youtube-dl -o '%(title)s by %(uploader)s on %(upload\\_date)s in %(playlist)s.%(ext)s' https://www.youtube.com/watch?v=7E-cwdnsiow\n\n### 2.2. Download multiple videos\n\nSometimes, you might want to download multiple videos from or any other site. If so, just mention the URL of the videos with space-separated like below:\n\n$ youtube-dl <url1> <url2>\n\nAlternatively, you can put them all in a text file and pass it to Youtube-dl as an argument like below.\n\n$ youtube-dl -a url.txt\n\nThis command will download all videos mentioned in the url.txt file.\n\n### 2.3. Download audio-only from a video\n\nYoutube-dl allows us to download audio only from a YouTube video. If you ever been in a situation to download only the audio, run:\n\n$ youtube-dl -x https://www.youtube.com/watch?v=7E-cwdnsiow\n\nBy default, Youtube-dl will save the audio in **`Ogg`** (opus) format.\n\nIf you prefer to download any other formats, for example **`mp3`**, run:\n\n$ youtube-dl -x --audio-format mp3 https://www.youtube.com/watch?v=7E-cwdnsiow\n\nThis command will download the audio from the given video/playlist, convert it to an MP3 and save it in the current directory. Please note that you should install either **`ffmpeg`** or **`avconv`** to convert the file to mp3 format.\n\n### 2.4. Download video with description, metadata, annotations, subtitles and thumbnail\n\nTo download a video along with its other details such as description, metadata, annotations, subtitles, and thumbnail etc., use the following command:\n\n$ youtube-dl --write-description --write-info-json --write-annotations --write-sub --write-thumbnail https://www.youtube.com/watch?v=7E-cwdnsiow\n\n### 2.5. List all available formats of video or playlist\n\nTo list all available formats that a video or playlist is available in, use the following command:\n\n$ youtube-dl --list-formats https://www.youtube.com/watch?v=7E-cwdnsiow\n\nOr\n\n$ youtube-dl -F https://www.youtube.com/watch?v=7E-cwdnsiow\n\nSample output:\n\n[![List all available formats of a youtube video using youtube-dl](https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl.png \"List all available formats of a youtube video using youtube-dl\")](https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl.png)\n\nList all available formats of a YouTube video using youtube-dl\n\nAs you can see in the above screenshot, Youtube-dl lists all available formats of the given video. From left to right, it displays the video format code, extension and resolution note of the respective video. This can be helpful when you want to download a video at a specific quality or format.\n\n### 2.6. Display the size of Youtube videos\n\nTo retrieve the file size of a video, use **`-F`** flag.\n\n$ youtube-dl -F https://www.youtube.com/watch?v=7E-cwdnsiow\n\nYou will see the file size at the end of each file.\n\n**Sample output:**\n\n\\[youtube\\] 7E-cwdnsiow: Downloading webpage\n\\[info\\] Available formats for 7E-cwdnsiow:\nformat code  extension  resolution note\n249          webm       audio only tiny   51k , opus @ 50k (48000Hz), 2.56MiB\n250          webm       audio only tiny   68k , opus @ 70k (48000Hz), 3.23MiB\n140          m4a        audio only tiny  128k , m4a\\_dash container, mp4a.40.2@128k (44100Hz), 7.59MiB\n251          webm       audio only tiny  137k , opus @160k (48000Hz), 6.12MiB\n160          mp4        192x144    144p   52k , avc1.4d400c, 30fps, video only, 1.71MiB\n278          webm       192x144    144p   73k , webm container, vp9, 30fps, video only, 3.73MiB\n133          mp4        320x240    240p   89k , avc1.4d400d, 30fps, video only, 3.12MiB\n242          webm       320x240    240p  135k , vp9, 30fps, video only, 6.06MiB\n134          mp4        480x360    360p  215k , avc1.4d401e, 30fps, video only, 7.53MiB\n243          webm       480x360    360p  242k , vp9, 30fps, video only, 10.39MiB\n135          mp4        640x480    480p  382k , avc1.4d401e, 30fps, video only, 14.13MiB\n244          webm       640x480    480p  390k , vp9, 30fps, video only, 16.44MiB\n136          mp4        960x720    720p  737k , avc1.4d401f, 30fps, video only, 26.99MiB\n247          webm       960x720    720p  770k , vp9, 30fps, video only, 31.12MiB\n137          mp4        1440x1080  1080p 1391k , avc1.640028, 30fps, video only, 46.50MiB\n248          webm       1440x1080  1080p 1421k , vp9, 30fps, video only, 52.19MiB\n271          webm       1920x1440  1440p 3462k , vp9, 30fps, video only, 111.86MiB\n18           mp4        480x360    360p  360k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 21.55MiB\n22           mp4        960x720    720p  578k , avc1.64001F, mp4a.40.2@192k (44100Hz) (best)\n\n### 2.7. Download videos in certain quality and/or format\n\nBy default, Youtube-dl will download the best available quality video. However, it is also possible to download a video or playlist at a specific quality or format.\n\nYouTube is capable of downloading videos in the following qualities:\n\n*   **best** - Select the best quality format of the given file with video and audio.\n*   **worst** - Select the worst quality format (both video and audio).\n*   **bestvideo** \\- Select the best quality video-only format (e.g. DASH video). Please note that it may not be available.\n*   **worstvideo** - Select the worst quality video-only format. May not be available.\n*   **bestaudio** - Select the best quality audio only-format. May not be available.\n*   **worstaudio** - Select the worst quality audio only-format. May not be available.\n\nFor example, if you want to download **best quality** format (both audio and video), just use the following command:\n\n$ youtube-dl -f best https://www.youtube.com/watch?v=7E-cwdnsiow\n\nSimilarly, to download audio-only with best quality:\n\n$ youtube-dl -f bestaudio https://www.youtube.com/watch?v=7E-cwdnsiow\n\nTo download worst quality video-only format, use the following command:\n\n$ youtube-dl -f worstvideo https://www.youtube.com/watch?v=7E-cwdnsiow\n\nYou can also combine different format options like below.\n\n$ youtube-dl -f bestvideo+bestaudio https://www.youtube.com/watch?v=7E-cwdnsiow\n\nThe above command will download best quality video-only and best quality audio-only formats and merge them together with `ffmpeg` or `avconv`. Make sure you have installed any one of these tools on your system.\n\nIf you don't want to merge, replace **`+`** (plus) operator with **`,`** (comma) like below:\n\n$ youtube-dl -f 'bestvideo,bestaudio' https://www.youtube.com/watch?v=7E-cwdnsiow -o '%(title)s.f%(format\\_id)s.%(ext)s'\n\nThis command will download best quality video and best quality audio and **will not mix them**. In this case, you will get two files, one is audio and another is video. In this example, an output template (**`-o`** option) is recommended as bestvideo and bestaudio may have the same file name.\n\nWe can even download a video or playlist at a specific quality with **specific resolution**.\n\nFor instance, the following command will download the **best quality** video in **480 pixel resolution** (less than or equal to 480p).\n\n$ youtube-dl -f \"best\\[height<=480\\]\" https://www.youtube.com/watch?v=7E-cwdnsiow\n\nLike already said, we can group the format selectors to get a specific quality video. The following command will download best format available(both audio and video) but **no better than 480p**.\n\n$ youtube-dl -f 'bestvideo\\[height<=480\\]+bestaudio/best\\[height<=480\\]' https://www.youtube.com/watch?v=7E-cwdnsiow\n\n### 2.8. Download videos using format code\n\nAll videos have format codes which we can use to download a video at specific quality. To find the format code, just list the available formats using any one of the following commands:\n\n$ youtube-dl --list-formats https://www.youtube.com/watch?v=7E-cwdnsiow\n\nOr\n\n$ youtube-dl -F https://www.youtube.com/watch?v=7E-cwdnsiow\n\n[![List all available formats with youtube-dl](https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl-1.png \"List all available formats with youtube-dl\")](https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl-1.png)\n\nList all available formats with youtube-dl\n\nAs you can see in the above screenshot, all format codes of the given video are listed in the first column. The best quality format is given at the end (the format code is **`22`**). So, the command to download best quality format is:\n\n$ youtube-dl -f 22 https://www.youtube.com/watch?v=7E-cwdnsiow\n\nSome videos may not have the same formats available while you download videos from playlist. In such cases, you can specify multiple format codes in any preferred order of your choice. Take a look at the following example:\n\n$ youtube-dl -f 22/17/18 <playlist\\_url>\n\nAs per the above example, Youtube-dl will download the videos in format `22` if it is available. If the format `22` is not available, it will then download format `17` if it is available. If both `22` and `17` formats are not available, it will finally try to download format `18`. If none of the specified formats are available, Youtube-dl will complain that no suitable formats are available for download.\n\nPlease note that that slash is left-associative, i.e. formats on the left hand side are preferred.\n\n### 2.9. Download videos by file extension\n\nDownload video(s) in your preferred format, say for example **MP4**, just run:\n\n$ youtube-dl --format mp4 https://www.youtube.com/watch?v=7E-cwdnsiow\n\nOr,\n\n$ youtube-dl -f mp4 https://www.youtube.com/watch?v=7E-cwdnsiow\n\nLike I already mentioned in the previous section, some videos may not available in your preferred formats. In such cases, Youtube-dl will download any other best available formats. For instance, this command will download best quality MP4 format file. If MP4 format is not available, then it will download any other best available format.\n\n$  youtube-dl -f 'bestvideo\\[ext=mp4\\]+bestaudio\\[ext=m4a\\]/best\\[ext=mp4\\]/best' https://www.youtube.com/watch?v=7E-cwdnsiow\n\nIf you want to download them with custom filename, do:\n\n$ youtube-dl -f mp4 -o '%(title)s.f%(format\\_id)s.%(ext)s' https://www.youtube.com/watch?v=7E-cwdnsiow\n\n### 2.10. Set size limit for videos\n\nWhen you download multiple videos from a playlist, you might want to download videos within a certain size only.\n\nFor example, this command will not download any videos smaller than the given size, say **100MB**:\n\n$ youtube-dl --min-filesize 100M <playlist\\_url>\n\nIf you don't want to download videos larger than the given size, do:\n\n$ youtube-dl --max-filesize 100M <playlist\\_url>\n\nWe can also combine format selection operators to download certain size videos.\n\nThe following command will download best video-only format but **not bigger than 100 MB**.\n\n$ youtube-dl -f 'best\\[filesize<100M\\]' https://www.youtube.com/watch?v=7E-cwdnsiow\n\n### 2.11. Download videos by date-wise\n\nYoutube-dl allows us to filter and download video or playlist by their upload date. This will be very helpful when you want to download videos from a playlist that contains 100s of videos.\n\nFor instance, to download videos uploaded at an exact date, for example October 01, 2018, the command would be:\n\n$ youtube-dl --date 20181001 <URL>\n\nDownload videos uploaded on or before a specific date:\n\n$ youtube-dl --datebefore 20180101 <URL>\n\nDownload videos uploaded on or after a specific date:\n\n$ youtube-dl --dateafter 20180101 <URL>\n\nDownload only the videos uploaded in the last 6 months:\n\n$ youtube-dl --dateafter now-6months <URL>\n\nTo download videos between a specific date, for example January 01, 2018 to January 01, 2019, use the following command:\n\n$ youtube-dl --dateafter 20180101 --datebefore 20190101 <URL>\n\n### 2.12. Download specific videos from playlist\n\nThis is yet another useful feature of Youtube-dl. It allows us to download a specific song(s) from a playlist that contains 100s of songs.\n\nFor example, to download the 10th file from a playlist, run:\n\n$ youtube-dl --playlist-items 10 <playlist\\_url>\n\nYou can also download and convert the file to other format at the same time. For the the following command will download the 1st file from the playlist and convert it to `.mp3` format:\n\n$ youtube-dl --playlist-items 1 -x --audio-format mp3 <playlist\\_url>\n\nSimilarly, to download multiple random files, just specify indices of the videos in the playlist separated by commas like below::\n\n$ youtube-dl --playlist-items 2,3,7,10 <playlist\\_url>\n\nYou can also specify the range of songs. To download a video playlist starting from a certain video, say 10, to end:\n\n$ youtube-dl --playlist-start 10 <playlist\\_url>\n\nTo download only the files starting from 2nd to 5th in a playlist, use:\n\n$ youtube-dl --playlist-start 2 --playlist-end 5 <playlist\\_url>\n\n### 2.13. Download only videos suitable for specific age\n\nThis is another notable feature of Youtube-dl. It allows us to download only videos suitable for the given age.\n\nSay for example, to download all \"Let's Play\" videos that aren't marked \"NSFW\" or age-restricted for 7 year-olds from a playlist, run:\n\n$ youtube-dl --match-title \"let's play\" --age-limit 7 --reject-title \"nsfw\" <playlist\\_url>\n\n### 2.14. Set download speed limit\n\nYou can use **\\-r** option to limit the speed. For example, the following command will limit the speed to **`50K`**.\n\n$ youtube-dl -r 50K <URL>\n\nNote that speed is specified in bytes per second.\n\n### 2.15. Resume downloads\n\nBy default, youtube-dl will automatically resume the download where you left it off. If it is doesn't resume the download for any reason, just force the resume of partially downloaded files with `-c`, `--continue` flag:\n\n$ youtube-dl  -c  <URL>\n\n### 2.16. Display Youtube-dl help\n\nYoutube-dl has a lot more options. I guess these examples are just enough to use Youtube-dl to download videos from online. For more details, refer Youtube-dl help section.\n\n$ youtube-dl --help\n\n3\\. Youtube-dl Troubleshooting\n------------------------------\n\nHere are some common errors that you might encounter from time to time. Most errors will get fixed themselves after updating the youtube-dl to its most recent version.\n\nHowever, a few errors like below will not get fixed even if you have an updated youtube-dl version.\n\n### 3.1. Fix “Unable to download video data: HTTP Error 403: Forbidden” Error\n\nWhen downloading videos from YouTube, sometimes you will get an error like below.\n\nERROR: unable to download video data: HTTP Error 403: Forbidden\n\nTo fix this error, refer the following guide.\n\n*   [**How To Fix \"Unable to download video data: HTTP Error 403: Forbidden\" Error**](https://ostechnix.com/fix-unable-to-download-video-data-http-error-403-forbidden-error/)\n\n### 3.2. WARNING: Requested formats are incompatible for merge and will be merged into mkv\n\nThis is another common error. When you download a video, you will get an error like below:\n\n\\[youtube\\] \\_XEgknKEBws: Downloading webpage\n**WARNING: Requested formats are incompatible for merge and will be merged into mkv.**\nERROR: unable to open for writing: \\[Errno 36\\] File name too long: '\\\\xe0\\\\xae\\\\xa8\\\\xe0\\\\xaf\\\\x8b\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xaf\\\\x8d \\\\xe0\\\\xae\\\\x8e\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x81 \\\\xe0\\\\xae\\\\x9a\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xaf\\\\x88 \\\\xe0\\\\xae\\\\x85\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x81\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x8d \\\\xe0\\\\xae\\\\x87\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xae\\\\xb1\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x88 \\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\xbe\\\\xe0\\\\xae\\\\xa9\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x8d - \\\\xe0\\\\xae\\\\xa8\\\\xe0\\\\xae\\\\xbe\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x87 \\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xae\\\\xbe\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x81 \\\\xe0\\\\xae\\\\x8e\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\x9f\\\\xe0\\\\xae\\\\xbf- \\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xaf\\\\x81\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x81\\\\xe0\\\\xae\\\\xb5\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xaf\\\\x8d \\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x80\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\xbe \\\\xe0\\\\xae\\\\xb5\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xb3\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x8d-\\_XEgknKEBws.f136.mp4.part'\n\nThis is actually not a problem but an expected behavior for youtube-dl. By default, youtube-dl will download the highest quality audio and the highest quality video streams available and then join them into a compatible container like mkv, mp4 etc.  If these audio and video streams doesn’t fit well in an mp4 container, youtube-dl will then pack them in mkv container and display the above warning message. In such cases, you can ignore the mkv warning and download the best quality video and the best quality audio **but only in an mp4 container** by explicitly mentioning the desired best quality audio and video formats like below:\n\n$ youtube-dl -f 'bestvideo\\[ext=mp4\\]+bestaudio\\[ext=m4a\\]' https://youtu.be/\\_XEgknKEBws\n\n### 3.3. ERROR: unable to open for writing: \\[Errno 36\\] File name too long\n\nWhen you try to download a YouTube video that has long name, you will probably get this error:\n\n\\[youtube\\] \\_XEgknKEBws: Downloading webpage\n**ERROR: unable to open for writing: \\[Errno 36\\] File name too long:** '\\\\xe0\\\\xae\\\\xa8\\\\xe0\\\\xaf\\\\x8b\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xaf\\\\x8d \\\\xe0\\\\xae\\\\x8e\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x81 \\\\xe0\\\\xae\\\\x9a\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xaf\\\\x88 \\\\xe0\\\\xae\\\\x85\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x81\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x8d \\\\xe0\\\\xae\\\\x87\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xae\\\\xb1\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x88 \\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\xbe\\\\xe0\\\\xae\\\\xa9\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x8d - \\\\xe0\\\\xae\\\\xa8\\\\xe0\\\\xae\\\\xbe\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x87 \\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xae\\\\xaf\\\\xe0\\\\xae\\\\xbe\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x81 \\\\xe0\\\\xae\\\\x8e\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\x9f\\\\xe0\\\\xae\\\\xbf- \\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xaf\\\\x81\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x81\\\\xe0\\\\xae\\\\xb5\\\\xe0\\\\xae\\\\xb0\\\\xe0\\\\xaf\\\\x8d \\\\xe0\\\\xae\\\\xa4\\\\xe0\\\\xaf\\\\x80\\\\xe0\\\\xae\\\\xaa\\\\xe0\\\\xae\\\\xbe \\\\xe0\\\\xae\\\\xb5\\\\xe0\\\\xae\\\\xbf\\\\xe0\\\\xae\\\\xb3\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xaf\\\\x8d\\\\xe0\\\\xae\\\\x95\\\\xe0\\\\xae\\\\xae\\\\xe0\\\\xaf\\\\x8d-\\_XEgknKEBws.f136.mp4.part\n\nTo fix this error, simply download the video with shorter name of your choice with **\"-o\"** flag like below:\n\n$ youtube-dl -f 'bestvideo\\[ext=mp4\\]+bestaudio\\[ext=m4a\\]' **\\-o video.mp4** https://youtu.be/\\_XEgknKEBws\n\n**Resources:**\n\n*   [**Youtube-dl website**](https://ytdl-org.github.io/youtube-dl/index.html)\n*   [**https://jonlabelle.com/snippets/view/shell/youtube-dl-command**](https://jonlabelle.com/snippets/view/shell/youtube-dl-command)\n",
      "html": "<p><a href=\"https://ostechnix.com/20-ffmpeg-commands-beginners/\">https://ostechnix.com/20-ffmpeg-commands-beginners/</a></p>\n<blockquote>\n<p>This tutorial explains the list of most commonly used Youtube-dl commands to download videos from Youtube and other websites in Linux.</p>\n</blockquote>\n<h1 id=\"youtube-dl-tutorial-with-examples-for-beginners---ostechnix\">Youtube-dl Tutorial With Examples For Beginners - OSTechNix <a class=\"heading-anchor-permalink\" href=\"#youtube-dl-tutorial-with-examples-for-beginners---ostechnix\">#</a></h1>\n<p><strong>Youtube-dl</strong> is a most popular command line YouTube downloader application. It is not just to download videos from Youtube, but also from a lot of other websites. You can view the complete list of supported sites <a href=\"https://ytdl-org.github.io/youtube-dl/supportedsites.html\"><strong>here</strong></a>. Youtube-dl can be able to download a single track or entire playlist in one go. It is a free and open source program written in <strong>Python</strong>. It supports GNU/Linux, Mac OS X and Microsoft Windows. In this detailed Youtube-dl tutorial, we will learn to use most commonly used commands with examples to download audio and video streams from online in Linux.</p>\n<h2 id=\"1.-install-youtube-dl-on-linux\">1. Install Youtube-dl On Linux <a class=\"heading-anchor-permalink\" href=\"#1.-install-youtube-dl-on-linux\">#</a></h2>\n<p>Youtube-dl can be installed in many ways.</p>\n<h3 id=\"1.1.-the-officially-recommended-way-to-install-youtube-dl\">1.1. The officially recommended way to install Youtube-dl <a class=\"heading-anchor-permalink\" href=\"#1.1.-the-officially-recommended-way-to-install-youtube-dl\">#</a></h3>\n<p>The officially recommended way to install Youtube-dl is just download it, save it in your PATH, make it executable and start using it right away.</p>\n<p>$ sudo curl -L <a href=\"https://yt-dl.org/downloads/latest/youtube-dl\">https://yt-dl.org/downloads/latest/youtube-dl</a> -o /usr/local/bin/youtube-dl</p>\n<p>If you don’t have curl, use <strong><code>wget</code></strong> instead:</p>\n<p>$ sudo wget <a href=\"https://yt-dl.org/downloads/latest/youtube-dl\">https://yt-dl.org/downloads/latest/youtube-dl</a> -O /usr/local/bin/youtube-dl</p>\n<p>$ sudo chmod a+rx /usr/local/bin/youtube-dl</p>\n<h3 id=\"1.2.-install-youtube-dl-using-pip\">1.2. Install Youtube-dl using Pip <a class=\"heading-anchor-permalink\" href=\"#1.2.-install-youtube-dl-using-pip\">#</a></h3>\n<p>Alternatively, you can install it using <a href=\"https://ostechnix.com/manage-python-packages-using-pip/\"><strong>Pip</strong></a> as shown below.</p>\n<p>$ sudo -H pip install --upgrade youtube-dl</p>\n<h3 id=\"1.3.-install-youtube-dl-using-package-manager\">1.3. Install Youtube-dl using package manager <a class=\"heading-anchor-permalink\" href=\"#1.3.-install-youtube-dl-using-package-manager\">#</a></h3>\n<p>Youtube-dl is also available in the official repositories of some Linux distributions. For example, you can install it in Arch Linux using command:</p>\n<p>$ sudo pacman -S youtube-dl</p>\n<p>On Debian, Ubuntu, Linux mint:</p>\n<p>$ sudo apt install youtube-dl</p>\n<p>On Fedora:</p>\n<p>$ sudo dnf install youtube-dl</p>\n<h3 id=\"1.4.-install-ffmpeg-on-linux\">1.4. Install FFmpeg on Linux <a class=\"heading-anchor-permalink\" href=\"#1.4.-install-ffmpeg-on-linux\">#</a></h3>\n<p>Youtube-dl depends on <strong>FFmpeg</strong> to download 720p videos from YouTube and convert videos to other formats. To install FFmpeg on Linux, refer the following guide.</p>\n<ul>\n<li><a href=\"https://ostechnix.com/install-ffmpeg-linux/\"><strong>How to install FFmpeg on Linux</strong></a></li>\n</ul>\n<h3 id=\"1.5.-update-youtube-dl\">1.5. Update Youtube-dl <a class=\"heading-anchor-permalink\" href=\"#1.5.-update-youtube-dl\">#</a></h3>\n<p>If you’ve manually installed Youtube-dl using <code>curl</code> or <code>wget</code>, run the following command to update it:</p>\n<p>$ sudo youtube-dl -U</p>\n<p>If you installed it using <code>pip</code>, do:</p>\n<p>$ sudo pip install -U youtube-dl</p>\n<p>Those who installed Youtube-dl using the distribution’s package manager, just use the appropriate update command. For example, on Arch Linux, you can update Youtube-dl by simply running the following command:</p>\n<p>$ sudo pacman -Syu</p>\n<p>On Debian, Ubuntu:</p>\n<p>$ sudo apt update</p>\n<p>Now, let us see some examples to learn to use Youtube-dl.</p>\n<h2 id=\"2.-youtube-dl-tutorial-with-examples\">2. Youtube-dl Tutorial With Examples <a class=\"heading-anchor-permalink\" href=\"#2.-youtube-dl-tutorial-with-examples\">#</a></h2>\n<p>Here, I have compiled most commonly used Youtube-dl commands to download a video or playlist from YouTube.</p>\n<h3 id=\"2.1.-download-video-or-playlist\">2.1. Download video or playlist <a class=\"heading-anchor-permalink\" href=\"#2.1.-download-video-or-playlist\">#</a></h3>\n<p>To download a video or the entire playlist from YouTube, just mention the URL like below:</p>\n<p>$ youtube-dl <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>If you want to download video or playlist with a custom name of your choice, the command would be:</p>\n<p>$ youtube-dl -o ‘abdul kalam inspirational speech’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Replace “abdul kalam inspirational speech” with your own name.</p>\n<p>Do you want to save the video in some other location? Here you go!</p>\n<p>$ youtube-dl -o ‘~/Downloads/abdul kalam speech’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Here I am downloading the video to the <strong><code>Downloads</code></strong> directory.</p>\n<p>[youtube] 7E-cwdnsiow: Downloading webpage\n[download] Destination: /home/sk/Downloads/abdul kalam speech.f271\n[download] 100% of 111.86MiB in 01:00\n[download] Destination: /home/sk/Downloads/abdul kalam speech.f251\n[download] 100% of 6.12MiB in 00:03\n[ffmpeg] Merging formats into <strong>&quot;/home/sk/Downloads/abdul kalam speech.webm&quot;</strong>\nDeleting original file /home/sk/Downloads/abdul kalam speech.f271 (pass -k to keep)\nDeleting original file /home/sk/Downloads/abdul kalam speech.f251 (pass -k to keep)</p>\n<p>You can also include additional details,  such as the title, the uploader name (channel name) and upload date etc., in the file name by using the following command:</p>\n<p>$ youtube-dl -o ‘%(title)s by %(uploader)s on %(upload_date)s in %(playlist)s.%(ext)s’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<h3 id=\"2.2.-download-multiple-videos\">2.2. Download multiple videos <a class=\"heading-anchor-permalink\" href=\"#2.2.-download-multiple-videos\">#</a></h3>\n<p>Sometimes, you might want to download multiple videos from or any other site. If so, just mention the URL of the videos with space-separated like below:</p>\n<p>$ youtube-dl <url1> <url2></p>\n<p>Alternatively, you can put them all in a text file and pass it to Youtube-dl as an argument like below.</p>\n<p>$ youtube-dl -a url.txt</p>\n<p>This command will download all videos mentioned in the url.txt file.</p>\n<h3 id=\"2.3.-download-audio-only-from-a-video\">2.3. Download audio-only from a video <a class=\"heading-anchor-permalink\" href=\"#2.3.-download-audio-only-from-a-video\">#</a></h3>\n<p>Youtube-dl allows us to download audio only from a YouTube video. If you ever been in a situation to download only the audio, run:</p>\n<p>$ youtube-dl -x <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>By default, Youtube-dl will save the audio in <strong><code>Ogg</code></strong> (opus) format.</p>\n<p>If you prefer to download any other formats, for example <strong><code>mp3</code></strong>, run:</p>\n<p>$ youtube-dl -x --audio-format mp3 <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>This command will download the audio from the given video/playlist, convert it to an MP3 and save it in the current directory. Please note that you should install either <strong><code>ffmpeg</code></strong> or <strong><code>avconv</code></strong> to convert the file to mp3 format.</p>\n<h3 id=\"2.4.-download-video-with-description%2C-metadata%2C-annotations%2C-subtitles-and-thumbnail\">2.4. Download video with description, metadata, annotations, subtitles and thumbnail <a class=\"heading-anchor-permalink\" href=\"#2.4.-download-video-with-description%2C-metadata%2C-annotations%2C-subtitles-and-thumbnail\">#</a></h3>\n<p>To download a video along with its other details such as description, metadata, annotations, subtitles, and thumbnail etc., use the following command:</p>\n<p>$ youtube-dl --write-description --write-info-json --write-annotations --write-sub --write-thumbnail <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<h3 id=\"2.5.-list-all-available-formats-of-video-or-playlist\">2.5. List all available formats of video or playlist <a class=\"heading-anchor-permalink\" href=\"#2.5.-list-all-available-formats-of-video-or-playlist\">#</a></h3>\n<p>To list all available formats that a video or playlist is available in, use the following command:</p>\n<p>$ youtube-dl --list-formats <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Or</p>\n<p>$ youtube-dl -F <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Sample output:</p>\n<p><a href=\"https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl.png\"><img src=\"https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl.png\" alt=\"List all available formats of a youtube video using youtube-dl\" title=\"List all available formats of a youtube video using youtube-dl\"></a></p>\n<p>List all available formats of a YouTube video using youtube-dl</p>\n<p>As you can see in the above screenshot, Youtube-dl lists all available formats of the given video. From left to right, it displays the video format code, extension and resolution note of the respective video. This can be helpful when you want to download a video at a specific quality or format.</p>\n<h3 id=\"2.6.-display-the-size-of-youtube-videos\">2.6. Display the size of Youtube videos <a class=\"heading-anchor-permalink\" href=\"#2.6.-display-the-size-of-youtube-videos\">#</a></h3>\n<p>To retrieve the file size of a video, use <strong><code>-F</code></strong> flag.</p>\n<p>$ youtube-dl -F <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>You will see the file size at the end of each file.</p>\n<p><strong>Sample output:</strong></p>\n<p>[youtube] 7E-cwdnsiow: Downloading webpage\n[info] Available formats for 7E-cwdnsiow:\nformat code  extension  resolution note\n249          webm       audio only tiny   51k , opus @ 50k (48000Hz), 2.56MiB\n250          webm       audio only tiny   68k , opus @ 70k (48000Hz), 3.23MiB\n140          m4a        audio only tiny  128k , m4a_dash container, mp4a.40.2@128k (44100Hz), 7.59MiB\n251          webm       audio only tiny  137k , opus @160k (48000Hz), 6.12MiB\n160          mp4        192x144    144p   52k , avc1.4d400c, 30fps, video only, 1.71MiB\n278          webm       192x144    144p   73k , webm container, vp9, 30fps, video only, 3.73MiB\n133          mp4        320x240    240p   89k , avc1.4d400d, 30fps, video only, 3.12MiB\n242          webm       320x240    240p  135k , vp9, 30fps, video only, 6.06MiB\n134          mp4        480x360    360p  215k , avc1.4d401e, 30fps, video only, 7.53MiB\n243          webm       480x360    360p  242k , vp9, 30fps, video only, 10.39MiB\n135          mp4        640x480    480p  382k , avc1.4d401e, 30fps, video only, 14.13MiB\n244          webm       640x480    480p  390k , vp9, 30fps, video only, 16.44MiB\n136          mp4        960x720    720p  737k , avc1.4d401f, 30fps, video only, 26.99MiB\n247          webm       960x720    720p  770k , vp9, 30fps, video only, 31.12MiB\n137          mp4        1440x1080  1080p 1391k , avc1.640028, 30fps, video only, 46.50MiB\n248          webm       1440x1080  1080p 1421k , vp9, 30fps, video only, 52.19MiB\n271          webm       1920x1440  1440p 3462k , vp9, 30fps, video only, 111.86MiB\n18           mp4        480x360    360p  360k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 21.55MiB\n22           mp4        960x720    720p  578k , avc1.64001F, mp4a.40.2@192k (44100Hz) (best)</p>\n<h3 id=\"2.7.-download-videos-in-certain-quality-and%2For-format\">2.7. Download videos in certain quality and/or format <a class=\"heading-anchor-permalink\" href=\"#2.7.-download-videos-in-certain-quality-and%2For-format\">#</a></h3>\n<p>By default, Youtube-dl will download the best available quality video. However, it is also possible to download a video or playlist at a specific quality or format.</p>\n<p>YouTube is capable of downloading videos in the following qualities:</p>\n<ul>\n<li><strong>best</strong> - Select the best quality format of the given file with video and audio.</li>\n<li><strong>worst</strong> - Select the worst quality format (both video and audio).</li>\n<li><strong>bestvideo</strong> - Select the best quality video-only format (e.g. DASH video). Please note that it may not be available.</li>\n<li><strong>worstvideo</strong> - Select the worst quality video-only format. May not be available.</li>\n<li><strong>bestaudio</strong> - Select the best quality audio only-format. May not be available.</li>\n<li><strong>worstaudio</strong> - Select the worst quality audio only-format. May not be available.</li>\n</ul>\n<p>For example, if you want to download <strong>best quality</strong> format (both audio and video), just use the following command:</p>\n<p>$ youtube-dl -f best <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Similarly, to download audio-only with best quality:</p>\n<p>$ youtube-dl -f bestaudio <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>To download worst quality video-only format, use the following command:</p>\n<p>$ youtube-dl -f worstvideo <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>You can also combine different format options like below.</p>\n<p>$ youtube-dl -f bestvideo+bestaudio <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>The above command will download best quality video-only and best quality audio-only formats and merge them together with <code>ffmpeg</code> or <code>avconv</code>. Make sure you have installed any one of these tools on your system.</p>\n<p>If you don’t want to merge, replace <strong><code>+</code></strong> (plus) operator with <strong><code>,</code></strong> (comma) like below:</p>\n<p>$ youtube-dl -f ‘bestvideo,bestaudio’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a> -o ‘%(title)s.f%(format_id)s.%(ext)s’</p>\n<p>This command will download best quality video and best quality audio and <strong>will not mix them</strong>. In this case, you will get two files, one is audio and another is video. In this example, an output template (<strong><code>-o</code></strong> option) is recommended as bestvideo and bestaudio may have the same file name.</p>\n<p>We can even download a video or playlist at a specific quality with <strong>specific resolution</strong>.</p>\n<p>For instance, the following command will download the <strong>best quality</strong> video in <strong>480 pixel resolution</strong> (less than or equal to 480p).</p>\n<p>$ youtube-dl -f “best[height&lt;=480]” <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Like already said, we can group the format selectors to get a specific quality video. The following command will download best format available(both audio and video) but <strong>no better than 480p</strong>.</p>\n<p>$ youtube-dl -f ‘bestvideo[height&lt;=480]+bestaudio/best[height&lt;=480]’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<h3 id=\"2.8.-download-videos-using-format-code\">2.8. Download videos using format code <a class=\"heading-anchor-permalink\" href=\"#2.8.-download-videos-using-format-code\">#</a></h3>\n<p>All videos have format codes which we can use to download a video at specific quality. To find the format code, just list the available formats using any one of the following commands:</p>\n<p>$ youtube-dl --list-formats <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Or</p>\n<p>$ youtube-dl -F <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p><a href=\"https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl-1.png\"><img src=\"https://ostechnix.com/wp-content/uploads/2019/06/List-all-available-formats-youtube-dl-1.png\" alt=\"List all available formats with youtube-dl\" title=\"List all available formats with youtube-dl\"></a></p>\n<p>List all available formats with youtube-dl</p>\n<p>As you can see in the above screenshot, all format codes of the given video are listed in the first column. The best quality format is given at the end (the format code is <strong><code>22</code></strong>). So, the command to download best quality format is:</p>\n<p>$ youtube-dl -f 22 <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Some videos may not have the same formats available while you download videos from playlist. In such cases, you can specify multiple format codes in any preferred order of your choice. Take a look at the following example:</p>\n<p>$ youtube-dl -f 22/17/18 &lt;playlist_url&gt;</p>\n<p>As per the above example, Youtube-dl will download the videos in format <code>22</code> if it is available. If the format <code>22</code> is not available, it will then download format <code>17</code> if it is available. If both <code>22</code> and <code>17</code> formats are not available, it will finally try to download format <code>18</code>. If none of the specified formats are available, Youtube-dl will complain that no suitable formats are available for download.</p>\n<p>Please note that that slash is left-associative, i.e. formats on the left hand side are preferred.</p>\n<h3 id=\"2.9.-download-videos-by-file-extension\">2.9. Download videos by file extension <a class=\"heading-anchor-permalink\" href=\"#2.9.-download-videos-by-file-extension\">#</a></h3>\n<p>Download video(s) in your preferred format, say for example <strong>MP4</strong>, just run:</p>\n<p>$ youtube-dl --format mp4 <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Or,</p>\n<p>$ youtube-dl -f mp4 <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>Like I already mentioned in the previous section, some videos may not available in your preferred formats. In such cases, Youtube-dl will download any other best available formats. For instance, this command will download best quality MP4 format file. If MP4 format is not available, then it will download any other best available format.</p>\n<p>$  youtube-dl -f ‘bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<p>If you want to download them with custom filename, do:</p>\n<p>$ youtube-dl -f mp4 -o ‘%(title)s.f%(format_id)s.%(ext)s’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<h3 id=\"2.10.-set-size-limit-for-videos\">2.10. Set size limit for videos <a class=\"heading-anchor-permalink\" href=\"#2.10.-set-size-limit-for-videos\">#</a></h3>\n<p>When you download multiple videos from a playlist, you might want to download videos within a certain size only.</p>\n<p>For example, this command will not download any videos smaller than the given size, say <strong>100MB</strong>:</p>\n<p>$ youtube-dl --min-filesize 100M &lt;playlist_url&gt;</p>\n<p>If you don’t want to download videos larger than the given size, do:</p>\n<p>$ youtube-dl --max-filesize 100M &lt;playlist_url&gt;</p>\n<p>We can also combine format selection operators to download certain size videos.</p>\n<p>The following command will download best video-only format but <strong>not bigger than 100 MB</strong>.</p>\n<p>$ youtube-dl -f ‘best[filesize&lt;100M]’ <a href=\"https://www.youtube.com/watch?v=7E-cwdnsiow\">https://www.youtube.com/watch?v=7E-cwdnsiow</a></p>\n<h3 id=\"2.11.-download-videos-by-date-wise\">2.11. Download videos by date-wise <a class=\"heading-anchor-permalink\" href=\"#2.11.-download-videos-by-date-wise\">#</a></h3>\n<p>Youtube-dl allows us to filter and download video or playlist by their upload date. This will be very helpful when you want to download videos from a playlist that contains 100s of videos.</p>\n<p>For instance, to download videos uploaded at an exact date, for example October 01, 2018, the command would be:</p>\n<p>$ youtube-dl --date 20181001 <URL></p>\n<p>Download videos uploaded on or before a specific date:</p>\n<p>$ youtube-dl --datebefore 20180101 <URL></p>\n<p>Download videos uploaded on or after a specific date:</p>\n<p>$ youtube-dl --dateafter 20180101 <URL></p>\n<p>Download only the videos uploaded in the last 6 months:</p>\n<p>$ youtube-dl --dateafter now-6months <URL></p>\n<p>To download videos between a specific date, for example January 01, 2018 to January 01, 2019, use the following command:</p>\n<p>$ youtube-dl --dateafter 20180101 --datebefore 20190101 <URL></p>\n<h3 id=\"2.12.-download-specific-videos-from-playlist\">2.12. Download specific videos from playlist <a class=\"heading-anchor-permalink\" href=\"#2.12.-download-specific-videos-from-playlist\">#</a></h3>\n<p>This is yet another useful feature of Youtube-dl. It allows us to download a specific song(s) from a playlist that contains 100s of songs.</p>\n<p>For example, to download the 10th file from a playlist, run:</p>\n<p>$ youtube-dl --playlist-items 10 &lt;playlist_url&gt;</p>\n<p>You can also download and convert the file to other format at the same time. For the the following command will download the 1st file from the playlist and convert it to <code>.mp3</code> format:</p>\n<p>$ youtube-dl --playlist-items 1 -x --audio-format mp3 &lt;playlist_url&gt;</p>\n<p>Similarly, to download multiple random files, just specify indices of the videos in the playlist separated by commas like below::</p>\n<p>$ youtube-dl --playlist-items 2,3,7,10 &lt;playlist_url&gt;</p>\n<p>You can also specify the range of songs. To download a video playlist starting from a certain video, say 10, to end:</p>\n<p>$ youtube-dl --playlist-start 10 &lt;playlist_url&gt;</p>\n<p>To download only the files starting from 2nd to 5th in a playlist, use:</p>\n<p>$ youtube-dl --playlist-start 2 --playlist-end 5 &lt;playlist_url&gt;</p>\n<h3 id=\"2.13.-download-only-videos-suitable-for-specific-age\">2.13. Download only videos suitable for specific age <a class=\"heading-anchor-permalink\" href=\"#2.13.-download-only-videos-suitable-for-specific-age\">#</a></h3>\n<p>This is another notable feature of Youtube-dl. It allows us to download only videos suitable for the given age.</p>\n<p>Say for example, to download all “Let’s Play” videos that aren’t marked “NSFW” or age-restricted for 7 year-olds from a playlist, run:</p>\n<p>$ youtube-dl --match-title “let’s play” --age-limit 7 --reject-title “nsfw” &lt;playlist_url&gt;</p>\n<h3 id=\"2.14.-set-download-speed-limit\">2.14. Set download speed limit <a class=\"heading-anchor-permalink\" href=\"#2.14.-set-download-speed-limit\">#</a></h3>\n<p>You can use <strong>-r</strong> option to limit the speed. For example, the following command will limit the speed to <strong><code>50K</code></strong>.</p>\n<p>$ youtube-dl -r 50K <URL></p>\n<p>Note that speed is specified in bytes per second.</p>\n<h3 id=\"2.15.-resume-downloads\">2.15. Resume downloads <a class=\"heading-anchor-permalink\" href=\"#2.15.-resume-downloads\">#</a></h3>\n<p>By default, youtube-dl will automatically resume the download where you left it off. If it is doesn’t resume the download for any reason, just force the resume of partially downloaded files with <code>-c</code>, <code>--continue</code> flag:</p>\n<p>$ youtube-dl  -c  <URL></p>\n<h3 id=\"2.16.-display-youtube-dl-help\">2.16. Display Youtube-dl help <a class=\"heading-anchor-permalink\" href=\"#2.16.-display-youtube-dl-help\">#</a></h3>\n<p>Youtube-dl has a lot more options. I guess these examples are just enough to use Youtube-dl to download videos from online. For more details, refer Youtube-dl help section.</p>\n<p>$ youtube-dl --help</p>\n<h2 id=\"3.-youtube-dl-troubleshooting\">3. Youtube-dl Troubleshooting <a class=\"heading-anchor-permalink\" href=\"#3.-youtube-dl-troubleshooting\">#</a></h2>\n<p>Here are some common errors that you might encounter from time to time. Most errors will get fixed themselves after updating the youtube-dl to its most recent version.</p>\n<p>However, a few errors like below will not get fixed even if you have an updated youtube-dl version.</p>\n<h3 id=\"3.1.-fix-%E2%80%9Cunable-to-download-video-data%3A-http-error-403%3A-forbidden%E2%80%9D-error\">3.1. Fix “Unable to download video data: HTTP Error 403: Forbidden” Error <a class=\"heading-anchor-permalink\" href=\"#3.1.-fix-%E2%80%9Cunable-to-download-video-data%3A-http-error-403%3A-forbidden%E2%80%9D-error\">#</a></h3>\n<p>When downloading videos from YouTube, sometimes you will get an error like below.</p>\n<p>ERROR: unable to download video data: HTTP Error 403: Forbidden</p>\n<p>To fix this error, refer the following guide.</p>\n<ul>\n<li><a href=\"https://ostechnix.com/fix-unable-to-download-video-data-http-error-403-forbidden-error/\"><strong>How To Fix “Unable to download video data: HTTP Error 403: Forbidden” Error</strong></a></li>\n</ul>\n<h3 id=\"3.2.-warning%3A-requested-formats-are-incompatible-for-merge-and-will-be-merged-into-mkv\">3.2. WARNING: Requested formats are incompatible for merge and will be merged into mkv <a class=\"heading-anchor-permalink\" href=\"#3.2.-warning%3A-requested-formats-are-incompatible-for-merge-and-will-be-merged-into-mkv\">#</a></h3>\n<p>This is another common error. When you download a video, you will get an error like below:</p>\n<p>[youtube] _XEgknKEBws: Downloading webpage\n<strong>WARNING: Requested formats are incompatible for merge and will be merged into mkv.</strong>\nERROR: unable to open for writing: [Errno 36] File name too long: ‘\\xe0\\xae\\xa8\\xe0\\xaf\\x8b\\xe0\\xae\\xaf\\xe0\\xaf\\x8d \\xe0\\xae\\x8e\\xe0\\xae\\xa4\\xe0\\xae\\xbf\\xe0\\xae\\xb0\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xaf\\x81 \\xe0\\xae\\x9a\\xe0\\xae\\x95\\xe0\\xaf\\x8d\\xe0\\xae\\xa4\\xe0\\xae\\xbf\\xe0\\xae\\xaf\\xe0\\xaf\\x88 \\xe0\\xae\\x85\\xe0\\xae\\xa4\\xe0\\xae\\xbf\\xe0\\xae\\x95\\xe0\\xae\\xb0\\xe0\\xae\\xbf\\xe0\\xae\\x95\\xe0\\xaf\\x8d\\xe0\\xae\\x95\\xe0\\xaf\\x81\\xe0\\xae\\xae\\xe0\\xaf\\x8d \\xe0\\xae\\x87\\xe0\\xae\\xaf\\xe0\\xae\\xb1\\xe0\\xaf\\x8d\\xe0\\xae\\x95\\xe0\\xaf\\x88 \\xe0\\xae\\xaa\\xe0\\xae\\xbe\\xe0\\xae\\xa9\\xe0\\xae\\x95\\xe0\\xae\\xae\\xe0\\xaf\\x8d - \\xe0\\xae\\xa8\\xe0\\xae\\xbe\\xe0\\xae\\xae\\xe0\\xaf\\x87 \\xe0\\xae\\xa4\\xe0\\xae\\xaf\\xe0\\xae\\xbe\\xe0\\xae\\xb0\\xe0\\xae\\xbf\\xe0\\xae\\xaa\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xae\\xa4\\xe0\\xaf\\x81 \\xe0\\xae\\x8e\\xe0\\xae\\xaa\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xae\\x9f\\xe0\\xae\\xbf- \\xe0\\xae\\xae\\xe0\\xae\\xb0\\xe0\\xaf\\x81\\xe0\\xae\\xa4\\xe0\\xaf\\x8d\\xe0\\xae\\xa4\\xe0\\xaf\\x81\\xe0\\xae\\xb5\\xe0\\xae\\xb0\\xe0\\xaf\\x8d \\xe0\\xae\\xa4\\xe0\\xaf\\x80\\xe0\\xae\\xaa\\xe0\\xae\\xbe \\xe0\\xae\\xb5\\xe0\\xae\\xbf\\xe0\\xae\\xb3\\xe0\\xae\\x95\\xe0\\xaf\\x8d\\xe0\\xae\\x95\\xe0\\xae\\xae\\xe0\\xaf\\x8d-_XEgknKEBws.f136.mp4.part’</p>\n<p>This is actually not a problem but an expected behavior for youtube-dl. By default, youtube-dl will download the highest quality audio and the highest quality video streams available and then join them into a compatible container like mkv, mp4 etc.  If these audio and video streams doesn’t fit well in an mp4 container, youtube-dl will then pack them in mkv container and display the above warning message. In such cases, you can ignore the mkv warning and download the best quality video and the best quality audio <strong>but only in an mp4 container</strong> by explicitly mentioning the desired best quality audio and video formats like below:</p>\n<p>$ youtube-dl -f ‘bestvideo[ext=mp4]+bestaudio[ext=m4a]’ <a href=\"https://youtu.be/_XEgknKEBws\">https://youtu.be/_XEgknKEBws</a></p>\n<h3 id=\"3.3.-error%3A-unable-to-open-for-writing%3A-%5Berrno-36%5D-file-name-too-long\">3.3. ERROR: unable to open for writing: [Errno 36] File name too long <a class=\"heading-anchor-permalink\" href=\"#3.3.-error%3A-unable-to-open-for-writing%3A-%5Berrno-36%5D-file-name-too-long\">#</a></h3>\n<p>When you try to download a YouTube video that has long name, you will probably get this error:</p>\n<p>[youtube] _XEgknKEBws: Downloading webpage\n<strong>ERROR: unable to open for writing: [Errno 36] File name too long:</strong> '\\xe0\\xae\\xa8\\xe0\\xaf\\x8b\\xe0\\xae\\xaf\\xe0\\xaf\\x8d \\xe0\\xae\\x8e\\xe0\\xae\\xa4\\xe0\\xae\\xbf\\xe0\\xae\\xb0\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xaf\\x81 \\xe0\\xae\\x9a\\xe0\\xae\\x95\\xe0\\xaf\\x8d\\xe0\\xae\\xa4\\xe0\\xae\\xbf\\xe0\\xae\\xaf\\xe0\\xaf\\x88 \\xe0\\xae\\x85\\xe0\\xae\\xa4\\xe0\\xae\\xbf\\xe0\\xae\\x95\\xe0\\xae\\xb0\\xe0\\xae\\xbf\\xe0\\xae\\x95\\xe0\\xaf\\x8d\\xe0\\xae\\x95\\xe0\\xaf\\x81\\xe0\\xae\\xae\\xe0\\xaf\\x8d \\xe0\\xae\\x87\\xe0\\xae\\xaf\\xe0\\xae\\xb1\\xe0\\xaf\\x8d\\xe0\\xae\\x95\\xe0\\xaf\\x88 \\xe0\\xae\\xaa\\xe0\\xae\\xbe\\xe0\\xae\\xa9\\xe0\\xae\\x95\\xe0\\xae\\xae\\xe0\\xaf\\x8d - \\xe0\\xae\\xa8\\xe0\\xae\\xbe\\xe0\\xae\\xae\\xe0\\xaf\\x87 \\xe0\\xae\\xa4\\xe0\\xae\\xaf\\xe0\\xae\\xbe\\xe0\\xae\\xb0\\xe0\\xae\\xbf\\xe0\\xae\\xaa\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xae\\xa4\\xe0\\xaf\\x81 \\xe0\\xae\\x8e\\xe0\\xae\\xaa\\xe0\\xaf\\x8d\\xe0\\xae\\xaa\\xe0\\xae\\x9f\\xe0\\xae\\xbf- \\xe0\\xae\\xae\\xe0\\xae\\xb0\\xe0\\xaf\\x81\\xe0\\xae\\xa4\\xe0\\xaf\\x8d\\xe0\\xae\\xa4\\xe0\\xaf\\x81\\xe0\\xae\\xb5\\xe0\\xae\\xb0\\xe0\\xaf\\x8d \\xe0\\xae\\xa4\\xe0\\xaf\\x80\\xe0\\xae\\xaa\\xe0\\xae\\xbe \\xe0\\xae\\xb5\\xe0\\xae\\xbf\\xe0\\xae\\xb3\\xe0\\xae\\x95\\xe0\\xaf\\x8d\\xe0\\xae\\x95\\xe0\\xae\\xae\\xe0\\xaf\\x8d-_XEgknKEBws.f136.mp4.part</p>\n<p>To fix this error, simply download the video with shorter name of your choice with <strong>“-o”</strong> flag like below:</p>\n<p>$ youtube-dl -f ‘bestvideo[ext=mp4]+bestaudio[ext=m4a]’ <strong>-o video.mp4</strong> <a href=\"https://youtu.be/_XEgknKEBws\">https://youtu.be/_XEgknKEBws</a></p>\n<p><strong>Resources:</strong></p>\n<ul>\n<li><a href=\"https://ytdl-org.github.io/youtube-dl/index.html\"><strong>Youtube-dl website</strong></a></li>\n<li><a href=\"https://jonlabelle.com/snippets/view/shell/youtube-dl-command\"><strong>https://jonlabelle.com/snippets/view/shell/youtube-dl-command</strong></a></li>\n</ul>\n",
      "id": 24
    },
    {
      "path": "Network_Net/riseup-vpn.md",
      "url": "Network_Net/riseup-vpn.html",
      "content": "# RiseupVPN for Linux\n\n1.  [Requirements](https://riseup.net/en/vpn/linux/#requirements)\n2.  [Snap Installation](https://riseup.net/en/vpn/linux/#snap-installation)\n3.  [Package Installation](https://riseup.net/en/vpn/linux/#package-installation)\n4.  [Troubleshooting](https://riseup.net/en/vpn/linux/#troubleshooting)\n    1.  [Bug Reports and Feature Requests](https://riseup.net/en/vpn/linux/#bug-reports-and-feature-requests)\n    2.  [Get the logs](https://riseup.net/en/vpn/linux/#get-the-logs)\n    3.  [Force quit](https://riseup.net/en/vpn/linux/#force-quit)\n    4.  [Won’t start](https://riseup.net/en/vpn/linux/#wont-start)\n    5.  [Test a pre-release version](https://riseup.net/en/vpn/linux/#test-a-pre-release-version)\n    6.  [Remove PID file](https://riseup.net/en/vpn/linux/#remove-pid-file)\n5.  [Source code](https://riseup.net/en/vpn/linux/#source-code)\n\n## Requirements\n\nTo use Riseup’s VPN service, you will need to install the program called RiseupVPN. On Linux, it is available either as a  `snap`, or as a package in Debian Stable.\n\nRiseupVPN is currently tested on  **Ubuntu LTS**  (18.04) and  **Debian Stable**. If you have a different release, it may or may not work.\n\n## Snap Installation\n\nIf you use Ubuntu, snap is already installed. Otherwise, run:\n\n```\nsudo apt install snapd gnome-software-plugin-snap\n\n```\n\nThen, search for  **RiseupVPN**  in the  **Software Center**  or click on this link:\n\nOpen RiseupVPN in Software Center\n\nIf the link above does not work for you, you can also install via the command line:\n\n```\nsudo snap install --classic riseup-vpn\n\n```\n\nIf you get an error stating that “python” is missing from /usr/bin/env, you need to install python. This is the case for instance in Lubuntu, at least since version 19.04.\n\n## Package Installation\n\nRun the following commands in a terminal to install the Debian Stable package.\n\n```\n   sudo apt install leap-archive-keyring\n   echo \"deb https://deb.leap.se/client release buster\" | sudo tee -a /etc/apt/sources.list.d/leap.list\n   sudo apt update\n   sudo apt install riseup-vpn\n\n```\n\n## Troubleshooting\n\n### Bug Reports and Feature Requests\n\nRiseupVPN is built using a free software program called  **bitmask-vpn**.\n\n**Step 1:**  [Search to see](https://0xacab.org/leap/bitmask-vpn/issues)  if the bug has already been reported.\n\n**Step 2:**  [Register an account](https://0xacab.org/users/sign_in)  with  [0xacab.org](https://0xacab.org/)  and log in.\n\n**Step 3:**  Create a  [new bug report or feature request](https://0xacab.org/leap/bitmask-vpn/issues/new).\n\nPlease include the following information in your bug report:\n\n-   Steps to reproduce the bug\n-   What is the expected behaviour and what do you see\n-   A screenshot if it is something visual\n-   Your linux distribution and its version\n-   The log of the program\n\n### Get the logs\n\nThe log of RiseupVPN is located in your home folder:\n\n```\n~/.config/leap/systray.log\n\n```\n\nWhen reporting a bug it is very useful to include the log file.\n\n### Force quit\n\nIf anything stops working, run these commands and then try again:\n\n```\nsudo pkill -e -f riseup-vpn\n\n```\n\n### Won’t start\n\nIf the launcher icon does not work, you can run RiseupVPN from the command line in order to identify the problem:\n\n```\n/snap/bin/riseup-vpn.launcher\n\n```\n\nAny problem starting will be displayed on the terminal.\n\n### Test a pre-release version\n\nIf you want to help us test a development, pre-release version of RiseupVPN, you can install it using this command:\n\n```\nsudo snap install --classic --beta riseup-vpn\n\n```\n\n### Remove PID file\n\nSometimes RiseupVPN will fail to start if it thinks another version is already running.\n\nIf you get this error, run these commands:\n\n```\nsudo pkill -e -f riseup-vpn\ntest -f ~/.config/leap/systray.pid && rm -v ~/.config/leap/systray.pid\n```",
      "html": "<h1 id=\"riseupvpn-for-linux\">RiseupVPN for Linux <a class=\"heading-anchor-permalink\" href=\"#riseupvpn-for-linux\">#</a></h1>\n<ol>\n<li><a href=\"https://riseup.net/en/vpn/linux/#requirements\">Requirements</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#snap-installation\">Snap Installation</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#package-installation\">Package Installation</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#troubleshooting\">Troubleshooting</a>\n<ol>\n<li><a href=\"https://riseup.net/en/vpn/linux/#bug-reports-and-feature-requests\">Bug Reports and Feature Requests</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#get-the-logs\">Get the logs</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#force-quit\">Force quit</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#wont-start\">Won’t start</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#test-a-pre-release-version\">Test a pre-release version</a></li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#remove-pid-file\">Remove PID file</a></li>\n</ol>\n</li>\n<li><a href=\"https://riseup.net/en/vpn/linux/#source-code\">Source code</a></li>\n</ol>\n<h2 id=\"requirements\">Requirements <a class=\"heading-anchor-permalink\" href=\"#requirements\">#</a></h2>\n<p>To use Riseup’s VPN service, you will need to install the program called RiseupVPN. On Linux, it is available either as a  <code>snap</code>, or as a package in Debian Stable.</p>\n<p>RiseupVPN is currently tested on  <strong>Ubuntu LTS</strong>  (18.04) and  <strong>Debian Stable</strong>. If you have a different release, it may or may not work.</p>\n<h2 id=\"snap-installation\">Snap Installation <a class=\"heading-anchor-permalink\" href=\"#snap-installation\">#</a></h2>\n<p>If you use Ubuntu, snap is already installed. Otherwise, run:</p>\n<pre><code>sudo apt install snapd gnome-software-plugin-snap\n\n</code></pre>\n<p>Then, search for  <strong>RiseupVPN</strong>  in the  <strong>Software Center</strong>  or click on this link:</p>\n<p>Open RiseupVPN in Software Center</p>\n<p>If the link above does not work for you, you can also install via the command line:</p>\n<pre><code>sudo snap install --classic riseup-vpn\n\n</code></pre>\n<p>If you get an error stating that “python” is missing from /usr/bin/env, you need to install python. This is the case for instance in Lubuntu, at least since version 19.04.</p>\n<h2 id=\"package-installation\">Package Installation <a class=\"heading-anchor-permalink\" href=\"#package-installation\">#</a></h2>\n<p>Run the following commands in a terminal to install the Debian Stable package.</p>\n<pre><code>   sudo apt install leap-archive-keyring\n   echo &quot;deb https://deb.leap.se/client release buster&quot; | sudo tee -a /etc/apt/sources.list.d/leap.list\n   sudo apt update\n   sudo apt install riseup-vpn\n\n</code></pre>\n<h2 id=\"troubleshooting\">Troubleshooting <a class=\"heading-anchor-permalink\" href=\"#troubleshooting\">#</a></h2>\n<h3 id=\"bug-reports-and-feature-requests\">Bug Reports and Feature Requests <a class=\"heading-anchor-permalink\" href=\"#bug-reports-and-feature-requests\">#</a></h3>\n<p>RiseupVPN is built using a free software program called  <strong>bitmask-vpn</strong>.</p>\n<p><strong>Step 1:</strong>  <a href=\"https://0xacab.org/leap/bitmask-vpn/issues\">Search to see</a>  if the bug has already been reported.</p>\n<p><strong>Step 2:</strong>  <a href=\"https://0xacab.org/users/sign_in\">Register an account</a>  with  <a href=\"https://0xacab.org/\">0xacab.org</a>  and log in.</p>\n<p><strong>Step 3:</strong>  Create a  <a href=\"https://0xacab.org/leap/bitmask-vpn/issues/new\">new bug report or feature request</a>.</p>\n<p>Please include the following information in your bug report:</p>\n<ul>\n<li>Steps to reproduce the bug</li>\n<li>What is the expected behaviour and what do you see</li>\n<li>A screenshot if it is something visual</li>\n<li>Your linux distribution and its version</li>\n<li>The log of the program</li>\n</ul>\n<h3 id=\"get-the-logs\">Get the logs <a class=\"heading-anchor-permalink\" href=\"#get-the-logs\">#</a></h3>\n<p>The log of RiseupVPN is located in your home folder:</p>\n<pre><code>~/.config/leap/systray.log\n\n</code></pre>\n<p>When reporting a bug it is very useful to include the log file.</p>\n<h3 id=\"force-quit\">Force quit <a class=\"heading-anchor-permalink\" href=\"#force-quit\">#</a></h3>\n<p>If anything stops working, run these commands and then try again:</p>\n<pre><code>sudo pkill -e -f riseup-vpn\n\n</code></pre>\n<h3 id=\"won%E2%80%99t-start\">Won’t start <a class=\"heading-anchor-permalink\" href=\"#won%E2%80%99t-start\">#</a></h3>\n<p>If the launcher icon does not work, you can run RiseupVPN from the command line in order to identify the problem:</p>\n<pre><code>/snap/bin/riseup-vpn.launcher\n\n</code></pre>\n<p>Any problem starting will be displayed on the terminal.</p>\n<h3 id=\"test-a-pre-release-version\">Test a pre-release version <a class=\"heading-anchor-permalink\" href=\"#test-a-pre-release-version\">#</a></h3>\n<p>If you want to help us test a development, pre-release version of RiseupVPN, you can install it using this command:</p>\n<pre><code>sudo snap install --classic --beta riseup-vpn\n\n</code></pre>\n<h3 id=\"remove-pid-file\">Remove PID file <a class=\"heading-anchor-permalink\" href=\"#remove-pid-file\">#</a></h3>\n<p>Sometimes RiseupVPN will fail to start if it thinks another version is already running.</p>\n<p>If you get this error, run these commands:</p>\n<pre><code>sudo pkill -e -f riseup-vpn\ntest -f ~/.config/leap/systray.pid &amp;&amp; rm -v ~/.config/leap/systray.pid\n</code></pre>\n",
      "id": 25
    },
    {
      "path": "PHP/22092023.md",
      "url": "PHP/22092023.html",
      "content": "# Full PHP 8 Tutorial\n\n## 23 - [PHP Function Parameters - Named Arguments - Variadic Functions & Unpacking](https://www.youtube.com/watchv=I9XkWyets9w)\n\n- Variadic Functions (`token `...`)\n    - data type must be before `&` reference if present.\n     `function f1(int &...$arg)`\n- Unpacking operator `...$variable` **vs** array: thats when an array or trabversable of arguments, then unpacked it to be passed to a function tn the  form of an argument list.\n\nCompare :\n\n```php\nvar_dump(hash_alogs());\necho \"<hr>\";\nvar_dump(...hash_alogs());\n```\n\n---\n\n## 24 - [PHP PHP Variable Scopes - Static Variables](https://www.youtube.com/watch?v=et1aVZWMvVE&list=PLr3d3QYzkw2xabQRUpcZ_IBk9W50M9pe-&index=24)\n\n_**Other Sources:**_\n\n## [Variables From External Sources](https://www.php.net/manual/en/language.variables.external.php#language.variables.external)\n\n> Variable Scope: The scope of a variable is the context within which it is defined.\n\nPHP has three different variable scopes:\n\n- local\n- global\n- static\n\n```php\n// index.php\n$a = 1; // Here the $a variable will be available \n          // within the included f1.php script.\ninclude 'f1.php';\n$b = 2000;\nvar_dump($v1); // 1000`\n```\n\n```php\n// f1.php\n$v1=1000;\nvar_dump($a); // 1\nvar_dump($b); // warning, undefined variable within f1.php\n```\n \n> Any variable used inside a function is by default limited to the local function scope including static variables.\n\n### ways to access `global` variables:\n\n1. global variables MUST be declared `global` inside a function if they are going to be used in that function and then every references outside will refers to the global variable.\n2. Using `$GLOBALS` *supper global* Array instead of `global` keyword:\n\n```php\n$a = 100;\nfunction f1(){\n var_dump(GLOBALS['a']+50); // int(150)\n}\n```\n\n> Using global keyword outside a function is not an error. It can be used if the file is included from inside a function.\n\n---\n\n## Static variable/function\n\nA static variable exists only in a **local function scope**, but it does not lose its value when program execution leaves this scope. \n\nStatic variables also provide one way to deal with recursive functions.\nA recursive function is one which calls itself.\n\n```php\nfunction foo(){\n    static $int = 0;          // correct \n    static $int = 1+2;        // correct\n    static $int = sqrt(121);  // wrong  (as it is a function)\n\n    $int++;\n    echo $int;\n}\n```\n\n\nAs of PHP 8.1.0, when a method using static variables is inherited (but not overridden), the inherited method will now share static variables with the parent method. This means that static variables in methods now behave the same way as static properties. \nFor Example:\n\n```php\nclass Foo {\n    public static function counter() {\n        static $counter = 0;\n        $counter++;\n        return $counter;\n    }\n}\nclass Bar extends Foo {}\nvar_dump(Foo::counter()); // int(1)\nvar_dump(Foo::counter()); // int(2)\nvar_dump(Bar::counter()); // int(3), prior to PHP 8.1.0 int(1)\nvar_dump(Bar::counter()); // int(4), prior to PHP 8.1.0 int(2)\n```\n\nfor class objects => [static scope](https://onlinephp.io/c/19db6) at (https://onlinephp.io)\n---\n\n> `echo` has no return value while `print` has a return value of 1 so it can be used in expressions.\n\n> To delete a variable manually, use `unset($var)`\n\n> Unlike Java and C++, variables declared inside blocks such as loops or if's, will also be recognized and accessible outside of the block.\n\n**Notes:**\n\nThe PHP superglobal variables are: [w3schools.com](https://w3schools.com)\n\n    $GLOBALS\n    $_SERVER\n    $_REQUEST\n    $_POST\n    $_GET\n    $_FILES\n    $_ENV\n    $_COOKIE\n    $_SESSION\n\n`$GLOBALS[index]` is a *super global* associative array contain a references to ALL variables currently defined in the global scope of the script. `index` holds the name of the variable.\n\n\n---\n\n\n## PHP Built-in Functions\n\nPHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task. [Click here to discover it](https://www.w3schools.com/php/php_ref_overview.asp)\n\n> PHP is a Loosely Typed Language- means no need to declare variables types but in PHP >=7 you have it as option and by adding the `strict` decleration it will throw a \"Fatal Error\" if type mismatches.\n\nTo specify `strict`, set `declare(strict_types=1);` which must be on the very first line of the PHP file.\n\n\n`range(low, high, step)`:This function returns an array of elements from low to high. If the low parameter is higher than the high parameter, the range array will be from high to low.\n\n```php\nrange(0,50,10); //0,10,20,30,40,50\nrange(\"a\",\"h\",2); //a,c,e,g\n```\n\n---\n\n\n## [Variable Variable](https://www.php.net/manual/en/language.variables.variable.php)\n\nexample:\n\n```php\n// variable of variable: variable that use another variable's value as its name, for \n$a = 'hello';\n// variable variable:\n$$a='world'; // At this point two variables have been defined and stored in the PHP symbol tree: $a with contents \"hello\" and $hello with contents \"world\"\n\n// But\necho \"$a {$$a}\"; // processed exactly like ' echo \"$a $hello\" '\n```\n\n### Chapter 11: References\n\n- Assign by ref: two variables share the same value BUT don't point to one another. They point to the same place ('value').\n\n```php\n$foo = &$bar;\n$foo = 'hi';\n$bar = array(1, 2); //assign by reference within the array() language construct.\n$array = array(&$foo, &$bar[0]); // refs inside arrays - dangerous\n```\n\n\n---\n\n\n## Chapter 13: Array iteration\n\n- `array_map` is the simplest way (when two arrays with same length)\n\n```php\n// two arrays of the same length need to be iterated together\n$people = ['Tim', 'Tony', 'Turanga'];\n$foods = ['chicken', 'beef', 'slurm'];\n// HERE: use array_map and regular/anynoumus function\n\n//....\n\n// what about 'array_combine($arr1,$arr2)' \n\n```\n\n",
      "html": "<h1 id=\"full-php-8-tutorial\">Full PHP 8 Tutorial <a class=\"heading-anchor-permalink\" href=\"#full-php-8-tutorial\">#</a></h1>\n<h2 id=\"23---php-function-parameters---named-arguments---variadic-functions-%26-unpacking\">23 - <a href=\"https://www.youtube.com/watchv=I9XkWyets9w\">PHP Function Parameters - Named Arguments - Variadic Functions &amp; Unpacking</a> <a class=\"heading-anchor-permalink\" href=\"#23---php-function-parameters---named-arguments---variadic-functions-%26-unpacking\">#</a></h2>\n<ul>\n<li>Variadic Functions (<code>token</code>…`)\n<ul>\n<li>data type must be before <code>&amp;</code> reference if present.\n<code>function f1(int &amp;...$arg)</code></li>\n</ul>\n</li>\n<li>Unpacking operator <code>...$variable</code> <strong>vs</strong> array: thats when an array or trabversable of arguments, then unpacked it to be passed to a function tn the  form of an argument list.</li>\n</ul>\n<p>Compare :</p>\n<pre><code class=\"language-php\">var_dump(hash_alogs());\necho &quot;&lt;hr&gt;&quot;;\nvar_dump(...hash_alogs());\n</code></pre>\n<hr>\n<h2 id=\"24---php-php-variable-scopes---static-variables\">24 - <a href=\"https://www.youtube.com/watch?v=et1aVZWMvVE&amp;list=PLr3d3QYzkw2xabQRUpcZ_IBk9W50M9pe-&amp;index=24\">PHP PHP Variable Scopes - Static Variables</a> <a class=\"heading-anchor-permalink\" href=\"#24---php-php-variable-scopes---static-variables\">#</a></h2>\n<p><em><strong>Other Sources:</strong></em></p>\n<h2 id=\"variables-from-external-sources\"><a href=\"https://www.php.net/manual/en/language.variables.external.php#language.variables.external\">Variables From External Sources</a> <a class=\"heading-anchor-permalink\" href=\"#variables-from-external-sources\">#</a></h2>\n<blockquote>\n<p>Variable Scope: The scope of a variable is the context within which it is defined.</p>\n</blockquote>\n<p>PHP has three different variable scopes:</p>\n<ul>\n<li>local</li>\n<li>global</li>\n<li>static</li>\n</ul>\n<pre><code class=\"language-php\">// index.php\n$a = 1; // Here the $a variable will be available \n          // within the included f1.php script.\ninclude 'f1.php';\n$b = 2000;\nvar_dump($v1); // 1000`\n</code></pre>\n<pre><code class=\"language-php\">// f1.php\n$v1=1000;\nvar_dump($a); // 1\nvar_dump($b); // warning, undefined variable within f1.php\n</code></pre>\n<blockquote>\n<p>Any variable used inside a function is by default limited to the local function scope including static variables.</p>\n</blockquote>\n<h3 id=\"ways-to-access-global-variables%3A\">ways to access <code>global</code> variables: <a class=\"heading-anchor-permalink\" href=\"#ways-to-access-global-variables%3A\">#</a></h3>\n<ol>\n<li>global variables MUST be declared <code>global</code> inside a function if they are going to be used in that function and then every references outside will refers to the global variable.</li>\n<li>Using <code>$GLOBALS</code> <em>supper global</em> Array instead of <code>global</code> keyword:</li>\n</ol>\n<pre><code class=\"language-php\">$a = 100;\nfunction f1(){\n var_dump(GLOBALS['a']+50); // int(150)\n}\n</code></pre>\n<blockquote>\n<p>Using global keyword outside a function is not an error. It can be used if the file is included from inside a function.</p>\n</blockquote>\n<hr>\n<h2 id=\"static-variable%2Ffunction\">Static variable/function <a class=\"heading-anchor-permalink\" href=\"#static-variable%2Ffunction\">#</a></h2>\n<p>A static variable exists only in a <strong>local function scope</strong>, but it does not lose its value when program execution leaves this scope.</p>\n<p>Static variables also provide one way to deal with recursive functions.\nA recursive function is one which calls itself.</p>\n<pre><code class=\"language-php\">function foo(){\n    static $int = 0;          // correct \n    static $int = 1+2;        // correct\n    static $int = sqrt(121);  // wrong  (as it is a function)\n\n    $int++;\n    echo $int;\n}\n</code></pre>\n<p>As of PHP 8.1.0, when a method using static variables is inherited (but not overridden), the inherited method will now share static variables with the parent method. This means that static variables in methods now behave the same way as static properties.\nFor Example:</p>\n<pre><code class=\"language-php\">class Foo {\n    public static function counter() {\n        static $counter = 0;\n        $counter++;\n        return $counter;\n    }\n}\nclass Bar extends Foo {}\nvar_dump(Foo::counter()); // int(1)\nvar_dump(Foo::counter()); // int(2)\nvar_dump(Bar::counter()); // int(3), prior to PHP 8.1.0 int(1)\nvar_dump(Bar::counter()); // int(4), prior to PHP 8.1.0 int(2)\n</code></pre>\n<h2 id=\"for-class-objects-%3D%3E-static-scope-at-(https%3A%2F%2Fonlinephp.io)\">for class objects =&gt; <a href=\"https://onlinephp.io/c/19db6\">static scope</a> at (<a href=\"https://onlinephp.io\">https://onlinephp.io</a>) <a class=\"heading-anchor-permalink\" href=\"#for-class-objects-%3D%3E-static-scope-at-(https%3A%2F%2Fonlinephp.io)\">#</a></h2>\n<blockquote>\n<p><code>echo</code> has no return value while <code>print</code> has a return value of 1 so it can be used in expressions.</p>\n</blockquote>\n<blockquote>\n<p>To delete a variable manually, use <code>unset($var)</code></p>\n</blockquote>\n<blockquote>\n<p>Unlike Java and C++, variables declared inside blocks such as loops or if’s, will also be recognized and accessible outside of the block.</p>\n</blockquote>\n<p><strong>Notes:</strong></p>\n<p>The PHP superglobal variables are: <a href=\"https://w3schools.com\">w3schools.com</a></p>\n<pre><code>$GLOBALS\n$_SERVER\n$_REQUEST\n$_POST\n$_GET\n$_FILES\n$_ENV\n$_COOKIE\n$_SESSION\n</code></pre>\n<p><code>$GLOBALS[index]</code> is a <em>super global</em> associative array contain a references to ALL variables currently defined in the global scope of the script. <code>index</code> holds the name of the variable.</p>\n<hr>\n<h2 id=\"php-built-in-functions\">PHP Built-in Functions <a class=\"heading-anchor-permalink\" href=\"#php-built-in-functions\">#</a></h2>\n<p>PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task. <a href=\"https://www.w3schools.com/php/php_ref_overview.asp\">Click here to discover it</a></p>\n<blockquote>\n<p>PHP is a Loosely Typed Language- means no need to declare variables types but in PHP &gt;=7 you have it as option and by adding the <code>strict</code> decleration it will throw a “Fatal Error” if type mismatches.</p>\n</blockquote>\n<p>To specify <code>strict</code>, set <code>declare(strict_types=1);</code> which must be on the very first line of the PHP file.</p>\n<p><code>range(low, high, step)</code>:This function returns an array of elements from low to high. If the low parameter is higher than the high parameter, the range array will be from high to low.</p>\n<pre><code class=\"language-php\">range(0,50,10); //0,10,20,30,40,50\nrange(&quot;a&quot;,&quot;h&quot;,2); //a,c,e,g\n</code></pre>\n<hr>\n<h2 id=\"variable-variable\"><a href=\"https://www.php.net/manual/en/language.variables.variable.php\">Variable Variable</a> <a class=\"heading-anchor-permalink\" href=\"#variable-variable\">#</a></h2>\n<p>example:</p>\n<pre><code class=\"language-php\">// variable of variable: variable that use another variable's value as its name, for \n$a = 'hello';\n// variable variable:\n$$a='world'; // At this point two variables have been defined and stored in the PHP symbol tree: $a with contents &quot;hello&quot; and $hello with contents &quot;world&quot;\n\n// But\necho &quot;$a {$$a}&quot;; // processed exactly like ' echo &quot;$a $hello&quot; '\n</code></pre>\n<h3 id=\"chapter-11%3A-references\">Chapter 11: References <a class=\"heading-anchor-permalink\" href=\"#chapter-11%3A-references\">#</a></h3>\n<ul>\n<li>Assign by ref: two variables share the same value BUT don’t point to one another. They point to the same place (‘value’).</li>\n</ul>\n<pre><code class=\"language-php\">$foo = &amp;$bar;\n$foo = 'hi';\n$bar = array(1, 2); //assign by reference within the array() language construct.\n$array = array(&amp;$foo, &amp;$bar[0]); // refs inside arrays - dangerous\n</code></pre>\n<hr>\n<h2 id=\"chapter-13%3A-array-iteration\">Chapter 13: Array iteration <a class=\"heading-anchor-permalink\" href=\"#chapter-13%3A-array-iteration\">#</a></h2>\n<ul>\n<li><code>array_map</code> is the simplest way (when two arrays with same length)</li>\n</ul>\n<pre><code class=\"language-php\">// two arrays of the same length need to be iterated together\n$people = ['Tim', 'Tony', 'Turanga'];\n$foods = ['chicken', 'beef', 'slurm'];\n// HERE: use array_map and regular/anynoumus function\n\n//....\n\n// what about 'array_combine($arr1,$arr2)' \n\n</code></pre>\n",
      "id": 26
    },
    {
      "path": "PHP/LearningResources.md",
      "url": "PHP/LearningResources.html",
      "content": "[https://interactive.linuxacademy.com/diagrams/LPIEssentials.html]\nLinuxjourny",
      "html": "<p>[<a href=\"https://interactive.linuxacademy.com/diagrams/LPIEssentials.html\">https://interactive.linuxacademy.com/diagrams/LPIEssentials.html</a>]\nLinuxjourny</p>\n",
      "id": 27
    },
    {
      "path": "PHP/edx_js_backend_frameworks.md",
      "url": "PHP/edx_js_backend_frameworks.html",
      "content": "\n> from edx course - week 4.\n\n  \n  \n\n### Node.js - Fuetures:\n\n- Asynchronous, event-driven JavaScript runtime\n\nenvironment for building web applications\n\n- Treats HTTP requests as events that invoke\n\ncallback functions/handlers that construct the HTTP\n\nresponse\n\n- includes a package manager to simplify the\n\ndeployment of JavaScript apps\n\n  \n\n### Installing Nodejs:\n\n- You can install Node.js by downloading, running,\n\nand finishing the package installer available here:\n\n`https://nodejs.org/en/download/`\n\n- Check that installation is correct using: `node –v`\n\n- Update modules using: `npm install npm –g`\n\n  \n\n### Setting up a new project\n\n- Create a new folder for your project\n\n- Use Terminal, Command Prompt, etc. to navigate to\n\nthat folder\n\n- Set up a new project by running: npm init\n\n- You will be prompted to enter some information about your project.\n\n- Specify “index.js” as your entry point.\n\n- Your project folder should now have a `package.json` configuration file:\n\n  \n\n```json\n\n{\n\n\"name\": \"helloworld\",\n\"version\": \"1.0.0\",\n\"description\": \"A basic hello world app\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n\"author\": \"edX Learner\",\n\"license\": \"ISC\"\n}\n\n```\n\n----\n\n## Express\n\n- Express is a web application framework that sits on top of a Node.js server.\n- Express helps you modularize and streamline your web application.\n- Within Express, you can organize your app in many ways:\n- Define separate modules that have different responsibilities.\n- Handle requests via different routes and routers.\n- Split each step in the processing of a request into Middlewares.\n\n### Adding Express\n\n- To use Express, run the following from the folde where you created your Node.js app:\n\n`npm install express --save`\n\n- The Express package will be downloaded to th project and added to your package.json file as a dependency.\n- Package: a package is a module of JavaScript code usually with a specific purpose, that can be re-used and assembled with other modules\n- Dependency: A dependency is a piece of code that you program relies on to work correctly.\n\n ### Express Configuration\n\n- Your package.json file will now have a new section called dependencies\n- `npm` can refer to this in the future and re-download or update your packages as needed\n\n```json\n\"name\": \"helloworld\",\n\"version\": \"1.0.0\",\n\"description\": \"A basic hello world app\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n\"author\": \"edX Learner\",\n\"license\": \"ISC\",\n\"dependencies\": {\n\"express\": \"^4.15.3\"\n }\n}\n```\n\n### Hello World\n\n- Create an file named index.js in your Node.js\n- project root directory with the following contents:\n\n```js\nvar  express  =  require('express');\nvar  app  =  express();\napp.use('/', (req, res) => {\nres.send('Hello World!');\n});\napp.listen(3000, () => {\n console.log('Listening on port 3000');\n});\n```\n\n### Running Express\n\n- In the project folder, run: node index.js\n- When the server starts, you should see “Listening on port 3000” written to the console/screen\n- Open a browser on the same computer and go to\n   `http://localhost:3000/`\n\n  \n  \n\n## Node.js Request and Response Objects\n\n- Web browsers communicate with Web servers via HTTP requests and responses\n\n- Node.js and Express simplify the development of Web servers to handle HTTP requests and create and return HTTP responses.\n\n  \n\n### Anatomy of an HTTP Request\n\n![](2020-04-12-04-39-29.png)\n\n  \n\n### Node.js/Express Request Objects\n\n- An HTTP Request is represented as an object in the Express app.\n\n- The object is passed as a parameter to the callback function/event handler.\n\n  \n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/', (req, res) => {\n\nres.send('Hello World!');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n  \n\n### Request Object Properties/Functions\n\n- `method`: the HTTP Request verb/action.\n\n- `url`: the resource that was requested.\n\n- `headers`: object containing all headers.\n\n- `get(field)`: request header field.\n\n  \n\n```js\n\napp.use('/', (req, res) => {\n\nvar  method  = req.method;\n\nvar  url  = req.url;\n\nvar  agent  = req.headers['user-agent'];\n\nagent  = req.get('User-Agent');\n\nres.send('Hello});\n\n```\n\n### Antomy of an HTTP Response:\n\n  \n\n![](2020-04-12-04-44-35.png)\n\n  \n\n### Node.js/Express Response Objects\n\n- An HTTP Response is also represented as an object in the Express app.\n\n- The object is passed as a parameter to the callback function/event handler:\n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/', (req, res) => {\n\nres.send('Hello World!');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n### Response Object Functions\n\n- status: set the HTTP status code\n\n- type: set the HTTP content type\n\n- write: add content to the body of the response\n\n- end: send the response and close the connection\n\n  \n\n```js\n\napp.use('/', (req, res) => {\n\nres.status(200);\n\nres.type('html');\n\nres.write('Hello world!');\n\nres.write('<p>');\n\nres.write('<b>Have a nice day</b>');\n\nres.end();\n\n});\n\n```\n\n### Combining Requests and Responses:\n\n  \n\n```js\n\napp.use('/', (req, res) => {\n\nvar  name  = req.query.name; // e.g. /?name=devesh\n\nres.status(200).type('html');\n\nif (name) {\n\nres.write('Hi,  '  +  name  +  \"it's nice to see you.\");}\n\nelse { res.write('Welcome, guest!'); }\n\nres.end();\n\n});\n\n```\n\n---\n\n### Express Routing\n\n  \n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/about', (req, res) => {\n\nres.send('This is the about page.');\n\n});\n\napp.use('/login', (req, res) => {\n\nres.send('This is the login page.');\n\n});\n\napp.use( /*default*/ (req, res) => {\n\nres.status(404).send('Not found!');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n### Express Middleware\n\n- A middleware is a function that is invoked in the handling of an HTTP request.\n\n- It is used in the “middle” between receiving a request and sending a response.\n\n- Multiple middlewares can be chained together on the same request.\n\n  \n\n### Middleware: Serving Static Files\n\n- The simplest middleware is express.static, which serves static files that are locally stored.\n\n  \n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/public', express.static('files'));\n\napp.use( /*default*/ (req, res) => {\n\nres.status(404).send('Not found!');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n```html\n\n<!-- This is files/index.html -->\n\n<html>\n\n<body>\n\n<h1>Hello!</h1>\n\n<img  src=\"images/kitty.jpg\">\n\n<!-- File is files/images/kitty.jpg -->\n\n</body>\n\n</html>\n\n```\n\n## Middleware: Serving Static Files\n\n- We can use the response object to send back specific HTML files as needed:\n\n  \n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/public', express.static('files'));\n\napp.use( /*default*/ (req, res) => {\n\nres.status(404).sendFile(__dirname  +  '/404.html');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n  \n\n### Defining and Using Middleware\n\n- `Middleware` functions can contain any amount of JavaScript code with any functionality\n\n- They take three parameters: `req, res, and next`\n\n- `next()` must be called at the end of the function to invoke the next middleware or the final response:\n\n  \n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\nvar  logger  = (req, res, next) => {\n\nvar  url  = req.url;\n\nvar  time  =  new  Date();\n\nconsole.log('Received request for  '  +  url  +\n\n' at  '  +  time);\n\nnext();\n\n};\n\napp.use(logger);\n\napp.use('/public', express.static('files'));\n\napp.use( /*default*/ (req, res) => {\n\nres.status(404).sendFile(__dirname  +  '/404.html');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n  \n\n### Middleware Chaining:\n\n  \n\n- Middleware functions are called in the order in which they are specified.\n\n- Each uses the same Request and Response objects.\n\n- A middleware function can modify the Request so that it can then be used by subsequent middleware functions “downstream” in the route.\n\n  \n\n```js\n\nvar  nameFinder  = (req, res, next) => {\n\nvar  name  = req.query.name;\n\nif (name) req.username  = name.toUpperCase();\n\nelse req.username  =  'Guest';\n\nnext();\n\n}\n\nvar  greeter  = (req, res, next) => {\n\nres.status(200).type('html');\n\nres.write('Hello,  '  + req.username);\n\nnext();\n\n}\n\nvar  adminName  = (req, res, next) => {\n\nreq.username  =  'Admin';\n\nnext();\n\n}\n\napp.use('/welcome', nameFinder, greeter,\n\n(req, res) => { res.end(); } );\n\napp.use('/admin', adminName, greeter,\n\n(req, res) => { res.end();\n\n} );\n\n```\n\n  \n\n### Middleware, Routes, and Routers\n\n- We may find that the same combinations of middleware functions are being used in multiple routes.\n\n- We can combine middleware functions into “sub- routes” using `Routers` and then use those in our routes.\n\n  \n\n```js\n\nvar  nameFinder  = (req, res, next) => { .  .  . }\n\nvar  greeter  = (req, res, next) => { .  .  . }\n\nvar  adminName  = (req, res, next) => { .  .  . }\n\nvar  logger  = (req, res, next) => { .  .  . }\n\nvar  header  = (req, res, next) => { .  .  . }\n\nvar  footer  = (req, res, next) => { .  .  . }\n\n  \n\napp.use('/welcome', logger, nameFinder, header,\n\n  \n\ngreeter, footer, (req, res) => { res.end(); } );\n\n  \n\napp.use('/admin', logger, adminName, header, greeter, footer, (req, res) => {\n\nres.end();\n\n} );\n\nvar  commonRoute  = express.Router();\n\n  \n\ncommonRoute.use(header, greeter, footer);\n\n  \n\napp.use('/welcome', logger, nameFinder, commonRoute,\n\n(req, res) => { res.end(); } );\n\n  \n\napp.use('/admin', logger, adminName, commonRoute,\n\n(req, res) => { res.end(); } );\n\n  \n\n```\n\n---\n\n  \n\n## Getting User Data\n\n### Getting Data from Users: HTTP Requests\n\n  \n\n- Query parameters\n\n- `Key/value` pairs that are part of the `URL`.\n\n- Can be part of a static URL or be generated by an `HTML` form using the “GET” method.\n\n- POST data\n\n- `Key/value` pairs that are included in the body of the `HTTP` request.\n\n- Result from an `HTML` form using the “POST” method.\n\n### Request Object Query Properties\n\n- An HTTP Request object can include `query` properties that come from the URL: `http://localhost:3000/?name=Lydia&location=United+States`\n\n  \n\n```js\n\napp.use('/', (req, res) => {\n\nvar  query  = req.query;\n\nconsole.log(query);\n\nvar  name  = query.name;\n\n// 'Lydia'\n\nvar  location  = query.location; // 'United States'\n\nvar  length  =  Object.keys(query).length; // 2\n\nres.send('Hello World!');\n\n});\n\n```\n\n  \n\n### Request Object Parameters\n\n  \n\n- An HTTP Request object can include `param` properties that come from a parameterized URL: `http://localhost:3000/name/Lydia/location/United States`.\n\n  \n\n```js\n\napp.use('/name/:userName/location/:userLocation',\n\n(req, res) => {\n\nvar  params  = req.params;\n\nconsole.log(params);\n\nvar  name  = params.userName;\n\n// 'Lydia'\n\nvar  location  = params.userLocation; // 'United States'\n\nvar  length  =  Object.keys(params).length; // 2\n\nres.send('Hello World!');\n\n});\n\n```\n\n  \n\n### HTML Forms\n\n- Forms allow users to enter or select data, e.g. via input boxes, checkboxes, radio buttons, etc.\n\n- The form specifies the action and method that result when the user chooses to submit the form.\n\n- Action: the URL to be requested.\n\n- Method: the HTTP Request “verb,” e.g. GET or POST.\n\n  \n\n![](2020-04-12-05-18-38.png)\n\n  \n  \n\n```html\n\n<html>\n\n<body>\n\n<form  action=\"/handleForm\"  method=\"post\">\n\nName: <input  name=\"username\">\n\n<p>\n\nI like:<br>\n\n<input  type=checkbox  name=\"animal\"  value=\"dogs\">Dogs <br>\n\n<input  type=checkbox  name=\"animal\"  value=\"cats\">Cats <br>\n\n<input  type=checkbox  name=\"animal\"  value=\"birds\">Birds <br>\n\n<p>\n\n<input  type=submit  value=\"Submit form!\">\n\n</form>\n\n</body>\n\n```\n\n  \n\n### Reading POST Data in Express\n\n  \n  \n\n- When a form’s method is “GET”, the data is sent in the URL query parameters.\n\n- When a form’s method is “POST”, the data is sent in the body of the HTTP request.\n\n- To read the body of the HTTP request in Express, use the body-parser middleware.\n\n- To install it, run: `npm install body-parser`.\n\n  \n\n```js\n\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/public', express.static('files'));\n\nvar  bodyParser  =  require('body-parser');\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use('/handleForm', (req, res) => {\n\nvar  name  = req.body.username;\n\nvar  animals  = req.body.animal; // this is an array\n\n.  .  .\n\nres.send('Thank you!');\n\n});\n\napp.listen(3000, () => {\n\nconsole.log('Listening on port 3000');\n\n});\n\n```\n\n  \n\n### Summary\n\n- HTTP Request query properties: key/value pairs that come from URL.\n\n- HTTP Request param properties: key/value pairs that come from parameterized URL.\n\n- HTTP Request body properties: input data from form submitting using POST method.\n\n  \n\n---\n\n### Example:\n\n![](2020-04-12-05-27-54.png)\n\n![](2020-04-12-05-28-12.png)\n\n  \n\n```js\n\nvar  bodyParser  =  require('body-parser');\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use('/handleForm', (req, res) => {\n\nvar  name  = req.body.username;\n\nvar  animals  = [].concat(req.body.animal);\n\nres.type('html').status(200);\n\nres.write('Hello,  '  +  name  +  ', nice to meet you.');\n\nres.write('<p>Here are the animals you like:');\n\nres.write('<ul>');\n\nanimals.forEach( (animal) => {\n\nres.write('<li>'  +  animal  +  '</li>');\n\n});\n\nres.write('</ul>');\n\nres.write(\"<a href='/public/form.html'>\"  +\n\n\"Back to form</a>\");\n\nres.end();\n\n});\n\n```\n\n  \n\n### What is EJS?\n\n  \n\n- `EJS`, or `EmbeddedJS`, is a view engine that uses data and embedded JavaScript to produce HTML.\n\n- This allows webpages to be developed statically and rendered dynamically `server-side`.\n\n- EmbeddedJS is a package that can be installed with the command: `npm install ejs`.\n\n  \n\n<!-- Continue page 280 -->",
      "html": "<blockquote>\n<p>from edx course - week 4.</p>\n</blockquote>\n<h3 id=\"node.js---fuetures%3A\">Node.js - Fuetures: <a class=\"heading-anchor-permalink\" href=\"#node.js---fuetures%3A\">#</a></h3>\n<ul>\n<li>Asynchronous, event-driven JavaScript runtime</li>\n</ul>\n<p>environment for building web applications</p>\n<ul>\n<li>Treats HTTP requests as events that invoke</li>\n</ul>\n<p>callback functions/handlers that construct the HTTP</p>\n<p>response</p>\n<ul>\n<li>includes a package manager to simplify the</li>\n</ul>\n<p>deployment of JavaScript apps</p>\n<h3 id=\"installing-nodejs%3A\">Installing Nodejs: <a class=\"heading-anchor-permalink\" href=\"#installing-nodejs%3A\">#</a></h3>\n<ul>\n<li>You can install Node.js by downloading, running,</li>\n</ul>\n<p>and finishing the package installer available here:</p>\n<p><code>https://nodejs.org/en/download/</code></p>\n<ul>\n<li>\n<p>Check that installation is correct using: <code>node –v</code></p>\n</li>\n<li>\n<p>Update modules using: <code>npm install npm –g</code></p>\n</li>\n</ul>\n<h3 id=\"setting-up-a-new-project\">Setting up a new project <a class=\"heading-anchor-permalink\" href=\"#setting-up-a-new-project\">#</a></h3>\n<ul>\n<li>\n<p>Create a new folder for your project</p>\n</li>\n<li>\n<p>Use Terminal, Command Prompt, etc. to navigate to</p>\n</li>\n</ul>\n<p>that folder</p>\n<ul>\n<li>\n<p>Set up a new project by running: npm init</p>\n</li>\n<li>\n<p>You will be prompted to enter some information about your project.</p>\n</li>\n<li>\n<p>Specify “index.js” as your entry point.</p>\n</li>\n<li>\n<p>Your project folder should now have a <code>package.json</code> configuration file:</p>\n</li>\n</ul>\n<pre><code class=\"language-json\">\n{\n\n&quot;name&quot;: &quot;helloworld&quot;,\n&quot;version&quot;: &quot;1.0.0&quot;,\n&quot;description&quot;: &quot;A basic hello world app&quot;,\n&quot;main&quot;: &quot;index.js&quot;,\n&quot;scripts&quot;: {\n&quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n},\n&quot;author&quot;: &quot;edX Learner&quot;,\n&quot;license&quot;: &quot;ISC&quot;\n}\n\n</code></pre>\n<hr>\n<h2 id=\"express\">Express <a class=\"heading-anchor-permalink\" href=\"#express\">#</a></h2>\n<ul>\n<li>Express is a web application framework that sits on top of a Node.js server.</li>\n<li>Express helps you modularize and streamline your web application.</li>\n<li>Within Express, you can organize your app in many ways:</li>\n<li>Define separate modules that have different responsibilities.</li>\n<li>Handle requests via different routes and routers.</li>\n<li>Split each step in the processing of a request into Middlewares.</li>\n</ul>\n<h3 id=\"adding-express\">Adding Express <a class=\"heading-anchor-permalink\" href=\"#adding-express\">#</a></h3>\n<ul>\n<li>To use Express, run the following from the folde where you created your Node.js app:</li>\n</ul>\n<p><code>npm install express --save</code></p>\n<ul>\n<li>The Express package will be downloaded to th project and added to your package.json file as a dependency.</li>\n<li>Package: a package is a module of JavaScript code usually with a specific purpose, that can be re-used and assembled with other modules</li>\n<li>Dependency: A dependency is a piece of code that you program relies on to work correctly.</li>\n</ul>\n<h3 id=\"express-configuration\">Express Configuration <a class=\"heading-anchor-permalink\" href=\"#express-configuration\">#</a></h3>\n<ul>\n<li>Your package.json file will now have a new section called dependencies</li>\n<li><code>npm</code> can refer to this in the future and re-download or update your packages as needed</li>\n</ul>\n<pre><code class=\"language-json\">&quot;name&quot;: &quot;helloworld&quot;,\n&quot;version&quot;: &quot;1.0.0&quot;,\n&quot;description&quot;: &quot;A basic hello world app&quot;,\n&quot;main&quot;: &quot;index.js&quot;,\n&quot;scripts&quot;: {\n&quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n},\n&quot;author&quot;: &quot;edX Learner&quot;,\n&quot;license&quot;: &quot;ISC&quot;,\n&quot;dependencies&quot;: {\n&quot;express&quot;: &quot;^4.15.3&quot;\n }\n}\n</code></pre>\n<h3 id=\"hello-world\">Hello World <a class=\"heading-anchor-permalink\" href=\"#hello-world\">#</a></h3>\n<ul>\n<li>Create an file named index.js in your Node.js</li>\n<li>project root directory with the following contents:</li>\n</ul>\n<pre><code class=\"language-js\">var  express  =  require('express');\nvar  app  =  express();\napp.use('/', (req, res) =&gt; {\nres.send('Hello World!');\n});\napp.listen(3000, () =&gt; {\n console.log('Listening on port 3000');\n});\n</code></pre>\n<h3 id=\"running-express\">Running Express <a class=\"heading-anchor-permalink\" href=\"#running-express\">#</a></h3>\n<ul>\n<li>In the project folder, run: node index.js</li>\n<li>When the server starts, you should see “Listening on port 3000” written to the console/screen</li>\n<li>Open a browser on the same computer and go to\n<code>http://localhost:3000/</code></li>\n</ul>\n<h2 id=\"node.js-request-and-response-objects\">Node.js Request and Response Objects <a class=\"heading-anchor-permalink\" href=\"#node.js-request-and-response-objects\">#</a></h2>\n<ul>\n<li>\n<p>Web browsers communicate with Web servers via HTTP requests and responses</p>\n</li>\n<li>\n<p>Node.js and Express simplify the development of Web servers to handle HTTP requests and create and return HTTP responses.</p>\n</li>\n</ul>\n<h3 id=\"anatomy-of-an-http-request\">Anatomy of an HTTP Request <a class=\"heading-anchor-permalink\" href=\"#anatomy-of-an-http-request\">#</a></h3>\n<p><img src=\"2020-04-12-04-39-29.png\" alt=\"\"></p>\n<h3 id=\"node.js%2Fexpress-request-objects\">Node.js/Express Request Objects <a class=\"heading-anchor-permalink\" href=\"#node.js%2Fexpress-request-objects\">#</a></h3>\n<ul>\n<li>\n<p>An HTTP Request is represented as an object in the Express app.</p>\n</li>\n<li>\n<p>The object is passed as a parameter to the callback function/event handler.</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/', (req, res) =&gt; {\n\nres.send('Hello World!');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<h3 id=\"request-object-properties%2Ffunctions\">Request Object Properties/Functions <a class=\"heading-anchor-permalink\" href=\"#request-object-properties%2Ffunctions\">#</a></h3>\n<ul>\n<li>\n<p><code>method</code>: the HTTP Request verb/action.</p>\n</li>\n<li>\n<p><code>url</code>: the resource that was requested.</p>\n</li>\n<li>\n<p><code>headers</code>: object containing all headers.</p>\n</li>\n<li>\n<p><code>get(field)</code>: request header field.</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\napp.use('/', (req, res) =&gt; {\n\nvar  method  = req.method;\n\nvar  url  = req.url;\n\nvar  agent  = req.headers['user-agent'];\n\nagent  = req.get('User-Agent');\n\nres.send('Hello});\n\n</code></pre>\n<h3 id=\"antomy-of-an-http-response%3A\">Antomy of an HTTP Response: <a class=\"heading-anchor-permalink\" href=\"#antomy-of-an-http-response%3A\">#</a></h3>\n<p><img src=\"2020-04-12-04-44-35.png\" alt=\"\"></p>\n<h3 id=\"node.js%2Fexpress-response-objects\">Node.js/Express Response Objects <a class=\"heading-anchor-permalink\" href=\"#node.js%2Fexpress-response-objects\">#</a></h3>\n<ul>\n<li>\n<p>An HTTP Response is also represented as an object in the Express app.</p>\n</li>\n<li>\n<p>The object is passed as a parameter to the callback function/event handler:</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/', (req, res) =&gt; {\n\nres.send('Hello World!');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<h3 id=\"response-object-functions\">Response Object Functions <a class=\"heading-anchor-permalink\" href=\"#response-object-functions\">#</a></h3>\n<ul>\n<li>\n<p>status: set the HTTP status code</p>\n</li>\n<li>\n<p>type: set the HTTP content type</p>\n</li>\n<li>\n<p>write: add content to the body of the response</p>\n</li>\n<li>\n<p>end: send the response and close the connection</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\napp.use('/', (req, res) =&gt; {\n\nres.status(200);\n\nres.type('html');\n\nres.write('Hello world!');\n\nres.write('&lt;p&gt;');\n\nres.write('&lt;b&gt;Have a nice day&lt;/b&gt;');\n\nres.end();\n\n});\n\n</code></pre>\n<h3 id=\"combining-requests-and-responses%3A\">Combining Requests and Responses: <a class=\"heading-anchor-permalink\" href=\"#combining-requests-and-responses%3A\">#</a></h3>\n<pre><code class=\"language-js\">\napp.use('/', (req, res) =&gt; {\n\nvar  name  = req.query.name; // e.g. /?name=devesh\n\nres.status(200).type('html');\n\nif (name) {\n\nres.write('Hi,  '  +  name  +  &quot;it's nice to see you.&quot;);}\n\nelse { res.write('Welcome, guest!'); }\n\nres.end();\n\n});\n\n</code></pre>\n<hr>\n<h3 id=\"express-routing\">Express Routing <a class=\"heading-anchor-permalink\" href=\"#express-routing\">#</a></h3>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/about', (req, res) =&gt; {\n\nres.send('This is the about page.');\n\n});\n\napp.use('/login', (req, res) =&gt; {\n\nres.send('This is the login page.');\n\n});\n\napp.use( /*default*/ (req, res) =&gt; {\n\nres.status(404).send('Not found!');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<h3 id=\"express-middleware\">Express Middleware <a class=\"heading-anchor-permalink\" href=\"#express-middleware\">#</a></h3>\n<ul>\n<li>\n<p>A middleware is a function that is invoked in the handling of an HTTP request.</p>\n</li>\n<li>\n<p>It is used in the “middle” between receiving a request and sending a response.</p>\n</li>\n<li>\n<p>Multiple middlewares can be chained together on the same request.</p>\n</li>\n</ul>\n<h3 id=\"middleware%3A-serving-static-files\">Middleware: Serving Static Files <a class=\"heading-anchor-permalink\" href=\"#middleware%3A-serving-static-files\">#</a></h3>\n<ul>\n<li>The simplest middleware is express.static, which serves static files that are locally stored.</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/public', express.static('files'));\n\napp.use( /*default*/ (req, res) =&gt; {\n\nres.status(404).send('Not found!');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<pre><code class=\"language-html\">\n&lt;!-- This is files/index.html --&gt;\n\n&lt;html&gt;\n\n&lt;body&gt;\n\n&lt;h1&gt;Hello!&lt;/h1&gt;\n\n&lt;img  src=&quot;images/kitty.jpg&quot;&gt;\n\n&lt;!-- File is files/images/kitty.jpg --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n</code></pre>\n<h2 id=\"middleware%3A-serving-static-files-2\">Middleware: Serving Static Files <a class=\"heading-anchor-permalink\" href=\"#middleware%3A-serving-static-files-2\">#</a></h2>\n<ul>\n<li>We can use the response object to send back specific HTML files as needed:</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/public', express.static('files'));\n\napp.use( /*default*/ (req, res) =&gt; {\n\nres.status(404).sendFile(__dirname  +  '/404.html');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<h3 id=\"defining-and-using-middleware\">Defining and Using Middleware <a class=\"heading-anchor-permalink\" href=\"#defining-and-using-middleware\">#</a></h3>\n<ul>\n<li>\n<p><code>Middleware</code> functions can contain any amount of JavaScript code with any functionality</p>\n</li>\n<li>\n<p>They take three parameters: <code>req, res, and next</code></p>\n</li>\n<li>\n<p><code>next()</code> must be called at the end of the function to invoke the next middleware or the final response:</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\nvar  logger  = (req, res, next) =&gt; {\n\nvar  url  = req.url;\n\nvar  time  =  new  Date();\n\nconsole.log('Received request for  '  +  url  +\n\n' at  '  +  time);\n\nnext();\n\n};\n\napp.use(logger);\n\napp.use('/public', express.static('files'));\n\napp.use( /*default*/ (req, res) =&gt; {\n\nres.status(404).sendFile(__dirname  +  '/404.html');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<h3 id=\"middleware-chaining%3A\">Middleware Chaining: <a class=\"heading-anchor-permalink\" href=\"#middleware-chaining%3A\">#</a></h3>\n<ul>\n<li>\n<p>Middleware functions are called in the order in which they are specified.</p>\n</li>\n<li>\n<p>Each uses the same Request and Response objects.</p>\n</li>\n<li>\n<p>A middleware function can modify the Request so that it can then be used by subsequent middleware functions “downstream” in the route.</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  nameFinder  = (req, res, next) =&gt; {\n\nvar  name  = req.query.name;\n\nif (name) req.username  = name.toUpperCase();\n\nelse req.username  =  'Guest';\n\nnext();\n\n}\n\nvar  greeter  = (req, res, next) =&gt; {\n\nres.status(200).type('html');\n\nres.write('Hello,  '  + req.username);\n\nnext();\n\n}\n\nvar  adminName  = (req, res, next) =&gt; {\n\nreq.username  =  'Admin';\n\nnext();\n\n}\n\napp.use('/welcome', nameFinder, greeter,\n\n(req, res) =&gt; { res.end(); } );\n\napp.use('/admin', adminName, greeter,\n\n(req, res) =&gt; { res.end();\n\n} );\n\n</code></pre>\n<h3 id=\"middleware%2C-routes%2C-and-routers\">Middleware, Routes, and Routers <a class=\"heading-anchor-permalink\" href=\"#middleware%2C-routes%2C-and-routers\">#</a></h3>\n<ul>\n<li>\n<p>We may find that the same combinations of middleware functions are being used in multiple routes.</p>\n</li>\n<li>\n<p>We can combine middleware functions into “sub- routes” using <code>Routers</code> and then use those in our routes.</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  nameFinder  = (req, res, next) =&gt; { .  .  . }\n\nvar  greeter  = (req, res, next) =&gt; { .  .  . }\n\nvar  adminName  = (req, res, next) =&gt; { .  .  . }\n\nvar  logger  = (req, res, next) =&gt; { .  .  . }\n\nvar  header  = (req, res, next) =&gt; { .  .  . }\n\nvar  footer  = (req, res, next) =&gt; { .  .  . }\n\n  \n\napp.use('/welcome', logger, nameFinder, header,\n\n  \n\ngreeter, footer, (req, res) =&gt; { res.end(); } );\n\n  \n\napp.use('/admin', logger, adminName, header, greeter, footer, (req, res) =&gt; {\n\nres.end();\n\n} );\n\nvar  commonRoute  = express.Router();\n\n  \n\ncommonRoute.use(header, greeter, footer);\n\n  \n\napp.use('/welcome', logger, nameFinder, commonRoute,\n\n(req, res) =&gt; { res.end(); } );\n\n  \n\napp.use('/admin', logger, adminName, commonRoute,\n\n(req, res) =&gt; { res.end(); } );\n\n  \n\n</code></pre>\n<hr>\n<h2 id=\"getting-user-data\">Getting User Data <a class=\"heading-anchor-permalink\" href=\"#getting-user-data\">#</a></h2>\n<h3 id=\"getting-data-from-users%3A-http-requests\">Getting Data from Users: HTTP Requests <a class=\"heading-anchor-permalink\" href=\"#getting-data-from-users%3A-http-requests\">#</a></h3>\n<ul>\n<li>\n<p>Query parameters</p>\n</li>\n<li>\n<p><code>Key/value</code> pairs that are part of the <code>URL</code>.</p>\n</li>\n<li>\n<p>Can be part of a static URL or be generated by an <code>HTML</code> form using the “GET” method.</p>\n</li>\n<li>\n<p>POST data</p>\n</li>\n<li>\n<p><code>Key/value</code> pairs that are included in the body of the <code>HTTP</code> request.</p>\n</li>\n<li>\n<p>Result from an <code>HTML</code> form using the “POST” method.</p>\n</li>\n</ul>\n<h3 id=\"request-object-query-properties\">Request Object Query Properties <a class=\"heading-anchor-permalink\" href=\"#request-object-query-properties\">#</a></h3>\n<ul>\n<li>An HTTP Request object can include <code>query</code> properties that come from the URL: <code>http://localhost:3000/?name=Lydia&amp;location=United+States</code></li>\n</ul>\n<pre><code class=\"language-js\">\napp.use('/', (req, res) =&gt; {\n\nvar  query  = req.query;\n\nconsole.log(query);\n\nvar  name  = query.name;\n\n// 'Lydia'\n\nvar  location  = query.location; // 'United States'\n\nvar  length  =  Object.keys(query).length; // 2\n\nres.send('Hello World!');\n\n});\n\n</code></pre>\n<h3 id=\"request-object-parameters\">Request Object Parameters <a class=\"heading-anchor-permalink\" href=\"#request-object-parameters\">#</a></h3>\n<ul>\n<li>An HTTP Request object can include <code>param</code> properties that come from a parameterized URL: <code>http://localhost:3000/name/Lydia/location/United States</code>.</li>\n</ul>\n<pre><code class=\"language-js\">\napp.use('/name/:userName/location/:userLocation',\n\n(req, res) =&gt; {\n\nvar  params  = req.params;\n\nconsole.log(params);\n\nvar  name  = params.userName;\n\n// 'Lydia'\n\nvar  location  = params.userLocation; // 'United States'\n\nvar  length  =  Object.keys(params).length; // 2\n\nres.send('Hello World!');\n\n});\n\n</code></pre>\n<h3 id=\"html-forms\">HTML Forms <a class=\"heading-anchor-permalink\" href=\"#html-forms\">#</a></h3>\n<ul>\n<li>\n<p>Forms allow users to enter or select data, e.g. via input boxes, checkboxes, radio buttons, etc.</p>\n</li>\n<li>\n<p>The form specifies the action and method that result when the user chooses to submit the form.</p>\n</li>\n<li>\n<p>Action: the URL to be requested.</p>\n</li>\n<li>\n<p>Method: the HTTP Request “verb,” e.g. GET or POST.</p>\n</li>\n</ul>\n<p><img src=\"2020-04-12-05-18-38.png\" alt=\"\"></p>\n<pre><code class=\"language-html\">\n&lt;html&gt;\n\n&lt;body&gt;\n\n&lt;form  action=&quot;/handleForm&quot;  method=&quot;post&quot;&gt;\n\nName: &lt;input  name=&quot;username&quot;&gt;\n\n&lt;p&gt;\n\nI like:&lt;br&gt;\n\n&lt;input  type=checkbox  name=&quot;animal&quot;  value=&quot;dogs&quot;&gt;Dogs &lt;br&gt;\n\n&lt;input  type=checkbox  name=&quot;animal&quot;  value=&quot;cats&quot;&gt;Cats &lt;br&gt;\n\n&lt;input  type=checkbox  name=&quot;animal&quot;  value=&quot;birds&quot;&gt;Birds &lt;br&gt;\n\n&lt;p&gt;\n\n&lt;input  type=submit  value=&quot;Submit form!&quot;&gt;\n\n&lt;/form&gt;\n\n&lt;/body&gt;\n\n</code></pre>\n<h3 id=\"reading-post-data-in-express\">Reading POST Data in Express <a class=\"heading-anchor-permalink\" href=\"#reading-post-data-in-express\">#</a></h3>\n<ul>\n<li>\n<p>When a form’s method is “GET”, the data is sent in the URL query parameters.</p>\n</li>\n<li>\n<p>When a form’s method is “POST”, the data is sent in the body of the HTTP request.</p>\n</li>\n<li>\n<p>To read the body of the HTTP request in Express, use the body-parser middleware.</p>\n</li>\n<li>\n<p>To install it, run: <code>npm install body-parser</code>.</p>\n</li>\n</ul>\n<pre><code class=\"language-js\">\nvar  express  =  require('express');\n\nvar  app  =  express();\n\napp.use('/public', express.static('files'));\n\nvar  bodyParser  =  require('body-parser');\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use('/handleForm', (req, res) =&gt; {\n\nvar  name  = req.body.username;\n\nvar  animals  = req.body.animal; // this is an array\n\n.  .  .\n\nres.send('Thank you!');\n\n});\n\napp.listen(3000, () =&gt; {\n\nconsole.log('Listening on port 3000');\n\n});\n\n</code></pre>\n<h3 id=\"summary\">Summary <a class=\"heading-anchor-permalink\" href=\"#summary\">#</a></h3>\n<ul>\n<li>\n<p>HTTP Request query properties: key/value pairs that come from URL.</p>\n</li>\n<li>\n<p>HTTP Request param properties: key/value pairs that come from parameterized URL.</p>\n</li>\n<li>\n<p>HTTP Request body properties: input data from form submitting using POST method.</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"example%3A\">Example: <a class=\"heading-anchor-permalink\" href=\"#example%3A\">#</a></h3>\n<p><img src=\"2020-04-12-05-27-54.png\" alt=\"\"></p>\n<p><img src=\"2020-04-12-05-28-12.png\" alt=\"\"></p>\n<pre><code class=\"language-js\">\nvar  bodyParser  =  require('body-parser');\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use('/handleForm', (req, res) =&gt; {\n\nvar  name  = req.body.username;\n\nvar  animals  = [].concat(req.body.animal);\n\nres.type('html').status(200);\n\nres.write('Hello,  '  +  name  +  ', nice to meet you.');\n\nres.write('&lt;p&gt;Here are the animals you like:');\n\nres.write('&lt;ul&gt;');\n\nanimals.forEach( (animal) =&gt; {\n\nres.write('&lt;li&gt;'  +  animal  +  '&lt;/li&gt;');\n\n});\n\nres.write('&lt;/ul&gt;');\n\nres.write(&quot;&lt;a href='/public/form.html'&gt;&quot;  +\n\n&quot;Back to form&lt;/a&gt;&quot;);\n\nres.end();\n\n});\n\n</code></pre>\n<h3 id=\"what-is-ejs%3F\">What is EJS? <a class=\"heading-anchor-permalink\" href=\"#what-is-ejs%3F\">#</a></h3>\n<ul>\n<li>\n<p><code>EJS</code>, or <code>EmbeddedJS</code>, is a view engine that uses data and embedded JavaScript to produce HTML.</p>\n</li>\n<li>\n<p>This allows webpages to be developed statically and rendered dynamically <code>server-side</code>.</p>\n</li>\n<li>\n<p>EmbeddedJS is a package that can be installed with the command: <code>npm install ejs</code>.</p>\n</li>\n</ul>\n<!-- Continue page 280 -->",
      "id": 28
    },
    {
      "path": "PHP/embed_lib.md",
      "url": "PHP/embed_lib.html",
      "content": "# Embed\n",
      "html": "<h1 id=\"embed\">Embed <a class=\"heading-anchor-permalink\" href=\"#embed\">#</a></h1>\n",
      "id": 29
    },
    {
      "path": "PHP/express_mdn.md",
      "url": "PHP/express_mdn.html",
      "content": "from mdn: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/\n\n\n- The  _Express application_  tobject also provides methods to define route handlers for all the other HTTP verbs, which are mostly used in exactly the same way:\n\n`checkout()`, `copy()`, **`delete()`**, **`get()`**, `head()`, `lock()`, `merge()`, `mkactivity()`,  `mkcol()`,  `move()`,  `m-search()`,  `notify()`,  `options()`,  `patch()`,  **`post()`**,  `purge()`,  **`put()`**,  `report()`,  `search()`,  `subscribe()`,  `trace()`,  `unlock()`,  `unsubscribe()`.\n\n- There is a special routing method, `app.all()`, which will be called in response to any HTTP method. This is used for loading middleware functions at a particular path for all request methods:\n\n```js\napp.all('/secret', function(req, res, next) {\n  console.log('Accessing the secret section ...');\n  next(); // pass control to the next handler\n});\n```\nRoutes allow you to match particular patterns of characters in a URL, and extract some values from the URL and pass them as parameters to the route handler (as attributes of the request object passed as a parameter).\n- Routes allow you to match particular patterns of characters in a URL, and extract some values from the URL and pass them as parameters to the route handler (as attributes of the request object passed as a parameter).\n- For example, we can create our wiki route in a module named **wiki.js**, and then export the `Router` object, as shown below:\n\n```js\n// wiki.js - Wiki route module\n\nconst express = require('express');\nconst router = express.Router();\n\n// Home page route\nrouter.get('/', function(req, res) {\n  res.send('Wiki home page');\n});\n\n// About page route\nrouter.get('/about', function(req, res) {\n  res.send('About this wiki');\n});\n\nmodule.exports = router;\n```\n> **Note:** Adding routes to the `Router` object is just like adding routes to the `app` object\n\nTo use the router in our main app file we would then `require()` the route module (**wiki.js**), then call `use()` on the _Express_ application to add the Router to the middleware handling path. The two routes will then be accessible from `/wiki/` and `/wiki/about/`.\n\n### Using middleware:\n\nMiddleware is used extensively in Express apps, for tasks from serving static files to error handling, to compressing HTTP responses. The order in which middleware is called is up to the app developer.\n\n> **Note:** The middleware can perform any operation, execute any code, make changes to the request and response object, and it can _also end the request--response cycle_. If it does not end the cycle then it must call `next()` to pass control to the next middleware function (or the request will be left hanging).\n\nYou can find a list of middleware packages maintained by the express team which include other 3rd party packages: http://expressjs.com/en/resources/middleware.html\n\n# Express Tutorial Part 2: Creating a skeleton website:\n\n## [Installing the Express Application Generator]\n\n```bash\nnpm install express-generator -g\n```\ncreate an `Express` app named 'helloworld':\n` $ express helloworld`\n\nchange directory:  \n`$ cd helloworld  `\n  \ninstall dependencies:  \n`$ npm install`\n  \nrun the app:  \n`$ DEBUG=helloworld:* npm start`\n\nThe generator has a number of options, which you can view on the command line using the  `--help`  (or  `-h`) command:\n\n```bash\n> express --help\n\n  Usage: express [options] [dir]\n\n  Options:\n\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n        --no-view        use static html instead of view engine\n    -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n    -h, --help           output usage information           output usage information\n```\n\n### [What view engine should I use?](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#what_view_engine_should_i_use \"Permalink to What view engine should I use?\")\n\nThe _Express Application Generator_ allows you to configure a number of popular view/templating engines, including [EJS][https://www.npmjs.com/package/ejs], [Hbs][http://github.com/donpark/hbs], [Pug][https://pugjs.org/api/getting-started.html] (Jade), [Twig][https://www.npmjs.com/package/twig], and [Vash][https://www.npmjs.com/package/vash), although it chooses Jade by default if you don't specify a view option.\n\nGenerally speaking, you should select a templating engine that delivers all the functionality you need and allows you to be productive sooner — or in other words:\n-   Time to productivity.\n-   Popularity and activity — Review the popularity of the engine and whether it has an active community.\n-  Style — Some template engines use specific markup to indicate inserted content within \"ordinary\" HTML, while others construct the HTML using a different syntax (for example, using indentation and block names).\n-   Performance/rendering time.\n-   Features — you should consider whether the engines you look at have the following features available:\n    -   Layout inheritance: Allows you to define a base template and then \"inherit\" just the parts of it that you want to be different for a particular page. This is typically a better approach than building templates by including a number of required components or building a template from scratch each time.\n    -   \"Include\" support: Allows you to build up templates by including other templates.\n    -   Concise variable and loop control syntax.\n    -   Ability to filter variable values at template level (e.g. making variables upper-case, or formatting a date value).\n    -   Ability to generate output formats other than HTML (e.g. JSON or XML).\n    -   Support for asynchronous operations and streaming.\n    -   Client-side features. If a templating engine can be used on the client this allows the possibility of having all or most of the rendering done client-side.\n\n> for this project we will use `Pug` templating engine.\n\n### [What CSS stylesheet engine should I use?](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#what_css_stylesheet_engine_should_i_use \"Permalink to What CSS stylesheet engine should I use?\")\n\nby use the one of the most common CSS stylesheet engines: `LESS, SASS, Compass, Stylus`.\n\nAs with templating engines, you should use the stylesheet engine that will allow your team to be most productive. For this project, we'll use vanilla CSS (the default) as our CSS requirements are not sufficiently complicated to justify using anything else.\n\n### [What database should I use?](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#what_database_should_i_use \"Permalink to What database should I use?\")\n\nThe generated code doesn't use/include any databases. _Express_ apps can use any [database mechanism](https://expressjs.com/en/guide/database-integration.html) supported by _Node_ (_Express_ itself doesn't define any specific additional behavior/requirements for database management).\n\n### Creating the project\n\nFor the sample Local Library app we're going to build, we'll create a project named express-locallibrary-tutorial using the Pug template library and no CSS engine.First, navigate to where you want to create the project and then run the Express Application Generator in the command prompt as shown:\n\n` $ express express-locallibrary-tutorial --view=pug`\n\nThe generator will create (and list) the project's files.  \n  create : express-locallibrary-tutorial\\\n   create : express-locallibrary-tutorial\\public\\\n   create : express-locallibrary-tutorial\\public\\javascripts\\\n   create : express-locallibrary-tutorial\\public\\images\\\n   create : express-locallibrary-tutorial\\public\\stylesheets\\\n   create : express-locallibrary-tutorial\\public\\stylesheets\\style.css\n   create : express-locallibrary-tutorial\\routes\\\n   create : express-locallibrary-tutorial\\routes\\index.js\n   create : express-locallibrary-tutorial\\routes\\users.js\n   create : express-locallibrary-tutorial\\views\\\n   create : express-locallibrary-tutorial\\views\\error.pug\n   create : express-locallibrary-tutorial\\views\\index.pug\n   create : express-locallibrary-tutorial\\views\\layout.pug\n   create : express-locallibrary-tutorial\\app.js\n   create : express-locallibrary-tutorial\\package.json\n   create : express-locallibrary-tutorial\\bin\\\n   create : express-locallibrary-tutorial\\bin\\www\n\n   change directory:\n     > cd express-locallibrary-tutorial\n\n   install dependencies:\n     > npm install\n\n   run the app (Bash (Linux or macOS))\n     > DEBUG=express-locallibrary-tutorial:* npm start\n\n   run the app (PowerShell (Windows))\n     > $ENV:DEBUG = \"express-locallibrary-tutorial:*\"; npm start\n\n   run the app (Command Prompt (Windows)):\n     > SET DEBUG=express-locallibrary-tutorial:* & npm start\n\n## [Enable server restart on file changes](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#enable_server_restart_on_file_changes \"Permalink to Enable server restart on file changes\")\n\n> Note: any change4s you make to your express website are currently not visible until you restart the server.  A convention tool for this purpose is `nodemon`. Here we'll install and use it locally as a developer dependency so any developers working with this project get it automatically when they install application.\n\ninstall `nodemon` locally:\n\n` $ npm install --save-dev nodemon`\n\n**Note:** Because the tool isn't installed globally we can't launch it from the command line (unless we add it to the path) but we can call it from an NPM script because NPM knows all about the installed packages. Find the  `scripts`  section of your package.json. Initially, it will contain one line, which begins with  `\"start\"`. Update it by putting a comma at the end of that line, and adding the  `\"devstart\"` and  `\"serverstart\"`  lines shown below:\n\n```\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"devstart\": \"nodemon ./bin/www\",\n    \"serverstart\": \"DEBUG=express-locallibrary-tutorial:* npm run devstart\"\n  },\n```\n\nWe can now start the server in almost exactly the same way as previously, but using the `devstart` command:\n\nOn macOS or Linux, use this command:\n\n```bash\nDEBUG=express-locallibrary-tutorial:* npm run devstart\n```\n## [The generated project](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#the_generated_project \"Permalink to The generated project\")\n\n### [Directory structure](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#directory_structure \"Permalink to Directory structure\")\n\nThe generated project, now that you have installed dependencies, has the following file structure (files are the items  **not**  prefixed with \"/\"). The  **package.json**  file defines the application dependencies and other information. It also defines a startup script that will call the application entry point, the JavaScript file  **/bin/www**.\n\n### [package.json](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#package.json \"Permalink to package.json\")\n\nThe  **package.json**  file defines the application dependencies and other information:\n\n```json\n{\n  \"name\": \"express-locallibrary-tutorial\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node ./bin/www\"\n  },\n  \n  \"dependencies\": {\n    \"cookie-parser\": \"~1.4.4\",\n    \"debug\": \"~2.6.9\",\n    \"express\": \"~4.16.1\",\n    \"http-errors\": \"~1.6.3\",\n    \"morgan\": \"~1.9.1\",\n    \"pug\": \"2.0.0-beta11\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.4\"\n  }\n}\n```\n\nThe dependencies include the  _express_  package and the package for our selected view engine (_pug_). In addition, we have the following packages that are useful in many web applications:\n\n-   [cookie-parser](https://www.npmjs.com/package/cookie-parser): Used to parse the cookie header and populate  `req.cookies`  (essentially provides a convenient method for accessing cookie information).\n-   [debug](https://www.npmjs.com/package/debug): A tiny node debugging utility modeled after node core's debugging technique.\n-   [morgan](https://www.npmjs.com/package/morgan): An HTTP request logger middleware for node.\n-   [http-errors](https://www.npmjs.com/package/http-errors): Create HTTP errors where needed (for express error handling).\n\nThe scripts section first defines a \"_start_\" script, which is what we are invoking when we call  `npm start`  to start the server (this script was added by the  _Express Application Generator_). From the script definition, you can see that this actually starts the JavaScript file  **./bin/www**  with  _node_.\n\n\nThe file `/bin/www`is the application entry point! The very first thing this does is `require()` the \"real\" application entry point (`app.js`, in the project root) that sets up and returns the express() application object. `#!/usr/bin/env node`\n\n```js\n/**\n * Module dependencies.\n */\nvar app = require('../app');\n```\n\nNote: `require()` is a global node function that is used to import modules into the current file. Here we specify `app.js` module using a relative path and omitting the optional (.js) file extension.\n\n### [app.js](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#app.js \"Permalink to app.js\")\n\n\n",
      "html": "<p>from mdn: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/\">https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/</a></p>\n<ul>\n<li>The  <em>Express application</em>  tobject also provides methods to define route handlers for all the other HTTP verbs, which are mostly used in exactly the same way:</li>\n</ul>\n<p><code>checkout()</code>, <code>copy()</code>, <strong><code>delete()</code></strong>, <strong><code>get()</code></strong>, <code>head()</code>, <code>lock()</code>, <code>merge()</code>, <code>mkactivity()</code>,  <code>mkcol()</code>,  <code>move()</code>,  <code>m-search()</code>,  <code>notify()</code>,  <code>options()</code>,  <code>patch()</code>,  <strong><code>post()</code></strong>,  <code>purge()</code>,  <strong><code>put()</code></strong>,  <code>report()</code>,  <code>search()</code>,  <code>subscribe()</code>,  <code>trace()</code>,  <code>unlock()</code>,  <code>unsubscribe()</code>.</p>\n<ul>\n<li>There is a special routing method, <code>app.all()</code>, which will be called in response to any HTTP method. This is used for loading middleware functions at a particular path for all request methods:</li>\n</ul>\n<pre><code class=\"language-js\">app.all('/secret', function(req, res, next) {\n  console.log('Accessing the secret section ...');\n  next(); // pass control to the next handler\n});\n</code></pre>\n<p>Routes allow you to match particular patterns of characters in a URL, and extract some values from the URL and pass them as parameters to the route handler (as attributes of the request object passed as a parameter).</p>\n<ul>\n<li>Routes allow you to match particular patterns of characters in a URL, and extract some values from the URL and pass them as parameters to the route handler (as attributes of the request object passed as a parameter).</li>\n<li>For example, we can create our wiki route in a module named <strong>wiki.js</strong>, and then export the <code>Router</code> object, as shown below:</li>\n</ul>\n<pre><code class=\"language-js\">// wiki.js - Wiki route module\n\nconst express = require('express');\nconst router = express.Router();\n\n// Home page route\nrouter.get('/', function(req, res) {\n  res.send('Wiki home page');\n});\n\n// About page route\nrouter.get('/about', function(req, res) {\n  res.send('About this wiki');\n});\n\nmodule.exports = router;\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> Adding routes to the <code>Router</code> object is just like adding routes to the <code>app</code> object</p>\n</blockquote>\n<p>To use the router in our main app file we would then <code>require()</code> the route module (<strong>wiki.js</strong>), then call <code>use()</code> on the <em>Express</em> application to add the Router to the middleware handling path. The two routes will then be accessible from <code>/wiki/</code> and <code>/wiki/about/</code>.</p>\n<h3 id=\"using-middleware%3A\">Using middleware: <a class=\"heading-anchor-permalink\" href=\"#using-middleware%3A\">#</a></h3>\n<p>Middleware is used extensively in Express apps, for tasks from serving static files to error handling, to compressing HTTP responses. The order in which middleware is called is up to the app developer.</p>\n<blockquote>\n<p><strong>Note:</strong> The middleware can perform any operation, execute any code, make changes to the request and response object, and it can <em>also end the request–response cycle</em>. If it does not end the cycle then it must call <code>next()</code> to pass control to the next middleware function (or the request will be left hanging).</p>\n</blockquote>\n<p>You can find a list of middleware packages maintained by the express team which include other 3rd party packages: <a href=\"http://expressjs.com/en/resources/middleware.html\">http://expressjs.com/en/resources/middleware.html</a></p>\n<h1 id=\"express-tutorial-part-2%3A-creating-a-skeleton-website%3A\">Express Tutorial Part 2: Creating a skeleton website: <a class=\"heading-anchor-permalink\" href=\"#express-tutorial-part-2%3A-creating-a-skeleton-website%3A\">#</a></h1>\n<h2 id=\"%5Binstalling-the-express-application-generator%5D\">[Installing the Express Application Generator] <a class=\"heading-anchor-permalink\" href=\"#%5Binstalling-the-express-application-generator%5D\">#</a></h2>\n<pre><code class=\"language-bash\">npm install express-generator -g\n</code></pre>\n<p>create an <code>Express</code> app named ‘helloworld’:\n<code>$ express helloworld</code></p>\n<p>change directory:<br>\n<code>$ cd helloworld</code></p>\n<p>install dependencies:<br>\n<code>$ npm install</code></p>\n<p>run the app:<br>\n<code>$ DEBUG=helloworld:* npm start</code></p>\n<p>The generator has a number of options, which you can view on the command line using the  <code>--help</code>  (or  <code>-h</code>) command:</p>\n<pre><code class=\"language-bash\">&gt; express --help\n\n  Usage: express [options] [dir]\n\n  Options:\n\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n        --no-view        use static html instead of view engine\n    -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n    -h, --help           output usage information           output usage information\n</code></pre>\n<h3 id=\"what-view-engine-should-i-use%3F\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#what_view_engine_should_i_use\" title=\"Permalink to What view engine should I use?\">What view engine should I use?</a> <a class=\"heading-anchor-permalink\" href=\"#what-view-engine-should-i-use%3F\">#</a></h3>\n<p>The <em>Express Application Generator</em> allows you to configure a number of popular view/templating engines, including [EJS][<a href=\"https://www.npmjs.com/package/ejs\">https://www.npmjs.com/package/ejs</a>], [Hbs][<a href=\"http://github.com/donpark/hbs\">http://github.com/donpark/hbs</a>], [Pug][<a href=\"https://pugjs.org/api/getting-started.html\">https://pugjs.org/api/getting-started.html</a>] (Jade), [Twig][<a href=\"https://www.npmjs.com/package/twig\">https://www.npmjs.com/package/twig</a>], and [Vash][<a href=\"https://www.npmjs.com/package/vash\">https://www.npmjs.com/package/vash</a>), although it chooses Jade by default if you don’t specify a view option.</p>\n<p>Generally speaking, you should select a templating engine that delivers all the functionality you need and allows you to be productive sooner — or in other words:</p>\n<ul>\n<li>Time to productivity.</li>\n<li>Popularity and activity — Review the popularity of the engine and whether it has an active community.</li>\n<li>Style — Some template engines use specific markup to indicate inserted content within “ordinary” HTML, while others construct the HTML using a different syntax (for example, using indentation and block names).</li>\n<li>Performance/rendering time.</li>\n<li>Features — you should consider whether the engines you look at have the following features available:\n<ul>\n<li>Layout inheritance: Allows you to define a base template and then “inherit” just the parts of it that you want to be different for a particular page. This is typically a better approach than building templates by including a number of required components or building a template from scratch each time.</li>\n<li>“Include” support: Allows you to build up templates by including other templates.</li>\n<li>Concise variable and loop control syntax.</li>\n<li>Ability to filter variable values at template level (e.g. making variables upper-case, or formatting a date value).</li>\n<li>Ability to generate output formats other than HTML (e.g. JSON or XML).</li>\n<li>Support for asynchronous operations and streaming.</li>\n<li>Client-side features. If a templating engine can be used on the client this allows the possibility of having all or most of the rendering done client-side.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>for this project we will use <code>Pug</code> templating engine.</p>\n</blockquote>\n<h3 id=\"what-css-stylesheet-engine-should-i-use%3F\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#what_css_stylesheet_engine_should_i_use\" title=\"Permalink to What CSS stylesheet engine should I use?\">What CSS stylesheet engine should I use?</a> <a class=\"heading-anchor-permalink\" href=\"#what-css-stylesheet-engine-should-i-use%3F\">#</a></h3>\n<p>by use the one of the most common CSS stylesheet engines: <code>LESS, SASS, Compass, Stylus</code>.</p>\n<p>As with templating engines, you should use the stylesheet engine that will allow your team to be most productive. For this project, we’ll use vanilla CSS (the default) as our CSS requirements are not sufficiently complicated to justify using anything else.</p>\n<h3 id=\"what-database-should-i-use%3F\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#what_database_should_i_use\" title=\"Permalink to What database should I use?\">What database should I use?</a> <a class=\"heading-anchor-permalink\" href=\"#what-database-should-i-use%3F\">#</a></h3>\n<p>The generated code doesn’t use/include any databases. <em>Express</em> apps can use any <a href=\"https://expressjs.com/en/guide/database-integration.html\">database mechanism</a> supported by <em>Node</em> (<em>Express</em> itself doesn’t define any specific additional behavior/requirements for database management).</p>\n<h3 id=\"creating-the-project\">Creating the project <a class=\"heading-anchor-permalink\" href=\"#creating-the-project\">#</a></h3>\n<p>For the sample Local Library app we’re going to build, we’ll create a project named express-locallibrary-tutorial using the Pug template library and no CSS engine.First, navigate to where you want to create the project and then run the Express Application Generator in the command prompt as shown:</p>\n<p><code>$ express express-locallibrary-tutorial --view=pug</code></p>\n<p>The generator will create (and list) the project’s files.<br>\ncreate : express-locallibrary-tutorial<br>\ncreate : express-locallibrary-tutorial\\public<br>\ncreate : express-locallibrary-tutorial\\public\\javascripts<br>\ncreate : express-locallibrary-tutorial\\public\\images<br>\ncreate : express-locallibrary-tutorial\\public\\stylesheets<br>\ncreate : express-locallibrary-tutorial\\public\\stylesheets\\style.css\ncreate : express-locallibrary-tutorial\\routes<br>\ncreate : express-locallibrary-tutorial\\routes\\index.js\ncreate : express-locallibrary-tutorial\\routes\\users.js\ncreate : express-locallibrary-tutorial\\views<br>\ncreate : express-locallibrary-tutorial\\views\\error.pug\ncreate : express-locallibrary-tutorial\\views\\index.pug\ncreate : express-locallibrary-tutorial\\views\\layout.pug\ncreate : express-locallibrary-tutorial\\app.js\ncreate : express-locallibrary-tutorial\\package.json\ncreate : express-locallibrary-tutorial\\bin<br>\ncreate : express-locallibrary-tutorial\\bin\\www</p>\n<p>change directory:\n&gt; cd express-locallibrary-tutorial</p>\n<p>install dependencies:\n&gt; npm install</p>\n<p>run the app (Bash (Linux or macOS))\n&gt; DEBUG=express-locallibrary-tutorial:* npm start</p>\n<p>run the app (PowerShell (Windows))\n&gt; $ENV:DEBUG = “express-locallibrary-tutorial:*”; npm start</p>\n<p>run the app (Command Prompt (Windows)):\n&gt; SET DEBUG=express-locallibrary-tutorial:* &amp; npm start</p>\n<h2 id=\"enable-server-restart-on-file-changes\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#enable_server_restart_on_file_changes\" title=\"Permalink to Enable server restart on file changes\">Enable server restart on file changes</a> <a class=\"heading-anchor-permalink\" href=\"#enable-server-restart-on-file-changes\">#</a></h2>\n<blockquote>\n<p>Note: any change4s you make to your express website are currently not visible until you restart the server.  A convention tool for this purpose is <code>nodemon</code>. Here we’ll install and use it locally as a developer dependency so any developers working with this project get it automatically when they install application.</p>\n</blockquote>\n<p>install <code>nodemon</code> locally:</p>\n<p><code>$ npm install --save-dev nodemon</code></p>\n<p><strong>Note:</strong> Because the tool isn’t installed globally we can’t launch it from the command line (unless we add it to the path) but we can call it from an NPM script because NPM knows all about the installed packages. Find the  <code>scripts</code>  section of your package.json. Initially, it will contain one line, which begins with  <code>&quot;start&quot;</code>. Update it by putting a comma at the end of that line, and adding the  <code>&quot;devstart&quot;</code> and  <code>&quot;serverstart&quot;</code>  lines shown below:</p>\n<pre><code>  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;,\n    &quot;devstart&quot;: &quot;nodemon ./bin/www&quot;,\n    &quot;serverstart&quot;: &quot;DEBUG=express-locallibrary-tutorial:* npm run devstart&quot;\n  },\n</code></pre>\n<p>We can now start the server in almost exactly the same way as previously, but using the <code>devstart</code> command:</p>\n<p>On macOS or Linux, use this command:</p>\n<pre><code class=\"language-bash\">DEBUG=express-locallibrary-tutorial:* npm run devstart\n</code></pre>\n<h2 id=\"the-generated-project\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#the_generated_project\" title=\"Permalink to The generated project\">The generated project</a> <a class=\"heading-anchor-permalink\" href=\"#the-generated-project\">#</a></h2>\n<h3 id=\"directory-structure\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#directory_structure\" title=\"Permalink to Directory structure\">Directory structure</a> <a class=\"heading-anchor-permalink\" href=\"#directory-structure\">#</a></h3>\n<p>The generated project, now that you have installed dependencies, has the following file structure (files are the items  <strong>not</strong>  prefixed with “/”). The  <strong>package.json</strong>  file defines the application dependencies and other information. It also defines a startup script that will call the application entry point, the JavaScript file  <strong>/bin/www</strong>.</p>\n<h3 id=\"package.json\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#package.json\" title=\"Permalink to package.json\">package.json</a> <a class=\"heading-anchor-permalink\" href=\"#package.json\">#</a></h3>\n<p>The  <strong>package.json</strong>  file defines the application dependencies and other information:</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;express-locallibrary-tutorial&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;private&quot;: true,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node ./bin/www&quot;\n  },\n  \n  &quot;dependencies&quot;: {\n    &quot;cookie-parser&quot;: &quot;~1.4.4&quot;,\n    &quot;debug&quot;: &quot;~2.6.9&quot;,\n    &quot;express&quot;: &quot;~4.16.1&quot;,\n    &quot;http-errors&quot;: &quot;~1.6.3&quot;,\n    &quot;morgan&quot;: &quot;~1.9.1&quot;,\n    &quot;pug&quot;: &quot;2.0.0-beta11&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;nodemon&quot;: &quot;^2.0.4&quot;\n  }\n}\n</code></pre>\n<p>The dependencies include the  <em>express</em>  package and the package for our selected view engine (<em>pug</em>). In addition, we have the following packages that are useful in many web applications:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/cookie-parser\">cookie-parser</a>: Used to parse the cookie header and populate  <code>req.cookies</code>  (essentially provides a convenient method for accessing cookie information).</li>\n<li><a href=\"https://www.npmjs.com/package/debug\">debug</a>: A tiny node debugging utility modeled after node core’s debugging technique.</li>\n<li><a href=\"https://www.npmjs.com/package/morgan\">morgan</a>: An HTTP request logger middleware for node.</li>\n<li><a href=\"https://www.npmjs.com/package/http-errors\">http-errors</a>: Create HTTP errors where needed (for express error handling).</li>\n</ul>\n<p>The scripts section first defines a “<em>start</em>” script, which is what we are invoking when we call  <code>npm start</code>  to start the server (this script was added by the  <em>Express Application Generator</em>). From the script definition, you can see that this actually starts the JavaScript file  <strong>./bin/www</strong>  with  <em>node</em>.</p>\n<p>The file <code>/bin/www</code>is the application entry point! The very first thing this does is <code>require()</code> the “real” application entry point (<code>app.js</code>, in the project root) that sets up and returns the express() application object. <code>#!/usr/bin/env node</code></p>\n<pre><code class=\"language-js\">/**\n * Module dependencies.\n */\nvar app = require('../app');\n</code></pre>\n<p>Note: <code>require()</code> is a global node function that is used to import modules into the current file. Here we specify <code>app.js</code> module using a relative path and omitting the optional (.js) file extension.</p>\n<h3 id=\"app.js\"><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website#app.js\" title=\"Permalink to app.js\">app.js</a> <a class=\"heading-anchor-permalink\" href=\"#app.js\">#</a></h3>\n",
      "id": 30
    },
    {
      "path": "PHP/helpful_resources.md",
      "url": "PHP/helpful_resources.html",
      "content": "# Resources for Linux:\n\n- Linux commands cheatsheet: (https://phoenixnap.com/kb/linux-commands-cheat-sheet)\n",
      "html": "<h1 id=\"resources-for-linux%3A\">Resources for Linux: <a class=\"heading-anchor-permalink\" href=\"#resources-for-linux%3A\">#</a></h1>\n<ul>\n<li>Linux commands cheatsheet: (<a href=\"https://phoenixnap.com/kb/linux-commands-cheat-sheet\">https://phoenixnap.com/kb/linux-commands-cheat-sheet</a>)</li>\n</ul>\n",
      "id": 31
    },
    {
      "path": "PHP/html_forms.md",
      "url": "PHP/html_forms.html",
      "content": "# Working with Forms in PHP\n\nfrom (https://www.section.io/engineering-education/working-with-forms-in-php/)\n\n---\n\n- There are four database operations involved, these being create, read, update, and delete. This pattern is commonly known by the acronym CRUD operations.\n- Hypertext Transfer Protocol (HTTP) enables communication between the client (browser) and the server.\n- HTTP supports several methods such as GET, POST, and PUT. Data is processed based on the selected method:\n  - The GET method fetches data from the server.\n  - The POST method sends data from the HTML form to the server to create a resource.\n  - PUT method sends data to the server to create or update a resource.\n\n#### Creating form:\n\ncopy this code into `index.php`\n\n```html\n<body>\n  <h1>HTML Form</h1>\n  <!-- The action identifies the page where the form input is submitted.  -->\n  <form method=\"\" action=\"index.php\">\n    Name: <input type=\"text\" name=\"name\" /><br /><br />\n    Email: <input type=\"text\" name=\"email\" /><br />\n    <br />\n    <input type=\"submit\" value=\"submit\" />\n  </form>\n</body>\n```\n\n- POST is a superglobal method, which collects form data and submits it to the HTTP server. The data entered is encoded, and the content is hidden. POST method has a global scope, and data is accessed from any script.\n- POST does not have a limitation on the amount of data sent from the form.\n\n#### Processing the form data (PHP script)\n\n```php\n<?php\n    # Check if name and email fileds are empty\n    if(empty($_POST['name']) && empty($_POST['email'])){\n        # If the fields are empty, display a message to the user\n        echo \" <br/> Please fill in the fields\";\n    # Process the form data if the input fields are not empty\n    }else{\n        $name= $_POST['name'];\n        $email= $_POST['email'];\n        echo ('Your Name is:     '. $name. '<br/>');\n        echo ('Your Email is:'   . $email. '<br/>');\n    }\n?>\n```\n\n- Most systems have a limit of 255 characters. The best example of using the GET method is with the search engine forms. The code below can be used to process an HTML form with a method set as GET.\n\n```php\n<?php\n    # Check if name and email fileds are empty\n    if(empty($_GET['name']) && empty($_GET['email'])){\n        # If the fields are empty, display a message to the user\n        echo \"Please fill in the fields\";\n    # Process the form data if the input fields are not empty\n    }else{\n        $name= $_GET['name'];\n        $email= $_GET['email'];\n        echo ('Welcome:     '. $name. '<br/>');\n        echo ('This is your email address:'   . $email. '<br/>');\n    }\n?>\n```\n\n## HTML forms and MySQL database CRUD operations\n\n- First, create a MySQL database and name it crud. Create a table with three columns, name it user.\n  The columns are:\n\n  - id\n  - name\n  - email\n\n  #### Create a database server Connection:\n\n- Create a file named connect.php and place in it the following code. The scripts make a connection to the MySQL database server. later you will use this file using `include(\"connect.php\")`\n\n```php\n  <?php\n    $servername = \"localhost\";\n    $username = \"root\"; # MySQL user\n    $password = \"\"; # MySQL Server root password\n    $dbname='crud'; # Database name\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if ($conn->connect_error) {\n        # Display an error mesage if the connection fails\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n?>\n```\n\n#### Create a record in the database:\n\n```php\n<?php\n// Include script to make a database connection\ninclude(\"connect.php\");\n// Check if input fileds are empty\nif(empty($_POST['name']) && empty($_POST['email'])){\n    // If the fields are empty, display a message to the user\n    echo \"Please fill in the fields\";\n// Process the form data if the input fields are not empty\n}else{\n    $name= $_POST['name'];\n    $email= $_POST['email'];\n    echo ('Your Name is:     '. $name. '<br/>');\n    echo ('Your Email is:'   . $email. '<br/>');\n    # Insert into the database\n    $query = \"INSERT INTO user(name,email) VALUES ('$name','$email')\";\n    if (mysqli_query($conn, $query)) {\n        echo \"New record created successfully !\";\n    } else {\n         echo \"Error inserting record: \" . $conn->error;\n    }\n}\n?>\n```\n\n- Here is the form:\n\n```html\n<body>\n  <h1>Form</h1>\n  <form method=\"post\" action=\"form-post.php\">\n    Name: <input type=\"text\" name=\"name\" /><br /><br />\n    Email: <input type=\"text\" name=\"email\" /><br />\n    <br />\n    <input type=\"submit\" name=\"save\" value=\"submit\" />\n  </form>\n</body>\n```\n\n#### Read data and display in a HTML table\n\n```php\n<?php\n# Include script to make a database connection\ninclude(\"connect.php\")\n$ Read From the database and display in the table\n$query2 = \"SELECT * FROM user\";\n$result = $conn->query($query2);\nif ($result->num_rows > 0) {\n    # Output data for each row\n    echo \"<table id='tsa' border='1' id='example' class='table table-striped responsive-utilities table-hover'>\n              <thead>\n                <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Action 1</th>\n                <th>Action 2</th>\n                </tr>\n              </thead>\n              \";\n    while($row = $result->fetch_assoc()) {\n       echo \"<tr id='green' \",\">\",\n            \"<td>\", $row[\"id\"],\"</td>\",\n            \"<td>\", $row[\"name\"],\"</td>\",\n            \"<td>\", $row[\"email\"],\"</td>\",\n            \"<td>\",\n                \"<form action='update.php' method='post'>\n                 <input name='id' value='\",$row[\"id\"],\"' hidden>\n                 <button type='submit' name='update' value='update'>Edit</button>\n                </form>\",\n            \"</td>\",\n            \"<td>\",\n                \"<form action='form-post.php' method='post'>\n                 <input name='id' value='\",$row[\"id\"],\"' hidden>\n                 <button type='submit' name='delete' value='delete'>Delete</button>\n                </form>\",\n            \"</td>\",\n            \"</tr>\";\n    }\n    echo  \"</table>\";\n}else {\n echo \"No Records!\";\n}\n?>\n```\n\n#### Update existing data in the database:\n\n- The update form is displayed when we click the edit button in the table cell.\n- Take note of the code used to create the edit button on the table. The update button is a submit button for a form with **hidden** input fields.\n\n```html\n<td>\n  <form action=\"update.php\" method=\"post\">\n    <input name=\"id\" value='\",$row[\"id\"],\"' hidden />\n    <button type=\"submit\" name=\"update\" value=\"update\">Edit</button>\n  </form>\n</td>\n```\n\n- In the update.php script, a form with data matching the submitted information is displayed for editing. Once the edit is complete, the updated data is resubmitted to the script for processing. In this case, we are using the same script to process update requests.\n\n```php\n<?php\n// Include script to make a database connection\ninclude(\"connect.php\");\n// Empty string to be used later\n$name='';\n$email='';\n$id='';\n\n// Button click to update using POST method\nif(!empty($_POST['update']) && !empty($_POST['id']) )  {\n  $id=$_POST['id'];\n  // Fetch record with ID and populate it in the form\n  $query2 = \"SELECT * FROM user WHERE id='\".$_POST['id'].\"' \";\n  $result = $conn->query($query2);\n  if ($result->num_rows > 0) {\n    // Output data for each row\n    while($row = $result->fetch_assoc()) {\n      $name=$row[\"name\"];\n      $email=$row[\"email\"];\n    }\n    echo \"Current Details: \" .\"<b> - Name:</b> \" . $name. \" <b>Email:</b>\" . $email. \"<br>\";\n  } else {\n    echo \"Error updating\";\n  }\n}\n\n// Button click to update using GET method\nif(!empty($_GET['update']) && !empty($_GET['id']) )  {\n  $id=$_GET['id'];\n  // Fetch record with id and populate it in the form\n  $query2 = \"SELECT * FROM user WHERE id='\".$_GET['id'].\"' \";\n  $result = $conn->query($query2);\n  if ($result->num_rows > 0) {\n    // Output data for each row\n    while($row = $result->fetch_assoc()) {\n      $name=$row[\"name\"];\n      $email=$row[\"email\"];\n    }\n    echo \"Current Details: \" .\"<b> - Name:</b> \" . $name. \" <b>Email:</b>\" . $email. \"<br>\";\n  } else {\n    echo \"Error updating\";\n  }\n}\n// Check that the input fields are not empty and process the data\nif(!empty($_POST['name']) && !empty($_POST['email']) && !empty($_POST['id']) ){\n    // Insert into the database\n  $query = \"UPDATE user SET name='\".$_POST['name'].\"', email='\".$_POST['email'].\"' WHERE id='\".$_POST['id'].\"' \";\n  if (mysqli_query($conn, $query)) {\n      echo \"Record updated successfully!<br/>\";\n      echo '<a href=\"form-get.php\">Get Form</a><br/>\n            <a href=\"form-post.php\">Post Form</a>';\n      die(0);\n  } else {\n      // Display an error message if unable to update the record\n       echo \"Error updating record: \" . $conn->error;\n       die(0);\n  }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>FORM</title>\n</head>\n<body>\n    <h1>Form</h1>\n    <p>Edit the record</p>\n    <form method=\"POST\" action=\"update.php\">\n        ID: <input type=\"text\" name=\"id\" value=\"<?php echo($id); ?>\" required><br><br/>\n        Name: <input type=\"text\" name=\"name\" value=\"<?php echo($name); ?>\" required><br><br/>\n        Email: <input type=\"text\" name=\"email\" value=\"<?php echo($email); ?>\" required><br/>\n        <br/>\n        <input type=\"submit\" value=\"update\">\n    </form>\n</body>\n</html>\n```\n#### Delete a record in the table:\n\n- To delete a record in the table, the user clicks the delete button in the HTML table. Take note of the code used to display a button inside a table cell.\n\n```html\n<td>\n    <form action='form-post.php' method='post'>\n        <input name='id' value='\",$row[\"id\"],\"' hidden>\n        <button type='submit' name='delete' value='delete'>Delete</button>\n    </form>\n</td>\n```\n- The submit button has a hidden id field. The data is sent to a form and processed by the PHP script below. If the id is not empty, then the record with the submitted id is deleted.\n\n```php\n// Check that the input fields are not empty and process the data\nif(!empty($_POST['delete']) && !empty($_POST['id'])){\n    $query3 = \"DELETE FROM user WHERE id='\".$_POST['id'].\"' \";\n    if (mysqli_query($conn, $query3)) {\n        echo \"Record deleted successfully !\";\n    } else {\n        // Display an error message if unable to delete the record\n       echo \"Error deleting record: \" . $conn->error;\n    }\n}\n```",
      "html": "<h1 id=\"working-with-forms-in-php\">Working with Forms in PHP <a class=\"heading-anchor-permalink\" href=\"#working-with-forms-in-php\">#</a></h1>\n<p>from (<a href=\"https://www.section.io/engineering-education/working-with-forms-in-php/\">https://www.section.io/engineering-education/working-with-forms-in-php/</a>)</p>\n<hr>\n<ul>\n<li>There are four database operations involved, these being create, read, update, and delete. This pattern is commonly known by the acronym CRUD operations.</li>\n<li>Hypertext Transfer Protocol (HTTP) enables communication between the client (browser) and the server.</li>\n<li>HTTP supports several methods such as GET, POST, and PUT. Data is processed based on the selected method:\n<ul>\n<li>The GET method fetches data from the server.</li>\n<li>The POST method sends data from the HTML form to the server to create a resource.</li>\n<li>PUT method sends data to the server to create or update a resource.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"creating-form%3A\">Creating form: <a class=\"heading-anchor-permalink\" href=\"#creating-form%3A\">#</a></h4>\n<p>copy this code into <code>index.php</code></p>\n<pre><code class=\"language-html\">&lt;body&gt;\n  &lt;h1&gt;HTML Form&lt;/h1&gt;\n  &lt;!-- The action identifies the page where the form input is submitted.  --&gt;\n  &lt;form method=&quot;&quot; action=&quot;index.php&quot;&gt;\n    Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;br /&gt;&lt;br /&gt;\n    Email: &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;br /&gt;\n    &lt;br /&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n</code></pre>\n<ul>\n<li>POST is a superglobal method, which collects form data and submits it to the HTTP server. The data entered is encoded, and the content is hidden. POST method has a global scope, and data is accessed from any script.</li>\n<li>POST does not have a limitation on the amount of data sent from the form.</li>\n</ul>\n<h4 id=\"processing-the-form-data-(php-script)\">Processing the form data (PHP script) <a class=\"heading-anchor-permalink\" href=\"#processing-the-form-data-(php-script)\">#</a></h4>\n<pre><code class=\"language-php\">&lt;?php\n    # Check if name and email fileds are empty\n    if(empty($_POST['name']) &amp;&amp; empty($_POST['email'])){\n        # If the fields are empty, display a message to the user\n        echo &quot; &lt;br/&gt; Please fill in the fields&quot;;\n    # Process the form data if the input fields are not empty\n    }else{\n        $name= $_POST['name'];\n        $email= $_POST['email'];\n        echo ('Your Name is:     '. $name. '&lt;br/&gt;');\n        echo ('Your Email is:'   . $email. '&lt;br/&gt;');\n    }\n?&gt;\n</code></pre>\n<ul>\n<li>Most systems have a limit of 255 characters. The best example of using the GET method is with the search engine forms. The code below can be used to process an HTML form with a method set as GET.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n    # Check if name and email fileds are empty\n    if(empty($_GET['name']) &amp;&amp; empty($_GET['email'])){\n        # If the fields are empty, display a message to the user\n        echo &quot;Please fill in the fields&quot;;\n    # Process the form data if the input fields are not empty\n    }else{\n        $name= $_GET['name'];\n        $email= $_GET['email'];\n        echo ('Welcome:     '. $name. '&lt;br/&gt;');\n        echo ('This is your email address:'   . $email. '&lt;br/&gt;');\n    }\n?&gt;\n</code></pre>\n<h2 id=\"html-forms-and-mysql-database-crud-operations\">HTML forms and MySQL database CRUD operations <a class=\"heading-anchor-permalink\" href=\"#html-forms-and-mysql-database-crud-operations\">#</a></h2>\n<ul>\n<li>\n<p>First, create a MySQL database and name it crud. Create a table with three columns, name it user.\nThe columns are:</p>\n<ul>\n<li>id</li>\n<li>name</li>\n<li>email</li>\n</ul>\n<h4 id=\"create-a-database-server-connection%3A\">Create a database server Connection: <a class=\"heading-anchor-permalink\" href=\"#create-a-database-server-connection%3A\">#</a></h4>\n</li>\n<li>\n<p>Create a file named connect.php and place in it the following code. The scripts make a connection to the MySQL database server. later you will use this file using <code>include(&quot;connect.php&quot;)</code></p>\n</li>\n</ul>\n<pre><code class=\"language-php\">  &lt;?php\n    $servername = &quot;localhost&quot;;\n    $username = &quot;root&quot;; # MySQL user\n    $password = &quot;&quot;; # MySQL Server root password\n    $dbname='crud'; # Database name\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if ($conn-&gt;connect_error) {\n        # Display an error mesage if the connection fails\n        die(&quot;Connection failed: &quot; . $conn-&gt;connect_error);\n    }\n?&gt;\n</code></pre>\n<h4 id=\"create-a-record-in-the-database%3A\">Create a record in the database: <a class=\"heading-anchor-permalink\" href=\"#create-a-record-in-the-database%3A\">#</a></h4>\n<pre><code class=\"language-php\">&lt;?php\n// Include script to make a database connection\ninclude(&quot;connect.php&quot;);\n// Check if input fileds are empty\nif(empty($_POST['name']) &amp;&amp; empty($_POST['email'])){\n    // If the fields are empty, display a message to the user\n    echo &quot;Please fill in the fields&quot;;\n// Process the form data if the input fields are not empty\n}else{\n    $name= $_POST['name'];\n    $email= $_POST['email'];\n    echo ('Your Name is:     '. $name. '&lt;br/&gt;');\n    echo ('Your Email is:'   . $email. '&lt;br/&gt;');\n    # Insert into the database\n    $query = &quot;INSERT INTO user(name,email) VALUES ('$name','$email')&quot;;\n    if (mysqli_query($conn, $query)) {\n        echo &quot;New record created successfully !&quot;;\n    } else {\n         echo &quot;Error inserting record: &quot; . $conn-&gt;error;\n    }\n}\n?&gt;\n</code></pre>\n<ul>\n<li>Here is the form:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;body&gt;\n  &lt;h1&gt;Form&lt;/h1&gt;\n  &lt;form method=&quot;post&quot; action=&quot;form-post.php&quot;&gt;\n    Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;br /&gt;&lt;br /&gt;\n    Email: &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;br /&gt;\n    &lt;br /&gt;\n    &lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;submit&quot; /&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"read-data-and-display-in-a-html-table\">Read data and display in a HTML table <a class=\"heading-anchor-permalink\" href=\"#read-data-and-display-in-a-html-table\">#</a></h4>\n<pre><code class=\"language-php\">&lt;?php\n# Include script to make a database connection\ninclude(&quot;connect.php&quot;)\n$ Read From the database and display in the table\n$query2 = &quot;SELECT * FROM user&quot;;\n$result = $conn-&gt;query($query2);\nif ($result-&gt;num_rows &gt; 0) {\n    # Output data for each row\n    echo &quot;&lt;table id='tsa' border='1' id='example' class='table table-striped responsive-utilities table-hover'&gt;\n              &lt;thead&gt;\n                &lt;tr&gt;\n                &lt;th&gt;ID&lt;/th&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n                &lt;th&gt;Action 1&lt;/th&gt;\n                &lt;th&gt;Action 2&lt;/th&gt;\n                &lt;/tr&gt;\n              &lt;/thead&gt;\n              &quot;;\n    while($row = $result-&gt;fetch_assoc()) {\n       echo &quot;&lt;tr id='green' &quot;,&quot;&gt;&quot;,\n            &quot;&lt;td&gt;&quot;, $row[&quot;id&quot;],&quot;&lt;/td&gt;&quot;,\n            &quot;&lt;td&gt;&quot;, $row[&quot;name&quot;],&quot;&lt;/td&gt;&quot;,\n            &quot;&lt;td&gt;&quot;, $row[&quot;email&quot;],&quot;&lt;/td&gt;&quot;,\n            &quot;&lt;td&gt;&quot;,\n                &quot;&lt;form action='update.php' method='post'&gt;\n                 &lt;input name='id' value='&quot;,$row[&quot;id&quot;],&quot;' hidden&gt;\n                 &lt;button type='submit' name='update' value='update'&gt;Edit&lt;/button&gt;\n                &lt;/form&gt;&quot;,\n            &quot;&lt;/td&gt;&quot;,\n            &quot;&lt;td&gt;&quot;,\n                &quot;&lt;form action='form-post.php' method='post'&gt;\n                 &lt;input name='id' value='&quot;,$row[&quot;id&quot;],&quot;' hidden&gt;\n                 &lt;button type='submit' name='delete' value='delete'&gt;Delete&lt;/button&gt;\n                &lt;/form&gt;&quot;,\n            &quot;&lt;/td&gt;&quot;,\n            &quot;&lt;/tr&gt;&quot;;\n    }\n    echo  &quot;&lt;/table&gt;&quot;;\n}else {\n echo &quot;No Records!&quot;;\n}\n?&gt;\n</code></pre>\n<h4 id=\"update-existing-data-in-the-database%3A\">Update existing data in the database: <a class=\"heading-anchor-permalink\" href=\"#update-existing-data-in-the-database%3A\">#</a></h4>\n<ul>\n<li>The update form is displayed when we click the edit button in the table cell.</li>\n<li>Take note of the code used to create the edit button on the table. The update button is a submit button for a form with <strong>hidden</strong> input fields.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;td&gt;\n  &lt;form action=&quot;update.php&quot; method=&quot;post&quot;&gt;\n    &lt;input name=&quot;id&quot; value='&quot;,$row[&quot;id&quot;],&quot;' hidden /&gt;\n    &lt;button type=&quot;submit&quot; name=&quot;update&quot; value=&quot;update&quot;&gt;Edit&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/td&gt;\n</code></pre>\n<ul>\n<li>In the update.php script, a form with data matching the submitted information is displayed for editing. Once the edit is complete, the updated data is resubmitted to the script for processing. In this case, we are using the same script to process update requests.</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n// Include script to make a database connection\ninclude(&quot;connect.php&quot;);\n// Empty string to be used later\n$name='';\n$email='';\n$id='';\n\n// Button click to update using POST method\nif(!empty($_POST['update']) &amp;&amp; !empty($_POST['id']) )  {\n  $id=$_POST['id'];\n  // Fetch record with ID and populate it in the form\n  $query2 = &quot;SELECT * FROM user WHERE id='&quot;.$_POST['id'].&quot;' &quot;;\n  $result = $conn-&gt;query($query2);\n  if ($result-&gt;num_rows &gt; 0) {\n    // Output data for each row\n    while($row = $result-&gt;fetch_assoc()) {\n      $name=$row[&quot;name&quot;];\n      $email=$row[&quot;email&quot;];\n    }\n    echo &quot;Current Details: &quot; .&quot;&lt;b&gt; - Name:&lt;/b&gt; &quot; . $name. &quot; &lt;b&gt;Email:&lt;/b&gt;&quot; . $email. &quot;&lt;br&gt;&quot;;\n  } else {\n    echo &quot;Error updating&quot;;\n  }\n}\n\n// Button click to update using GET method\nif(!empty($_GET['update']) &amp;&amp; !empty($_GET['id']) )  {\n  $id=$_GET['id'];\n  // Fetch record with id and populate it in the form\n  $query2 = &quot;SELECT * FROM user WHERE id='&quot;.$_GET['id'].&quot;' &quot;;\n  $result = $conn-&gt;query($query2);\n  if ($result-&gt;num_rows &gt; 0) {\n    // Output data for each row\n    while($row = $result-&gt;fetch_assoc()) {\n      $name=$row[&quot;name&quot;];\n      $email=$row[&quot;email&quot;];\n    }\n    echo &quot;Current Details: &quot; .&quot;&lt;b&gt; - Name:&lt;/b&gt; &quot; . $name. &quot; &lt;b&gt;Email:&lt;/b&gt;&quot; . $email. &quot;&lt;br&gt;&quot;;\n  } else {\n    echo &quot;Error updating&quot;;\n  }\n}\n// Check that the input fields are not empty and process the data\nif(!empty($_POST['name']) &amp;&amp; !empty($_POST['email']) &amp;&amp; !empty($_POST['id']) ){\n    // Insert into the database\n  $query = &quot;UPDATE user SET name='&quot;.$_POST['name'].&quot;', email='&quot;.$_POST['email'].&quot;' WHERE id='&quot;.$_POST['id'].&quot;' &quot;;\n  if (mysqli_query($conn, $query)) {\n      echo &quot;Record updated successfully!&lt;br/&gt;&quot;;\n      echo '&lt;a href=&quot;form-get.php&quot;&gt;Get Form&lt;/a&gt;&lt;br/&gt;\n            &lt;a href=&quot;form-post.php&quot;&gt;Post Form&lt;/a&gt;';\n      die(0);\n  } else {\n      // Display an error message if unable to update the record\n       echo &quot;Error updating record: &quot; . $conn-&gt;error;\n       die(0);\n  }\n}\n\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;FORM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Form&lt;/h1&gt;\n    &lt;p&gt;Edit the record&lt;/p&gt;\n    &lt;form method=&quot;POST&quot; action=&quot;update.php&quot;&gt;\n        ID: &lt;input type=&quot;text&quot; name=&quot;id&quot; value=&quot;&lt;?php echo($id); ?&gt;&quot; required&gt;&lt;br&gt;&lt;br/&gt;\n        Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;?php echo($name); ?&gt;&quot; required&gt;&lt;br&gt;&lt;br/&gt;\n        Email: &lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;&lt;?php echo($email); ?&gt;&quot; required&gt;&lt;br/&gt;\n        &lt;br/&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;update&quot;&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"delete-a-record-in-the-table%3A\">Delete a record in the table: <a class=\"heading-anchor-permalink\" href=\"#delete-a-record-in-the-table%3A\">#</a></h4>\n<ul>\n<li>To delete a record in the table, the user clicks the delete button in the HTML table. Take note of the code used to display a button inside a table cell.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;td&gt;\n    &lt;form action='form-post.php' method='post'&gt;\n        &lt;input name='id' value='&quot;,$row[&quot;id&quot;],&quot;' hidden&gt;\n        &lt;button type='submit' name='delete' value='delete'&gt;Delete&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/td&gt;\n</code></pre>\n<ul>\n<li>The submit button has a hidden id field. The data is sent to a form and processed by the PHP script below. If the id is not empty, then the record with the submitted id is deleted.</li>\n</ul>\n<pre><code class=\"language-php\">// Check that the input fields are not empty and process the data\nif(!empty($_POST['delete']) &amp;&amp; !empty($_POST['id'])){\n    $query3 = &quot;DELETE FROM user WHERE id='&quot;.$_POST['id'].&quot;' &quot;;\n    if (mysqli_query($conn, $query3)) {\n        echo &quot;Record deleted successfully !&quot;;\n    } else {\n        // Display an error message if unable to delete the record\n       echo &quot;Error deleting record: &quot; . $conn-&gt;error;\n    }\n}\n</code></pre>\n",
      "id": 32
    },
    {
      "path": "PHP/http_response_codes.md",
      "url": "PHP/http_response_codes.html",
      "content": "## HTTP/1.1 Status Codes:\n\n![](https://miro.medium.com/max/1707/1*mdS5imcKIcSMhjN6dwvxZQ.png)",
      "html": "<h2 id=\"http%2F1.1-status-codes%3A\">HTTP/1.1 Status Codes: <a class=\"heading-anchor-permalink\" href=\"#http%2F1.1-status-codes%3A\">#</a></h2>\n<p><img src=\"https://miro.medium.com/max/1707/1*mdS5imcKIcSMhjN6dwvxZQ.png\" alt=\"\"></p>\n",
      "id": 33
    },
    {
      "path": "PHP/json_guide.md",
      "url": "PHP/json_guide.html",
      "content": "https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true\n\n> The Complete JSON Tutorial – Quickly Learn JSON\n\n\n\n# The Complete JSON Tutorial – Quickly Learn JSON\nJavaScript Object Notation or more commonly known as it’s abbreviated name JSON is extensively used throughout all kinds of applications. Its purpose is to streamline communications, most commonly between a browser and a server. Although having said this, it’s perfectly normal for this to work the opposite way around too.\n\nYou will inevitably fall upon JSON one time or another during your developer journey and this article hopes to give you a content-know-how to work with it.\n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#contents)Contents\n\n*   Some Background\n*   A Basic Introduction\n*   JSON Data Types\n*   JSON Formatting\n*   Basic Example\n*   Nested JSON\n*   Advanced Example\n*   Managing JSON With JavaScript\n*   Working With The Console\n*   Summary\n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#some-background)Some Background\n\nJSON is a major part of the JavaScript programming language, it uses go far and beyond the imaginable eye. Discovered in March 2001 and Catering for over 40 languages, yes 40! JSON, with the right library, can be used in almost every programming language you’ve heard of.\n\nThis technology even has its own [website](https://www.json.org/), which lists all the libraries that can bootstrap your application with JSON. In addition, there are some technical diagrams to provide an insight into how this great communication helper works.\n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#a-basic-introduction)A Basic Introduction\n\nJSON is quite easy to use when you get your head around it, it’s nothing more than simple text structured in a certain way. If you’ve never seen it in the flesh before, then this is a good time to show a small example. Here is what it can look like –  \n\n    \n        {\n            \"SiteName\": \"CodeWall\",\n            \"ArticleName\": \"JSON Tutorials\",\n            \"Revision\": 1\n        }\n    \n\nAs you can see from the example, it’s just as stated, simple text, formatted with quotations, separated by colons and comma’s and completely wrapped in some braces. It can get more advanced with bigger data, but we will go through that in detail within this article too.\n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#json-data-types)JSON Data Types\n\nJavaScript Object Notation can handle nearly every data type you could possibly need it too. This, of course, makes it an extremely powerful tool, being able to handle arrays and objects in itself is super-cool. Let’s go through the data types with some small examples showing how they would look in a working application.\n\n**String**  \n\n    \n        {\n            \"StringDataType\": \"String\"\n        }\n    \n\n**Object**  \n\n    \n        {\n            \"ObjectDataType\": {\n                \"myObj\": \"ObjectData\"\n            }\n        }\n    \n\n**Array**  \n\n        {\n            \"ArrayDataType\": [1, 2, 3, 4]\n        }\n    \n\n**Number**  \n\n**Boolean**  \n\n        {\n            \"BooleanTrueDataType\": true,\n            \"BooleanFalseDataType\": false\n        }\n    \n\n**Date**  \n\n        {\n            \"DateStringDataType\": \"2011-07-14 19:43:37 +0100\",\n            \"JavaScriptDateDataType\": new Date(1310669017000)\n        }\n    \n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#json-formatting)JSON Formatting\n\nThere are some strict rules when it comes to formatting JavaScript Object Notation and if not adhered too, expect your code to fall over.\n\n**Rule #1. Key/Identifier & Value**\n\nJSON consists of 2 main elements, a key, and a value. No matter the data type, it needs to be in this format. The key you specify will ultimately be used to access the value later on within your application or on the alternative consumer end.\n\n[![key value json](https://res.cloudinary.com/practicaldev/image/fetch/s--0nzpwfth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-json.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--0nzpwfth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-json.jpg)\n\n**Rule #2. Key/Identifier Double Quoted**\n\nYes, you may get away with it in JavaScript, but with JSON, you can’t. Every identifier or key you specify in a JSON object must be double-quoted, essentially making it a `String` type. It may be hard to rid habits of not having to do this, but it soon falls into place.\n\n[![double quoted format](https://res.cloudinary.com/practicaldev/image/fetch/s--XEV8BdGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/double-quote-json.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--XEV8BdGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/double-quote-json.jpg)\n\n**Rule #3. Wrap Objects In Curly Braces**\n\nWhether you have one object or fifty in your JSON code, each object needs to be wrapped inside curly braces, specifying the start and the end of each object inside. This is extremely important, especially to interpreters, if these are missed, you will soon be alerted about it!\n\n[![object curly braces](https://res.cloudinary.com/practicaldev/image/fetch/s--WfUuomL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-curly-braces.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--WfUuomL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-curly-braces.jpg)\n\n**Rule #4. Separate Key/Value by Colons**\n\nData within JSON must be separated out, to do this, a simple colon is sufficient, it goes straight after the key or identifier statement and just before the value. This is another imperative concept which you will see the importance when logging data to the console, which is explained later in this tutorial.\n\n[![key value separator](https://res.cloudinary.com/practicaldev/image/fetch/s--2pHtGbDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-separator.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--2pHtGbDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-separator.jpg)\n\n**Rule #5. Arrays Are To Be Treated Like Arrays**\n\nWhen using arrays within JSON, treat them exactly the same as you would do in normal JavaScript syntax. Whether that be a string or numeric array, the same rules apply.\n\n[![array data type example](https://res.cloudinary.com/practicaldev/image/fetch/s--5nb6RTvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/json-array-data-type-example.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--5nb6RTvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/json-array-data-type-example.jpg)\n\n**Rule #6. Encapsulate Objects With Square Brackets (Array)**\n\nMultiple objects must sit in an array, giving you what is called an Array Of Objects, this will be used when you have advanced data that you need to communicate to the front-end or the back-end. Notice the bracket-syntax highlighted in blue within the image below.\n\n[![object array example](https://res.cloudinary.com/practicaldev/image/fetch/s--V9AU1Zgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-array-example.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--V9AU1Zgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-array-example.jpg)\n\n**Rule #7. Objects & Data Separated By Commas**\n\nNo doubt you will end up working with multiple object JSON in your lifetime, they must be separated correctly, with a simple comma each time. Similarly, data must be separated out with commas too, let’s see this in action with a bit more of an advanced JSON snippet. The important syntax is highlighted in blue for visual understanding.\n\n[![comma separation example](https://res.cloudinary.com/practicaldev/image/fetch/s--i0r5m71u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/comma-separation-example.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--i0r5m71u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/comma-separation-example.jpg)\n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#basic-example)Basic Example\n\nNow that we’ve gone through the main rules of JSON, it’s time for an example with a range of data types. Feel free to use the following code for your own learning, it will be a great reference or starting point. In this example, these four data-types are present –\n\n*   String\n*   Integer\n*   Decimal\n*   Boolean\n\n        {\n            \"Article\": \"Tutorial\",\n            \"Author\": \"Dan Englishby\",\n            \"YearPublished\": 2018,\n            \"IsPublished\": true,\n            \"AverageWordsPerSentce\": 20.3\n        }\n    \n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#nesting)Nesting\n\nOk, so JSON can become pretty complicated in terms of data-load and that’s why nesting is a key factor to this technology. When you have tons of data to communicate, nesting is a beautiful art. Within the following example, nesting down to two levels is shown because, in theory, nesting is endless. Therefore, knowing how to do it will inevitably come in handy.\n\n**How do we nest objects?**\n\nNesting objects are achieved by creating an Array-of-objects within a JSON property. See the following example  \n\n        {\n            \"OuterObject\": [{\n                \"NestedObjects\": [{\n                        \"SomeName\": \"SomeValue\"\n                    },\n                    {\n                        \"SomeName\": \"SomeValue\"\n                    },\n                    {\n                        \"SomeName\": \"SomeValue\"\n                    }\n                ]\n            }]\n        }\n    \n\n**How do we nest arrays?**\n\nSimilarly, we can nest arrays, and it’s pretty simple too. The only problem with doing it, is you lose the ability to specify the array’s data with identifier or keys. This is because the nested array will be identified with a numeric index rather than a key-value pair.  \n\n        {\n            \"OuterObject\": [{\n                \"NestedArray\": [\n                    [\n                        \"SomeValue\"\n                    ],\n                    [\n                        \"SomeValue\"\n                    ],\n                    [\n                        \"SomeValue\"\n                    ]\n                ]\n            }]\n        }\n    \n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#advanced-examples)Advanced Examples\n\nSee the following examples that use nested concepts to section out data. The property **Articles** holds a nested set of article names, in addition, it holds the next nested set of data, **Shared On**, which again nests social network names.\n\n**Advanced Example #1**  \n\n        {\n            \"Category\": \"Tutorials\",\n            \"Articles\": [{\n                    \"Name\": \"ChartJS Lesson 1\",\n                    \"Shared On\": [{\n                            \"SocialNetwork\": \"Facebook\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Twitter\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Google+\"\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"ChartJS Lesson 2\",\n                    \"Shared On\": [{\n                            \"SocialNetwork\": \"Facebook\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Twitter\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Google+\"\n                        }\n                    ]\n    \n                },\n                {\n                    \"Name\": \"ChartJS Lesson 3\",\n                    \"Shared On\": [{\n                            \"SocialNetwork\": \"Facebook\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Twitter\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Google+\"\n                        }\n                    ]\n                },\n                {\n                    \"Name\": \"ChartJS Lesson 4\",\n                    \"Shared On\": [{\n                            \"SocialNetwork\": \"Facebook\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Twitter\"\n                        },\n                        {\n                            \"SocialNetwork\": \"Google+\"\n                        }\n                    ]\n                }\n            ]\n        }\n    \n\nThe above example shows how to nest objects, but you can also nest arrays too, having an array-of-arrays is perfectly normal. It all depends on what your specific needs are. The following example shows the **Shared On** property holding an array of social network names.\n\n**Advanced Example 2**  \n\n        {\n            \"Category\": \"Tutorials\",\n            \"Articles\": [{\n                    \"Name\": \"ChartJS Lesson 1\",\n                    \"Shared On\": [\n                        [\"Facebook\"],\n                        [\"Twitter\"],\n                        [\"Google+\"]\n                    ]\n                }\n            ]\n        }\n    \n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#managing-json-with-javascript)Managing JSON With JavaScript\n\nJavaScript works super-fluently with JSON, which of course it does, JS did create it! Managing data within JS can be done in numerous ways, from storing variables to finally accessing the data. In this section, we will learn how to do each one.\n\n**Storing JSON In A JavaScript Variable**\n\nIf you’ve already worked with JavaScript before, I know this will be teaching you to suck eggs, but for the readers who haven’t see the example below –\n\n**Storing as a variable**  \n\n        var json = {\n            \"Article\": \"Tutorial\",\n            \"Author\": \"Dan Englishby\",\n            \"YearPublished\": 2018,\n            \"IsPublished\": true,\n            \"AverageWordsPerSentce\": 20.3\n        };\n    \n\nYep, it’s as simple as that, you’ve just stored your first JSON data-set in a JS variable!\n\n**Accessing the data**\n\nAccessing JSON values can be done in two ways\n\n*   Dot Notation Style\n*   Bracket Notation Style\n\n**Dot Notation Example**\n\nWith the variable we created in the last example, we can now access the values with the following code.  \n\n        var articleName = json.Article; // variable is now \"Tutorial\"\n    \n\n**Bracket Notation Example**  \n\n        var articleName = json[\"Article\"]; // variable is now \"Tutorial\"\n    \n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#working-with-the-console)Working With The Console\n\nVisualizing the data, you create in JSON is quite important to understand it even further, once you see it properly logged into a console, it makes such a difference. All we need to successfully log data to the console is first, a browser with the console facility and secondly some JavaScript.\n\nBrowsers such as Google Chrome, Internet Explorer, Firefox all have this functionality, so If you haven’t got one of them already, go download one and then come back to this part of the tutorial.\n\n**How do I see the console?**\n\nThe good news here is that to expose the console in most browsers is done by the exact same method. Use the following steps to find your console.\n\n1.  Right click on the web page.\n2.  Find the Inspect Element option.\n3.  Click it.\n4.  After the new window opens, find the sub-headed Console window and click it.\n\nSee chromes console in the image below –\n\n[![chrome console example](https://res.cloudinary.com/practicaldev/image/fetch/s--lnoM4gTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/chrome-console-example.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--lnoM4gTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/chrome-console-example.jpg)\n\n**Logging to the console**\n\nNow we’ve discovered the console, let’s use it, add the following code to your JavaScript and reload the page.  \n\n        var json = {\n            \"Article\": \"Tutorial\",\n            \"Author\": \"Dan Englishby\",\n            \"YearPublished\": 2018,\n            \"IsPublished\": true,\n            \"AverageWordsPerSentce\": 20.3\n        };\n        console.log(json);\n    \n\n[![console log example](https://res.cloudinary.com/practicaldev/image/fetch/s--iJ03ckCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/console-log-example.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--iJ03ckCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/console-log-example.jpg)\n\nAs you can see, the JSON created within the JavaScript has been nicely logged to the Google Chrome console. It’s sectioned and colored beautifully so you can quickly-visually understand it.\n\n### [](https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#summary)Summary\n\nWithin this tutorial, all aspects of working with JSON were covered, hopefully giving you the knowledge to go and play with it and learn even more. With a little practice, you will become fluent with it too and then start daring to work with some really complicated nested JSON. As I mentioned before, knowing these concepts will be invaluable to your tool-set because there are so many libraries and API’s that use it.\n\nI’ve logged all the examples within this tutorial to the console, so you can see them all in their full glory. Right-click, inspect element and click the console window to see them.\n\nLastly, a great online tool that is extremely helpful in verifying that JSON is syntactically correct is the [JSONLint interface](https://jsonlint.com/), it’s free and very easy to use.\n\nHope it helps, thanks for reading!\n\nThis post is cross-posted from my blog - [CodeWall JSON Tutorial](https://www.codewall.co.uk/the-complete-json-tutorial-quickly-learn-json/)\n",
      "html": "<p><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true\">https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true</a></p>\n<blockquote>\n<p>The Complete JSON Tutorial – Quickly Learn JSON</p>\n</blockquote>\n<h1 id=\"the-complete-json-tutorial-%E2%80%93-quickly-learn-json\">The Complete JSON Tutorial – Quickly Learn JSON <a class=\"heading-anchor-permalink\" href=\"#the-complete-json-tutorial-%E2%80%93-quickly-learn-json\">#</a></h1>\n<p>JavaScript Object Notation or more commonly known as it’s abbreviated name JSON is extensively used throughout all kinds of applications. Its purpose is to streamline communications, most commonly between a browser and a server. Although having said this, it’s perfectly normal for this to work the opposite way around too.</p>\n<p>You will inevitably fall upon JSON one time or another during your developer journey and this article hopes to give you a content-know-how to work with it.</p>\n<h3 id=\"contents\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#contents\"></a>Contents <a class=\"heading-anchor-permalink\" href=\"#contents\">#</a></h3>\n<ul>\n<li>Some Background</li>\n<li>A Basic Introduction</li>\n<li>JSON Data Types</li>\n<li>JSON Formatting</li>\n<li>Basic Example</li>\n<li>Nested JSON</li>\n<li>Advanced Example</li>\n<li>Managing JSON With JavaScript</li>\n<li>Working With The Console</li>\n<li>Summary</li>\n</ul>\n<h3 id=\"some-background\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#some-background\"></a>Some Background <a class=\"heading-anchor-permalink\" href=\"#some-background\">#</a></h3>\n<p>JSON is a major part of the JavaScript programming language, it uses go far and beyond the imaginable eye. Discovered in March 2001 and Catering for over 40 languages, yes 40! JSON, with the right library, can be used in almost every programming language you’ve heard of.</p>\n<p>This technology even has its own <a href=\"https://www.json.org/\">website</a>, which lists all the libraries that can bootstrap your application with JSON. In addition, there are some technical diagrams to provide an insight into how this great communication helper works.</p>\n<h3 id=\"a-basic-introduction\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#a-basic-introduction\"></a>A Basic Introduction <a class=\"heading-anchor-permalink\" href=\"#a-basic-introduction\">#</a></h3>\n<p>JSON is quite easy to use when you get your head around it, it’s nothing more than simple text structured in a certain way. If you’ve never seen it in the flesh before, then this is a good time to show a small example. Here is what it can look like –</p>\n<pre><code>    {\n        &quot;SiteName&quot;: &quot;CodeWall&quot;,\n        &quot;ArticleName&quot;: &quot;JSON Tutorials&quot;,\n        &quot;Revision&quot;: 1\n    }\n</code></pre>\n<p>As you can see from the example, it’s just as stated, simple text, formatted with quotations, separated by colons and comma’s and completely wrapped in some braces. It can get more advanced with bigger data, but we will go through that in detail within this article too.</p>\n<h3 id=\"json-data-types\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#json-data-types\"></a>JSON Data Types <a class=\"heading-anchor-permalink\" href=\"#json-data-types\">#</a></h3>\n<p>JavaScript Object Notation can handle nearly every data type you could possibly need it too. This, of course, makes it an extremely powerful tool, being able to handle arrays and objects in itself is super-cool. Let’s go through the data types with some small examples showing how they would look in a working application.</p>\n<p><strong>String</strong></p>\n<pre><code>    {\n        &quot;StringDataType&quot;: &quot;String&quot;\n    }\n</code></pre>\n<p><strong>Object</strong></p>\n<pre><code>    {\n        &quot;ObjectDataType&quot;: {\n            &quot;myObj&quot;: &quot;ObjectData&quot;\n        }\n    }\n</code></pre>\n<p><strong>Array</strong></p>\n<pre><code>    {\n        &quot;ArrayDataType&quot;: [1, 2, 3, 4]\n    }\n</code></pre>\n<p><strong>Number</strong></p>\n<p><strong>Boolean</strong></p>\n<pre><code>    {\n        &quot;BooleanTrueDataType&quot;: true,\n        &quot;BooleanFalseDataType&quot;: false\n    }\n</code></pre>\n<p><strong>Date</strong></p>\n<pre><code>    {\n        &quot;DateStringDataType&quot;: &quot;2011-07-14 19:43:37 +0100&quot;,\n        &quot;JavaScriptDateDataType&quot;: new Date(1310669017000)\n    }\n</code></pre>\n<h3 id=\"json-formatting\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#json-formatting\"></a>JSON Formatting <a class=\"heading-anchor-permalink\" href=\"#json-formatting\">#</a></h3>\n<p>There are some strict rules when it comes to formatting JavaScript Object Notation and if not adhered too, expect your code to fall over.</p>\n<p><strong>Rule #1. Key/Identifier &amp; Value</strong></p>\n<p>JSON consists of 2 main elements, a key, and a value. No matter the data type, it needs to be in this format. The key you specify will ultimately be used to access the value later on within your application or on the alternative consumer end.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0nzpwfth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-json.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0nzpwfth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-json.jpg\" alt=\"key value json\"></a></p>\n<p><strong>Rule #2. Key/Identifier Double Quoted</strong></p>\n<p>Yes, you may get away with it in JavaScript, but with JSON, you can’t. Every identifier or key you specify in a JSON object must be double-quoted, essentially making it a <code>String</code> type. It may be hard to rid habits of not having to do this, but it soon falls into place.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XEV8BdGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/double-quote-json.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XEV8BdGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/double-quote-json.jpg\" alt=\"double quoted format\"></a></p>\n<p><strong>Rule #3. Wrap Objects In Curly Braces</strong></p>\n<p>Whether you have one object or fifty in your JSON code, each object needs to be wrapped inside curly braces, specifying the start and the end of each object inside. This is extremely important, especially to interpreters, if these are missed, you will soon be alerted about it!</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WfUuomL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-curly-braces.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WfUuomL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-curly-braces.jpg\" alt=\"object curly braces\"></a></p>\n<p><strong>Rule #4. Separate Key/Value by Colons</strong></p>\n<p>Data within JSON must be separated out, to do this, a simple colon is sufficient, it goes straight after the key or identifier statement and just before the value. This is another imperative concept which you will see the importance when logging data to the console, which is explained later in this tutorial.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2pHtGbDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-separator.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2pHtGbDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/key-value-separator.jpg\" alt=\"key value separator\"></a></p>\n<p><strong>Rule #5. Arrays Are To Be Treated Like Arrays</strong></p>\n<p>When using arrays within JSON, treat them exactly the same as you would do in normal JavaScript syntax. Whether that be a string or numeric array, the same rules apply.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5nb6RTvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/json-array-data-type-example.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5nb6RTvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/json-array-data-type-example.jpg\" alt=\"array data type example\"></a></p>\n<p><strong>Rule #6. Encapsulate Objects With Square Brackets (Array)</strong></p>\n<p>Multiple objects must sit in an array, giving you what is called an Array Of Objects, this will be used when you have advanced data that you need to communicate to the front-end or the back-end. Notice the bracket-syntax highlighted in blue within the image below.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--V9AU1Zgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-array-example.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--V9AU1Zgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/object-array-example.jpg\" alt=\"object array example\"></a></p>\n<p><strong>Rule #7. Objects &amp; Data Separated By Commas</strong></p>\n<p>No doubt you will end up working with multiple object JSON in your lifetime, they must be separated correctly, with a simple comma each time. Similarly, data must be separated out with commas too, let’s see this in action with a bit more of an advanced JSON snippet. The important syntax is highlighted in blue for visual understanding.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--i0r5m71u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/comma-separation-example.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--i0r5m71u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/comma-separation-example.jpg\" alt=\"comma separation example\"></a></p>\n<h3 id=\"basic-example\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#basic-example\"></a>Basic Example <a class=\"heading-anchor-permalink\" href=\"#basic-example\">#</a></h3>\n<p>Now that we’ve gone through the main rules of JSON, it’s time for an example with a range of data types. Feel free to use the following code for your own learning, it will be a great reference or starting point. In this example, these four data-types are present –</p>\n<ul>\n<li>\n<p>String</p>\n</li>\n<li>\n<p>Integer</p>\n</li>\n<li>\n<p>Decimal</p>\n</li>\n<li>\n<p>Boolean</p>\n<pre><code>{\n    &quot;Article&quot;: &quot;Tutorial&quot;,\n    &quot;Author&quot;: &quot;Dan Englishby&quot;,\n    &quot;YearPublished&quot;: 2018,\n    &quot;IsPublished&quot;: true,\n    &quot;AverageWordsPerSentce&quot;: 20.3\n}\n</code></pre>\n</li>\n</ul>\n<h3 id=\"nesting\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#nesting\"></a>Nesting <a class=\"heading-anchor-permalink\" href=\"#nesting\">#</a></h3>\n<p>Ok, so JSON can become pretty complicated in terms of data-load and that’s why nesting is a key factor to this technology. When you have tons of data to communicate, nesting is a beautiful art. Within the following example, nesting down to two levels is shown because, in theory, nesting is endless. Therefore, knowing how to do it will inevitably come in handy.</p>\n<p><strong>How do we nest objects?</strong></p>\n<p>Nesting objects are achieved by creating an Array-of-objects within a JSON property. See the following example</p>\n<pre><code>    {\n        &quot;OuterObject&quot;: [{\n            &quot;NestedObjects&quot;: [{\n                    &quot;SomeName&quot;: &quot;SomeValue&quot;\n                },\n                {\n                    &quot;SomeName&quot;: &quot;SomeValue&quot;\n                },\n                {\n                    &quot;SomeName&quot;: &quot;SomeValue&quot;\n                }\n            ]\n        }]\n    }\n</code></pre>\n<p><strong>How do we nest arrays?</strong></p>\n<p>Similarly, we can nest arrays, and it’s pretty simple too. The only problem with doing it, is you lose the ability to specify the array’s data with identifier or keys. This is because the nested array will be identified with a numeric index rather than a key-value pair.</p>\n<pre><code>    {\n        &quot;OuterObject&quot;: [{\n            &quot;NestedArray&quot;: [\n                [\n                    &quot;SomeValue&quot;\n                ],\n                [\n                    &quot;SomeValue&quot;\n                ],\n                [\n                    &quot;SomeValue&quot;\n                ]\n            ]\n        }]\n    }\n</code></pre>\n<h3 id=\"advanced-examples\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#advanced-examples\"></a>Advanced Examples <a class=\"heading-anchor-permalink\" href=\"#advanced-examples\">#</a></h3>\n<p>See the following examples that use nested concepts to section out data. The property <strong>Articles</strong> holds a nested set of article names, in addition, it holds the next nested set of data, <strong>Shared On</strong>, which again nests social network names.</p>\n<p><strong>Advanced Example #1</strong></p>\n<pre><code>    {\n        &quot;Category&quot;: &quot;Tutorials&quot;,\n        &quot;Articles&quot;: [{\n                &quot;Name&quot;: &quot;ChartJS Lesson 1&quot;,\n                &quot;Shared On&quot;: [{\n                        &quot;SocialNetwork&quot;: &quot;Facebook&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Twitter&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Google+&quot;\n                    }\n                ]\n            },\n            {\n                &quot;Name&quot;: &quot;ChartJS Lesson 2&quot;,\n                &quot;Shared On&quot;: [{\n                        &quot;SocialNetwork&quot;: &quot;Facebook&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Twitter&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Google+&quot;\n                    }\n                ]\n\n            },\n            {\n                &quot;Name&quot;: &quot;ChartJS Lesson 3&quot;,\n                &quot;Shared On&quot;: [{\n                        &quot;SocialNetwork&quot;: &quot;Facebook&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Twitter&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Google+&quot;\n                    }\n                ]\n            },\n            {\n                &quot;Name&quot;: &quot;ChartJS Lesson 4&quot;,\n                &quot;Shared On&quot;: [{\n                        &quot;SocialNetwork&quot;: &quot;Facebook&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Twitter&quot;\n                    },\n                    {\n                        &quot;SocialNetwork&quot;: &quot;Google+&quot;\n                    }\n                ]\n            }\n        ]\n    }\n</code></pre>\n<p>The above example shows how to nest objects, but you can also nest arrays too, having an array-of-arrays is perfectly normal. It all depends on what your specific needs are. The following example shows the <strong>Shared On</strong> property holding an array of social network names.</p>\n<p><strong>Advanced Example 2</strong></p>\n<pre><code>    {\n        &quot;Category&quot;: &quot;Tutorials&quot;,\n        &quot;Articles&quot;: [{\n                &quot;Name&quot;: &quot;ChartJS Lesson 1&quot;,\n                &quot;Shared On&quot;: [\n                    [&quot;Facebook&quot;],\n                    [&quot;Twitter&quot;],\n                    [&quot;Google+&quot;]\n                ]\n            }\n        ]\n    }\n</code></pre>\n<h3 id=\"managing-json-with-javascript\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#managing-json-with-javascript\"></a>Managing JSON With JavaScript <a class=\"heading-anchor-permalink\" href=\"#managing-json-with-javascript\">#</a></h3>\n<p>JavaScript works super-fluently with JSON, which of course it does, JS did create it! Managing data within JS can be done in numerous ways, from storing variables to finally accessing the data. In this section, we will learn how to do each one.</p>\n<p><strong>Storing JSON In A JavaScript Variable</strong></p>\n<p>If you’ve already worked with JavaScript before, I know this will be teaching you to suck eggs, but for the readers who haven’t see the example below –</p>\n<p><strong>Storing as a variable</strong></p>\n<pre><code>    var json = {\n        &quot;Article&quot;: &quot;Tutorial&quot;,\n        &quot;Author&quot;: &quot;Dan Englishby&quot;,\n        &quot;YearPublished&quot;: 2018,\n        &quot;IsPublished&quot;: true,\n        &quot;AverageWordsPerSentce&quot;: 20.3\n    };\n</code></pre>\n<p>Yep, it’s as simple as that, you’ve just stored your first JSON data-set in a JS variable!</p>\n<p><strong>Accessing the data</strong></p>\n<p>Accessing JSON values can be done in two ways</p>\n<ul>\n<li>Dot Notation Style</li>\n<li>Bracket Notation Style</li>\n</ul>\n<p><strong>Dot Notation Example</strong></p>\n<p>With the variable we created in the last example, we can now access the values with the following code.</p>\n<pre><code>    var articleName = json.Article; // variable is now &quot;Tutorial&quot;\n</code></pre>\n<p><strong>Bracket Notation Example</strong></p>\n<pre><code>    var articleName = json[&quot;Article&quot;]; // variable is now &quot;Tutorial&quot;\n</code></pre>\n<h3 id=\"working-with-the-console\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#working-with-the-console\"></a>Working With The Console <a class=\"heading-anchor-permalink\" href=\"#working-with-the-console\">#</a></h3>\n<p>Visualizing the data, you create in JSON is quite important to understand it even further, once you see it properly logged into a console, it makes such a difference. All we need to successfully log data to the console is first, a browser with the console facility and secondly some JavaScript.</p>\n<p>Browsers such as Google Chrome, Internet Explorer, Firefox all have this functionality, so If you haven’t got one of them already, go download one and then come back to this part of the tutorial.</p>\n<p><strong>How do I see the console?</strong></p>\n<p>The good news here is that to expose the console in most browsers is done by the exact same method. Use the following steps to find your console.</p>\n<ol>\n<li>Right click on the web page.</li>\n<li>Find the Inspect Element option.</li>\n<li>Click it.</li>\n<li>After the new window opens, find the sub-headed Console window and click it.</li>\n</ol>\n<p>See chromes console in the image below –</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lnoM4gTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/chrome-console-example.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lnoM4gTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/chrome-console-example.jpg\" alt=\"chrome console example\"></a></p>\n<p><strong>Logging to the console</strong></p>\n<p>Now we’ve discovered the console, let’s use it, add the following code to your JavaScript and reload the page.</p>\n<pre><code>    var json = {\n        &quot;Article&quot;: &quot;Tutorial&quot;,\n        &quot;Author&quot;: &quot;Dan Englishby&quot;,\n        &quot;YearPublished&quot;: 2018,\n        &quot;IsPublished&quot;: true,\n        &quot;AverageWordsPerSentce&quot;: 20.3\n    };\n    console.log(json);\n</code></pre>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iJ03ckCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/console-log-example.jpg\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iJ03ckCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codewall.co.uk/wp-content/uploads/2018/08/console-log-example.jpg\" alt=\"console log example\"></a></p>\n<p>As you can see, the JSON created within the JavaScript has been nicely logged to the Google Chrome console. It’s sectioned and colored beautifully so you can quickly-visually understand it.</p>\n<h3 id=\"summary\"><a href=\"https://dev.to/danenglishby/the-complete-json-tutorial-quickly-learn-json-14b9?signin=true#summary\"></a>Summary <a class=\"heading-anchor-permalink\" href=\"#summary\">#</a></h3>\n<p>Within this tutorial, all aspects of working with JSON were covered, hopefully giving you the knowledge to go and play with it and learn even more. With a little practice, you will become fluent with it too and then start daring to work with some really complicated nested JSON. As I mentioned before, knowing these concepts will be invaluable to your tool-set because there are so many libraries and API’s that use it.</p>\n<p>I’ve logged all the examples within this tutorial to the console, so you can see them all in their full glory. Right-click, inspect element and click the console window to see them.</p>\n<p>Lastly, a great online tool that is extremely helpful in verifying that JSON is syntactically correct is the <a href=\"https://jsonlint.com/\">JSONLint interface</a>, it’s free and very easy to use.</p>\n<p>Hope it helps, thanks for reading!</p>\n<p>This post is cross-posted from my blog - <a href=\"https://www.codewall.co.uk/the-complete-json-tutorial-quickly-learn-json/\">CodeWall JSON Tutorial</a></p>\n",
      "id": 34
    },
    {
      "path": "PHP/local-servers.md",
      "url": "PHP/local-servers.html",
      "content": "# Help resources related to web design\n\n## Modern RWD\n## php dev server\n\nexample:\n\n`$ php -S localhost:8888`\n\n\n---\n\n## good htt server used with node/php\n```bash\n$ npx http-server\n```\n\n`http-server` options:\n\n`-p`: \t\t\tport\n`-a`: \t\t\taddress\n`-o`: \t\t\topen browser at specific page\n`--username`    Username for basic authentication [none]\n                Can also be specified with the env variable `NODE_HTTP_SERVER_USERNAME`\n`--password`    Password for basic authentication [none]\n                Can also be specified with the env variable `NODE_HTTP_SERVER_PASSWORD`\nexample:\n\n`$ npx http-server -a localhost -p 8880 ./index.html`\n\n---\n",
      "html": "<h1 id=\"help-resources-related-to-web-design\">Help resources related to web design <a class=\"heading-anchor-permalink\" href=\"#help-resources-related-to-web-design\">#</a></h1>\n<h2 id=\"modern-rwd\">Modern RWD <a class=\"heading-anchor-permalink\" href=\"#modern-rwd\">#</a></h2>\n<h2 id=\"php-dev-server\">php dev server <a class=\"heading-anchor-permalink\" href=\"#php-dev-server\">#</a></h2>\n<p>example:</p>\n<p><code>$ php -S localhost:8888</code></p>\n<hr>\n<h2 id=\"good-htt-server-used-with-node%2Fphp\">good htt server used with node/php <a class=\"heading-anchor-permalink\" href=\"#good-htt-server-used-with-node%2Fphp\">#</a></h2>\n<pre><code class=\"language-bash\">$ npx http-server\n</code></pre>\n<p><code>http-server</code> options:</p>\n<p><code>-p</code>: \t\t\tport\n<code>-a</code>: \t\t\taddress\n<code>-o</code>: \t\t\topen browser at specific page\n<code>--username</code>    Username for basic authentication [none]\nCan also be specified with the env variable <code>NODE_HTTP_SERVER_USERNAME</code>\n<code>--password</code>    Password for basic authentication [none]\nCan also be specified with the env variable <code>NODE_HTTP_SERVER_PASSWORD</code>\nexample:</p>\n<p><code>$ npx http-server -a localhost -p 8880 ./index.html</code></p>\n<hr>\n",
      "id": 35
    },
    {
      "path": "PHP/logical_gradation_of_developers.md",
      "url": "PHP/logical_gradation_of_developers.html",
      "content": "\n# Logical gradation of developers’ level of expertise: junior, middle, senior and lead.\n\n\nThe terms “developer” and “engineer” and “ programmer” are often used interchangeably, but they might differ for many cutting-edge software development companies. So, it’s obvious that it might be hard to determine which kind of a job position your company needs. This post will put light into these issues, covering at the same time some tips on how to properly choose the specialist with the required technical expertise.\n\nSo, let’s get started with who are and how Junior, Mid-level, and Senior developers differ from each other.\n\n**A Basic Look At Junior, Middle, Senior And Lead Developers & Expectations From Each of Them**\n\n**The level of software developers’ expertise is subdivided into the four mentioned software engineering degrees in order to define a potential employee’s professional capabilities - what field of responsibility they can take on, how skilled they are, and how able they can be as a whole when it comes to stress load and emergency working situations. A clear definition of a particular developer role in a job description for an interested specialist is crucial. A future recruit must know for sure what they are about to handle occupying a certain software engineering position.**\n\n1.  [Junior Developer](https://artelogic.net/#1)\n2.  [Middle Developer](https://artelogic.net/#2)\n3.  [Senior Developer](https://artelogic.net/#3)\n4.  [Lead Developer](https://artelogic.net/#4)\n5.  [Developer vs Engineer vs Programmer](https://artelogic.net/#5)\n6.  [How to hire the developers with the right level of expertise for your project?](https://artelogic.net/#6)\n\n## Junior Developer\n\n**1) Key requirements to the role.**\n\nA junior developer posses:\n\n-   0 - 1.5 years of experience\n-   Intrinsic passion for learning\n-   110% work ethic\n-   Excellent basic knowledge about Information Technology from both a software and hardware perspective\n-   Computer programing basics.\n-   The ability to learn how to use the tools.\n-   Knowledge of at least one programming language with the ability to write basic program code.\n\n**2) What level of tasks can be accomplished?**\n\nA junior developer can:\n\n-   Fix small, less important bugs\n-   Work on internal or \"admin-side\" tools/features\n-   Work on defined features - i.e., those with previously delineated by senior software developers general concept and markup\n-   Focus backend in minor aspects\n-   Assist initial project planning\n-   Get comfortable with the codebase without doing anything too crucial.\n\nA competent junior software engineer is usually a backend-focused assistant in defining common obstacles and clarifying the workflow progress, who is also at the stage of reasonably adapting to existing working conditions.\n\n**3) Thing to have in mind when hiring a junior developer:**\n\n-   Is likely to product code with bugs, so he or she requires more iterations on code reviews\n-   Is not aware of or has no experience in the best practices and latest technology concepts\n-   Will require twice as much time as a Mid-level specialist\n-   Should be supervised\n-   Is not in a position to liaise with customers or gather requirements.\n\n**The bottom line to hire a junior developer:** hiring junior developers is an investment in their long-term potential rather than an immediate payoff.\n\n## Middle Developer\n\n**1) Key requirements to the role.**\n\nA middle developer:\n\n-   Has 2 - 4 years of experience\n-   Has intrinsic passion for learning\n-   Is 110% work ethic\n-   Has experience in several projects\n-   Can work alone and in a team\n-   Is competent in at least a couple areas of the SE “lifecycle.”\n-   Can set up the dev environment on their own\n-   Can mentor junior developers of a team\n-   Demonstrates initiative and ways of solving different tasks\n\n**2) What level of tasks can be accomplished?**\n\nA middle developer can:\n\n-   Code in such a way that other people can easily manage it\n-   Change code to make it more efficient\n-   Break major tasks down into smaller sub-tasks\n-   Compose testing plans and schedules\n-   Find major bags in code\n-   Review code in close detail\n-   Work on bigger chunks of code at once\n-   Set objectives for junior employees\n-   Perform several tasks for several projects\n\nA middle degree in software engineering means that a specialist is able to roam about their area of expertise in engineering programs more freely. They take direct responsibility for operational moments and occasionally instruct juniors.\n\n**3) Thing to have in mind when hiring.**\n\nA Middle developer:\n\n-   Still may need a support of the mentor as he or she may not have an experience in solving tasks of all level of complexity independently. So you have to get ready to help them if any questions occur\n-   Is likely to have a fixed mindset\n\n**The bottom line to hire a middle developer:** Hiring middle developers seems like a good option if you need to get the job done quickly, but your budget does not allow you to hire another Senior developer.\n\n## Senior Developer\n\n**1) Key requirements to the role:**\n\nA senior developer possess:\n\n-   5-8 years of experience\n-   Intrinsic passion for learning and self-development\n-   110% work ethic\n-   Experience in solving problems and tasks of different complexity\n-   Can work like a scientist to experiment/test, validate assumptions and connect the dots to reach a conclusion\n-   The ability to develop and mentor the middle developers of the team\n-   The understanding of the full scope of the project required that his team is responsible for and can delegate tasks in an effective manner\n-   Has the profound view of the project development and suggests the best ways to develop having in mind the final market goal\n\n**2) What level of tasks can be accomplished?**\n\nA senior developer :\n\n-   Can take up a full-on ‘development-deployment-launch’ workflow process\n-   Composes tech specifications and terms of reference\n-   Defines initial risks in working on large projects\n-   Is responsible for mentoring junior and middle team members\n-   Do regular code reviews for less experienced colleagues\n-   Can independently solve different problems due to past experience\n-   Can distill complex problems through the application of design patterns\n-   Can manage a team of guys doing simple- to mid-level tasks\n\nApart from bringing advanced software developer skills to the table, seniors must usually take managing responsibilities when working in a diversely-skilled team.\n\n**3) Thing to have in mind when hiring.**\n\nA senior software developer:\n\n-   Has to be well-paid\n-   Is sometimes too self-confident\n\n**The bottom line to hire a senior developer:** a senior developer can bring numerous benefits to your product, but ready to pay for them.\n\n## Lead Developer\n\n**1) Key requirements to the role:**\n\nA lead developer possesses:\n\n-   8,5+ years of experience\n-   Intrinsic passion for learning and self-development as a manager\n-   110% work ethic\n-   8,5+ work experience in the industry\n-   The ability to justify business value using data and convince others to join him\n-   The ability to raise the software bar across multiple teams\n-   The knowledge and experience in all aspects of software engineering: requirements acquisition, validation, and management; architecture/design; code and other artifact development; integration; and testing/QA.\n\n**2) What level of tasks can be accomplished?**\n\nA lead developer can:\n\n-   Adapt design patterns to fit the needs at hand through thoughtful analysis of the problem space\n-   Be trusted with architectural problems involving many systems, not just coding problems\n-   Conduct technical interviews with candidates to make sure they have the technical skills to complete the job\n-   Be trusted to take on problems without a defined approach.\n-   Be trusted to generate ideas and software that provide quantifiable business value.\n-   Think about the challenges the team will face in 6 months to 1 year and is already working with management to solve those problems now\n-   Build and implement a system from scratch\n\nThese are full-scale project architects, whose software engineering skills allow them to work on major both backend and frontend patches of significant projects an*emphasized text*d knowledgeably set smaller tasks.\n\n**3) Warnings/Red flags/Thing to have in mind when hiring**\n\nA lead developer:\n\n-   Requires a high wage level. Usually, it is worth to hire a lead developer for a really big team and complex system development.\n\n**The bottom line to hire a lead developer:** hiring a lead developer can become beneficial for your company if it has a team of junior and middle developers and you need a reliable, professional lead to manage and lead your team to success. By the way, many companies prefer to hire a senior developer that would do some management.\n\nNeedless to add, one person might be considered a senior developer with respect to the .NET development platform and junior at Node.js and other related technologies.\n\nMeanwhile, now let’s review the basic differences between software engineers, developers, and programmers.\n\n## Developer vs Engineer vs Programmer\n\nPeople often get confused when it come to the difference between programmers, engineers, and software developers. Indeed, these terms are used interchangeably and the line here is pretty thin. But let’s figure it out - formally:\n\n-   **A programmer** is more of a technician that completes the given tasks without much of an involvement in other aspects of the project, give or take. Simply put, programmers write software code and that might be the end of their responsibilities.\n-   **A software developer** is more diverse professionally - on top of being able to write and review code, they are also tasked with technical documentation creation, testing planning, and professional summarization of all development cycles.\n-   **An engineer** is, usually, an officially-qualified, in-depth expert with a degree that not only can code but also knows some ways around complex programming issues and setup thorough development strategies with best practices.\n\nHowever, many people still regard these three terms as equal.\n\n## How to hire the developers with the right level of expertise for your project?\n\nTechnical skills, experience, and expertise do matter when it comes to finding the best employee for your business. Still, since skills can be acquired over time, it’s not the only quality to look for and often not the most important one. So, how to hire the developers with the right level of expertise for your project?\n\nIt depends on your project requirements, budget, and scope of work needed. You are supposed to hire a team of junior developers and only one senior or lead developer if you wish to save money and develop the professionals tailored to your product in the long run. Still, bear in mind that will take time.\n\nMeanwhile, if you need to get the job done in a quick, reliable, and most efficient manner, hiring several senior-level developers is a smart way to go.\n\nFinally, you might want to hire a lead developer if your team consists of several junior, middle and senior developers, and your senior-level developers are either too busy or too professionally immature to lead the team of developers.\n\nSome other things to keep in mind:\n\n-   A real expert’s best motivation is work & challenge - according to statistics, a majority of software developers are best attracted by the availability of exciting, challenging tasks and that should be your unique selling point when hiring\n-   Resumes are great, but practice is a decisive factor - put your potential hire to the test from the get-go, by giving them a practical task\n-   Don’t confuse expertise levels with personal professional ability degrees - junior doesn’t mean a ‘developing weakling’ and lead doesn’t mean an ‘all-mighty’ ace, it’s just that each works on certain areas of the development and can be a top-notch expert in their niche\n\n**Key Takeaways**\n\nTechnical skills, experience and expertise do matter when it comes to finding the best employees for your business. Developer levels do differ, but the expectations along with the salary for a junior software developer and a senior developer differ as well.\n\nSince skills can be acquired over time, it’s not the only quality to look for. Upon choosing which developer your project needs depends on your requirements and budget. Some companies hire a team of junior developers and only one Senior or Lead developer to save lots of money, but that does cost lots of time. To get the job done in a quick, reliable, and most efficient manner, others choose to hire several senior level developers. You might need to hire the lead developer if your team consists of several junior, middle and senior developers, and your senior-level developers are either too busy or too professionally immature to lead the team of developers.\n\nMoreover, there are some basic things to keep in mind upon looking for the best candidates for your team. Intrinsic passion for learning along with 110% work ethic, for instance, are the qualities every developer regardless of his or her level should possess.\n\nWhen it comes to the differences between a programmer, engineer and a developer, there are differences which were described above. Still, there are people who regard these three positions as equal. In a nutshell, even when you’ve got a big HR team to build and hire the best staff for you, knowing a thing or two about the specifics of each role can prove to be highly beneficial.\n\n**Summary**\n\n**All in all:**\n\n**Hire junior if:**\n\n-   There are small, yet important in the long run tasks, like minor debugging, required to be handled\n-   You are ready to invest in an ambitious specialist’s growth\n-   An expert’s professional passion is more valuable to you than their initial technical expertise\n\n**Hire middle if:**\n\n-   Your project lacks an experienced, yet affordable expert ready to manage certain development areas\n-   You have sufficient juniors and need someone a bit more knowledgeable to mentor them\n-   You value mid-level integrity of a professional who is more universal\n\n**Hire senior & lead if:**\n\n-   You already have a team of lower-level software engineers to manage\n-   You can afford highly-experienced, qualified aces\n-   Your project is of an in-depth manner and requires a narrow, strict approach\n-   You are gathering a team of experts but don’t possess proper expertise for efficient interviewing",
      "html": "<h1 id=\"logical-gradation-of-developers%E2%80%99-level-of-expertise%3A-junior%2C-middle%2C-senior-and-lead.\">Logical gradation of developers’ level of expertise: junior, middle, senior and lead. <a class=\"heading-anchor-permalink\" href=\"#logical-gradation-of-developers%E2%80%99-level-of-expertise%3A-junior%2C-middle%2C-senior-and-lead.\">#</a></h1>\n<p>The terms “developer” and “engineer” and “ programmer” are often used interchangeably, but they might differ for many cutting-edge software development companies. So, it’s obvious that it might be hard to determine which kind of a job position your company needs. This post will put light into these issues, covering at the same time some tips on how to properly choose the specialist with the required technical expertise.</p>\n<p>So, let’s get started with who are and how Junior, Mid-level, and Senior developers differ from each other.</p>\n<p><strong>A Basic Look At Junior, Middle, Senior And Lead Developers &amp; Expectations From Each of Them</strong></p>\n<p><strong>The level of software developers’ expertise is subdivided into the four mentioned software engineering degrees in order to define a potential employee’s professional capabilities - what field of responsibility they can take on, how skilled they are, and how able they can be as a whole when it comes to stress load and emergency working situations. A clear definition of a particular developer role in a job description for an interested specialist is crucial. A future recruit must know for sure what they are about to handle occupying a certain software engineering position.</strong></p>\n<ol>\n<li><a href=\"https://artelogic.net/#1\">Junior Developer</a></li>\n<li><a href=\"https://artelogic.net/#2\">Middle Developer</a></li>\n<li><a href=\"https://artelogic.net/#3\">Senior Developer</a></li>\n<li><a href=\"https://artelogic.net/#4\">Lead Developer</a></li>\n<li><a href=\"https://artelogic.net/#5\">Developer vs Engineer vs Programmer</a></li>\n<li><a href=\"https://artelogic.net/#6\">How to hire the developers with the right level of expertise for your project?</a></li>\n</ol>\n<h2 id=\"junior-developer\">Junior Developer <a class=\"heading-anchor-permalink\" href=\"#junior-developer\">#</a></h2>\n<p><strong>1) Key requirements to the role.</strong></p>\n<p>A junior developer posses:</p>\n<ul>\n<li>0 - 1.5 years of experience</li>\n<li>Intrinsic passion for learning</li>\n<li>110% work ethic</li>\n<li>Excellent basic knowledge about Information Technology from both a software and hardware perspective</li>\n<li>Computer programing basics.</li>\n<li>The ability to learn how to use the tools.</li>\n<li>Knowledge of at least one programming language with the ability to write basic program code.</li>\n</ul>\n<p><strong>2) What level of tasks can be accomplished?</strong></p>\n<p>A junior developer can:</p>\n<ul>\n<li>Fix small, less important bugs</li>\n<li>Work on internal or “admin-side” tools/features</li>\n<li>Work on defined features - i.e., those with previously delineated by senior software developers general concept and markup</li>\n<li>Focus backend in minor aspects</li>\n<li>Assist initial project planning</li>\n<li>Get comfortable with the codebase without doing anything too crucial.</li>\n</ul>\n<p>A competent junior software engineer is usually a backend-focused assistant in defining common obstacles and clarifying the workflow progress, who is also at the stage of reasonably adapting to existing working conditions.</p>\n<p><strong>3) Thing to have in mind when hiring a junior developer:</strong></p>\n<ul>\n<li>Is likely to product code with bugs, so he or she requires more iterations on code reviews</li>\n<li>Is not aware of or has no experience in the best practices and latest technology concepts</li>\n<li>Will require twice as much time as a Mid-level specialist</li>\n<li>Should be supervised</li>\n<li>Is not in a position to liaise with customers or gather requirements.</li>\n</ul>\n<p><strong>The bottom line to hire a junior developer:</strong> hiring junior developers is an investment in their long-term potential rather than an immediate payoff.</p>\n<h2 id=\"middle-developer\">Middle Developer <a class=\"heading-anchor-permalink\" href=\"#middle-developer\">#</a></h2>\n<p><strong>1) Key requirements to the role.</strong></p>\n<p>A middle developer:</p>\n<ul>\n<li>Has 2 - 4 years of experience</li>\n<li>Has intrinsic passion for learning</li>\n<li>Is 110% work ethic</li>\n<li>Has experience in several projects</li>\n<li>Can work alone and in a team</li>\n<li>Is competent in at least a couple areas of the SE “lifecycle.”</li>\n<li>Can set up the dev environment on their own</li>\n<li>Can mentor junior developers of a team</li>\n<li>Demonstrates initiative and ways of solving different tasks</li>\n</ul>\n<p><strong>2) What level of tasks can be accomplished?</strong></p>\n<p>A middle developer can:</p>\n<ul>\n<li>Code in such a way that other people can easily manage it</li>\n<li>Change code to make it more efficient</li>\n<li>Break major tasks down into smaller sub-tasks</li>\n<li>Compose testing plans and schedules</li>\n<li>Find major bags in code</li>\n<li>Review code in close detail</li>\n<li>Work on bigger chunks of code at once</li>\n<li>Set objectives for junior employees</li>\n<li>Perform several tasks for several projects</li>\n</ul>\n<p>A middle degree in software engineering means that a specialist is able to roam about their area of expertise in engineering programs more freely. They take direct responsibility for operational moments and occasionally instruct juniors.</p>\n<p><strong>3) Thing to have in mind when hiring.</strong></p>\n<p>A Middle developer:</p>\n<ul>\n<li>Still may need a support of the mentor as he or she may not have an experience in solving tasks of all level of complexity independently. So you have to get ready to help them if any questions occur</li>\n<li>Is likely to have a fixed mindset</li>\n</ul>\n<p><strong>The bottom line to hire a middle developer:</strong> Hiring middle developers seems like a good option if you need to get the job done quickly, but your budget does not allow you to hire another Senior developer.</p>\n<h2 id=\"senior-developer\">Senior Developer <a class=\"heading-anchor-permalink\" href=\"#senior-developer\">#</a></h2>\n<p><strong>1) Key requirements to the role:</strong></p>\n<p>A senior developer possess:</p>\n<ul>\n<li>5-8 years of experience</li>\n<li>Intrinsic passion for learning and self-development</li>\n<li>110% work ethic</li>\n<li>Experience in solving problems and tasks of different complexity</li>\n<li>Can work like a scientist to experiment/test, validate assumptions and connect the dots to reach a conclusion</li>\n<li>The ability to develop and mentor the middle developers of the team</li>\n<li>The understanding of the full scope of the project required that his team is responsible for and can delegate tasks in an effective manner</li>\n<li>Has the profound view of the project development and suggests the best ways to develop having in mind the final market goal</li>\n</ul>\n<p><strong>2) What level of tasks can be accomplished?</strong></p>\n<p>A senior developer :</p>\n<ul>\n<li>Can take up a full-on ‘development-deployment-launch’ workflow process</li>\n<li>Composes tech specifications and terms of reference</li>\n<li>Defines initial risks in working on large projects</li>\n<li>Is responsible for mentoring junior and middle team members</li>\n<li>Do regular code reviews for less experienced colleagues</li>\n<li>Can independently solve different problems due to past experience</li>\n<li>Can distill complex problems through the application of design patterns</li>\n<li>Can manage a team of guys doing simple- to mid-level tasks</li>\n</ul>\n<p>Apart from bringing advanced software developer skills to the table, seniors must usually take managing responsibilities when working in a diversely-skilled team.</p>\n<p><strong>3) Thing to have in mind when hiring.</strong></p>\n<p>A senior software developer:</p>\n<ul>\n<li>Has to be well-paid</li>\n<li>Is sometimes too self-confident</li>\n</ul>\n<p><strong>The bottom line to hire a senior developer:</strong> a senior developer can bring numerous benefits to your product, but ready to pay for them.</p>\n<h2 id=\"lead-developer\">Lead Developer <a class=\"heading-anchor-permalink\" href=\"#lead-developer\">#</a></h2>\n<p><strong>1) Key requirements to the role:</strong></p>\n<p>A lead developer possesses:</p>\n<ul>\n<li>8,5+ years of experience</li>\n<li>Intrinsic passion for learning and self-development as a manager</li>\n<li>110% work ethic</li>\n<li>8,5+ work experience in the industry</li>\n<li>The ability to justify business value using data and convince others to join him</li>\n<li>The ability to raise the software bar across multiple teams</li>\n<li>The knowledge and experience in all aspects of software engineering: requirements acquisition, validation, and management; architecture/design; code and other artifact development; integration; and testing/QA.</li>\n</ul>\n<p><strong>2) What level of tasks can be accomplished?</strong></p>\n<p>A lead developer can:</p>\n<ul>\n<li>Adapt design patterns to fit the needs at hand through thoughtful analysis of the problem space</li>\n<li>Be trusted with architectural problems involving many systems, not just coding problems</li>\n<li>Conduct technical interviews with candidates to make sure they have the technical skills to complete the job</li>\n<li>Be trusted to take on problems without a defined approach.</li>\n<li>Be trusted to generate ideas and software that provide quantifiable business value.</li>\n<li>Think about the challenges the team will face in 6 months to 1 year and is already working with management to solve those problems now</li>\n<li>Build and implement a system from scratch</li>\n</ul>\n<p>These are full-scale project architects, whose software engineering skills allow them to work on major both backend and frontend patches of significant projects an<em>emphasized text</em>d knowledgeably set smaller tasks.</p>\n<p><strong>3) Warnings/Red flags/Thing to have in mind when hiring</strong></p>\n<p>A lead developer:</p>\n<ul>\n<li>Requires a high wage level. Usually, it is worth to hire a lead developer for a really big team and complex system development.</li>\n</ul>\n<p><strong>The bottom line to hire a lead developer:</strong> hiring a lead developer can become beneficial for your company if it has a team of junior and middle developers and you need a reliable, professional lead to manage and lead your team to success. By the way, many companies prefer to hire a senior developer that would do some management.</p>\n<p>Needless to add, one person might be considered a senior developer with respect to the .NET development platform and junior at Node.js and other related technologies.</p>\n<p>Meanwhile, now let’s review the basic differences between software engineers, developers, and programmers.</p>\n<h2 id=\"developer-vs-engineer-vs-programmer\">Developer vs Engineer vs Programmer <a class=\"heading-anchor-permalink\" href=\"#developer-vs-engineer-vs-programmer\">#</a></h2>\n<p>People often get confused when it come to the difference between programmers, engineers, and software developers. Indeed, these terms are used interchangeably and the line here is pretty thin. But let’s figure it out - formally:</p>\n<ul>\n<li><strong>A programmer</strong> is more of a technician that completes the given tasks without much of an involvement in other aspects of the project, give or take. Simply put, programmers write software code and that might be the end of their responsibilities.</li>\n<li><strong>A software developer</strong> is more diverse professionally - on top of being able to write and review code, they are also tasked with technical documentation creation, testing planning, and professional summarization of all development cycles.</li>\n<li><strong>An engineer</strong> is, usually, an officially-qualified, in-depth expert with a degree that not only can code but also knows some ways around complex programming issues and setup thorough development strategies with best practices.</li>\n</ul>\n<p>However, many people still regard these three terms as equal.</p>\n<h2 id=\"how-to-hire-the-developers-with-the-right-level-of-expertise-for-your-project%3F\">How to hire the developers with the right level of expertise for your project? <a class=\"heading-anchor-permalink\" href=\"#how-to-hire-the-developers-with-the-right-level-of-expertise-for-your-project%3F\">#</a></h2>\n<p>Technical skills, experience, and expertise do matter when it comes to finding the best employee for your business. Still, since skills can be acquired over time, it’s not the only quality to look for and often not the most important one. So, how to hire the developers with the right level of expertise for your project?</p>\n<p>It depends on your project requirements, budget, and scope of work needed. You are supposed to hire a team of junior developers and only one senior or lead developer if you wish to save money and develop the professionals tailored to your product in the long run. Still, bear in mind that will take time.</p>\n<p>Meanwhile, if you need to get the job done in a quick, reliable, and most efficient manner, hiring several senior-level developers is a smart way to go.</p>\n<p>Finally, you might want to hire a lead developer if your team consists of several junior, middle and senior developers, and your senior-level developers are either too busy or too professionally immature to lead the team of developers.</p>\n<p>Some other things to keep in mind:</p>\n<ul>\n<li>A real expert’s best motivation is work &amp; challenge - according to statistics, a majority of software developers are best attracted by the availability of exciting, challenging tasks and that should be your unique selling point when hiring</li>\n<li>Resumes are great, but practice is a decisive factor - put your potential hire to the test from the get-go, by giving them a practical task</li>\n<li>Don’t confuse expertise levels with personal professional ability degrees - junior doesn’t mean a ‘developing weakling’ and lead doesn’t mean an ‘all-mighty’ ace, it’s just that each works on certain areas of the development and can be a top-notch expert in their niche</li>\n</ul>\n<p><strong>Key Takeaways</strong></p>\n<p>Technical skills, experience and expertise do matter when it comes to finding the best employees for your business. Developer levels do differ, but the expectations along with the salary for a junior software developer and a senior developer differ as well.</p>\n<p>Since skills can be acquired over time, it’s not the only quality to look for. Upon choosing which developer your project needs depends on your requirements and budget. Some companies hire a team of junior developers and only one Senior or Lead developer to save lots of money, but that does cost lots of time. To get the job done in a quick, reliable, and most efficient manner, others choose to hire several senior level developers. You might need to hire the lead developer if your team consists of several junior, middle and senior developers, and your senior-level developers are either too busy or too professionally immature to lead the team of developers.</p>\n<p>Moreover, there are some basic things to keep in mind upon looking for the best candidates for your team. Intrinsic passion for learning along with 110% work ethic, for instance, are the qualities every developer regardless of his or her level should possess.</p>\n<p>When it comes to the differences between a programmer, engineer and a developer, there are differences which were described above. Still, there are people who regard these three positions as equal. In a nutshell, even when you’ve got a big HR team to build and hire the best staff for you, knowing a thing or two about the specifics of each role can prove to be highly beneficial.</p>\n<p><strong>Summary</strong></p>\n<p><strong>All in all:</strong></p>\n<p><strong>Hire junior if:</strong></p>\n<ul>\n<li>There are small, yet important in the long run tasks, like minor debugging, required to be handled</li>\n<li>You are ready to invest in an ambitious specialist’s growth</li>\n<li>An expert’s professional passion is more valuable to you than their initial technical expertise</li>\n</ul>\n<p><strong>Hire middle if:</strong></p>\n<ul>\n<li>Your project lacks an experienced, yet affordable expert ready to manage certain development areas</li>\n<li>You have sufficient juniors and need someone a bit more knowledgeable to mentor them</li>\n<li>You value mid-level integrity of a professional who is more universal</li>\n</ul>\n<p><strong>Hire senior &amp; lead if:</strong></p>\n<ul>\n<li>You already have a team of lower-level software engineers to manage</li>\n<li>You can afford highly-experienced, qualified aces</li>\n<li>Your project is of an in-depth manner and requires a narrow, strict approach</li>\n<li>You are gathering a team of experts but don’t possess proper expertise for efficient interviewing</li>\n</ul>\n",
      "id": 36
    },
    {
      "path": "PHP/markdown.md",
      "url": "PHP/markdown.html",
      "content": "- To generate a html styled from a markdown content with various ready themes:\n\nhttps://github.com/mixu/markdown-styles\n\n- to adding styles inside markdown file:\n\n`# heading text{#identifier cssselector}`\n\nfor example:\nin top of markdown file:\n\n```html\n<style>\n.heading1 {\n    color: red;\n    font-weight:700;\n    font-size: 35px;\n}\n.heading2 {\n    color: blue;\n    font-weight:700;\n    font-size: 30px;\n}\n</style>\n```\nreference your style with this syntax:\n```md\n# Markdown heading styles {#identifier .heading1}\n## Markdown heading styles {#identifier .heading2}\n```",
      "html": "<ul>\n<li>To generate a html styled from a markdown content with various ready themes:</li>\n</ul>\n<p><a href=\"https://github.com/mixu/markdown-styles\">https://github.com/mixu/markdown-styles</a></p>\n<ul>\n<li>to adding styles inside markdown file:</li>\n</ul>\n<p><code># heading text{#identifier cssselector}</code></p>\n<p>for example:\nin top of markdown file:</p>\n<pre><code class=\"language-html\">&lt;style&gt;\n.heading1 {\n    color: red;\n    font-weight:700;\n    font-size: 35px;\n}\n.heading2 {\n    color: blue;\n    font-weight:700;\n    font-size: 30px;\n}\n&lt;/style&gt;\n</code></pre>\n<p>reference your style with this syntax:</p>\n<pre><code class=\"language-md\"># Markdown heading styles {#identifier .heading1}\n## Markdown heading styles {#identifier .heading2}\n</code></pre>\n",
      "id": 37
    },
    {
      "path": "PHP/namespace_review.md",
      "url": "PHP/namespace_review.html",
      "content": "PHP - Keep The Values in The Form: https://www.w3schools.com/php/php_form_complete.asp\nPHP namespaces: https://www.w3schools.com/php/php_namespaces.asp\n\n\n> Note: Namespace names are case-insensitive. \n\n> The Namespace name PHP, and compound names starting with this name (like PHP\\Classes) are reserved for internal language use and should not be used in the userspace code. \n\n> Note: Fully qualified names (i.e. names starting with a backslash) are not allowed in namespace declarations, because such constructs are interpreted as relative namespace expressions. \n\n- namespace statement  is defined at first of the php files. But before namespace declaration only three elements allowed:\n  1. declare statement\n  2. spaces\n  3. comments\n\n\n```php\n// defining namespace\n<?php\nnamespace MyProject\n?>\n// declaring namespace with hierarchy:\n<?php\nnamespace MyProjec\\Sub\\level;\n?>\n// Multiple namespaces may also be declared in the same file. There are two allowed syntaxes\n// 1.simple combination syntax- not recommended\n<?php\nnamespace MyProject;\n// .... code ...\nnamespace AnotherProject;\n// .....\n?>\n// 2. bracket syntax: recomended for combining namespaces into a single file.\n<php\nnamespace MyProject{\n// .... code ...\n// ...\n}\n\nnamespace AnotherProject{\n // ..... code ....\n}\n?>\n<?php\n//  Declaring multiple namespaces and unnamespaced code\nnamespace MyProject {\n\nconst CONNECT_OK = 1;\nclass Connection { /* ... */ }\nfunction connect() { /* ... */  }\n}\n\nnamespace { // global code\nsession_start();\n$a = MyProject\\connect();\necho MyProject\\Connection::start();\n}\n?>\n\n```\n> A simple analogy can be made between PHP namespaces and a filesystem.\n\nExample:\n\nfile1.php\n```php\nnamespace Foo\\Bar\\subnamespace;\n\nconst FOO = 1;\nfunction foo() {}\nclass foo\n{\n    static function staticmethod() {}\n}\n```\nfile2.php\n\n```php\nnamespace Foo\\Bar;\ninclude 'file1.php';\n\nconst FOO = 2;\nfunction foo() {}\nclass foo\n{\n    static function staticmethod() {}\n}\n\n/* Unqualified name */\nfoo(); // resolves to function Foo\\Bar\\foo\nfoo::staticmethod(); // resolves to class Foo\\Bar\\foo, method staticmethod\necho FOO; // resolves to constant Foo\\Bar\\FOO\n\n/* Qualified name */\nsubnamespace\\foo(); // resolves to function Foo\\Bar\\subnamespace\\foo\nsubnamespace\\foo::staticmethod(); // resolves to class Foo\\Bar\\subnamespace\\foo,\n                                  // method staticmethod\necho subnamespace\\FOO; // resolves to constant Foo\\Bar\\subnamespace\\FOO\n                                  \n/* Fully qualified name */\n\\Foo\\Bar\\foo(); // resolves to function Foo\\Bar\\foo\n\\Foo\\Bar\\foo::staticmethod(); // resolves to class Foo\\Bar\\foo, method staticmethod\necho \\Foo\\Bar\\FOO; // resolves to constant Foo\\Bar\\FOO\n```\nNote that to access any global class, function or constant, a fully qualified name can be used:\n```php\n//Accessing global classes, functions and constants from within a namespace\n<?php\nnamespace Foo;\n\nfunction strlen() {}\nconst INI_ALL = 3;\nclass Exception {}\n\n$a = \\strlen('hi'); // calls global function strlen\n$b = \\INI_ALL; // accesses global constant INI_ALL\n$c = new \\Exception('error'); // instantiates global class Exception\n?>\n\n```\n\n- PHP supports two ways of abstractly accessing elements within the current namespace, the `__NAMESPACE__` magic constant, and the `namespace` keyword. \n\n- The value of `__NAMESPACE__` is a string that contains the current namespace name. In global, un-namespaced code, it contains an empty string. \n\nAliasing is accomplished with the use operator. Here is an example showing all 5 kinds of importing: \n```php\nnamespace foo;\nuse My\\Full\\Classname as Another;\n\n// this is the same as use My\\Full\\NSname as NSname\nuse My\\Full\\NSname;\n\n// importing a global class\nuse ArrayObject;\n\n// importing a function\nuse function My\\Full\\functionName;\n\n// aliasing a function\nuse function My\\Full\\functionName as func;\n\n// importing a constant\nuse const My\\Full\\CONSTANT;\n\n$obj = new namespace\\Another; // instantiates object of class foo\\Another\n$obj = new Another; // instantiates object of class My\\Full\\Classname\nNSname\\subns\\func(); // calls function My\\Full\\NSname\\subns\\func\n$a = new ArrayObject(array(1)); // instantiates object of class ArrayObject\n// without the \"use ArrayObject\" we would instantiate an object of class foo\\ArrayObject\nfunc(); // calls function My\\Full\\functionName\necho CONSTANT; // echoes the value of My\\Full\\CONSTANT\n```\n\n- The `use` keyword must be declared in the outermost scope of a file (the `global` scope) or inside `namespace` declarations. This is because the importing is done at **compile time** and not **runtime**, so it cannot be block scoped. The following example will show an illegal use of the `use` keyword: \n\n```php\n // Illegal importing rule\n<?php\nnamespace Languages;\n\nfunction toGreenlandic()\n{\n    use Languages\\Danish;\n    // ...\n}\n?>\n```\n> Importing rules are per file basis, meaning included files will NOT inherit the parent file's importing rules. \n\n#### Group use declarations\nClasses, functions and constants being imported from the same namespace can be grouped together in a single use statement.\n```php\n<?php\n\nuse some\\namespace\\ClassA;\nuse some\\namespace\\ClassB;\nuse some\\namespace\\ClassC as C;\n\nuse function some\\namespace\\fn_a;\nuse function some\\namespace\\fn_b;\nuse function some\\namespace\\fn_c;\n\nuse const some\\namespace\\ConstA;\nuse const some\\namespace\\ConstB;\nuse const some\\namespace\\ConstC;\n\n// is equivalent to the following groupped use declaration\nuse some\\namespace\\{ClassA, ClassB, ClassC as C};\nuse function some\\namespace\\{fn_a, fn_b, fn_c};\nuse const some\\namespace\\{ConstA, ConstB, ConstC};\n?>\n```\n#### Global space\n\nWithout any namespace definition, all class and function definitions are placed into the global space - as it was in PHP before namespaces were supported. Prefixing a name with \\ will specify that the name is required from the global space even in the context of the namespace. \n```php\n\n<?php\nnamespace A\\B\\C;\n\n/* This function is A\\B\\C\\fopen */\nfunction fopen() { \n     /* ... */\n     $f = \\fopen(...); // call global fopen\n     return $f;\n} \n?>\n\n```\n\n\n",
      "html": "<p>PHP - Keep The Values in The Form: <a href=\"https://www.w3schools.com/php/php_form_complete.asp\">https://www.w3schools.com/php/php_form_complete.asp</a>\nPHP namespaces: <a href=\"https://www.w3schools.com/php/php_namespaces.asp\">https://www.w3schools.com/php/php_namespaces.asp</a></p>\n<blockquote>\n<p>Note: Namespace names are case-insensitive.</p>\n</blockquote>\n<blockquote>\n<p>The Namespace name PHP, and compound names starting with this name (like PHP\\Classes) are reserved for internal language use and should not be used in the userspace code.</p>\n</blockquote>\n<blockquote>\n<p>Note: Fully qualified names (i.e. names starting with a backslash) are not allowed in namespace declarations, because such constructs are interpreted as relative namespace expressions.</p>\n</blockquote>\n<ul>\n<li>namespace statement  is defined at first of the php files. But before namespace declaration only three elements allowed:\n<ol>\n<li>declare statement</li>\n<li>spaces</li>\n<li>comments</li>\n</ol>\n</li>\n</ul>\n<pre><code class=\"language-php\">// defining namespace\n&lt;?php\nnamespace MyProject\n?&gt;\n// declaring namespace with hierarchy:\n&lt;?php\nnamespace MyProjec\\Sub\\level;\n?&gt;\n// Multiple namespaces may also be declared in the same file. There are two allowed syntaxes\n// 1.simple combination syntax- not recommended\n&lt;?php\nnamespace MyProject;\n// .... code ...\nnamespace AnotherProject;\n// .....\n?&gt;\n// 2. bracket syntax: recomended for combining namespaces into a single file.\n&lt;php\nnamespace MyProject{\n// .... code ...\n// ...\n}\n\nnamespace AnotherProject{\n // ..... code ....\n}\n?&gt;\n&lt;?php\n//  Declaring multiple namespaces and unnamespaced code\nnamespace MyProject {\n\nconst CONNECT_OK = 1;\nclass Connection { /* ... */ }\nfunction connect() { /* ... */  }\n}\n\nnamespace { // global code\nsession_start();\n$a = MyProject\\connect();\necho MyProject\\Connection::start();\n}\n?&gt;\n\n</code></pre>\n<blockquote>\n<p>A simple analogy can be made between PHP namespaces and a filesystem.</p>\n</blockquote>\n<p>Example:</p>\n<p>file1.php</p>\n<pre><code class=\"language-php\">namespace Foo\\Bar\\subnamespace;\n\nconst FOO = 1;\nfunction foo() {}\nclass foo\n{\n    static function staticmethod() {}\n}\n</code></pre>\n<p>file2.php</p>\n<pre><code class=\"language-php\">namespace Foo\\Bar;\ninclude 'file1.php';\n\nconst FOO = 2;\nfunction foo() {}\nclass foo\n{\n    static function staticmethod() {}\n}\n\n/* Unqualified name */\nfoo(); // resolves to function Foo\\Bar\\foo\nfoo::staticmethod(); // resolves to class Foo\\Bar\\foo, method staticmethod\necho FOO; // resolves to constant Foo\\Bar\\FOO\n\n/* Qualified name */\nsubnamespace\\foo(); // resolves to function Foo\\Bar\\subnamespace\\foo\nsubnamespace\\foo::staticmethod(); // resolves to class Foo\\Bar\\subnamespace\\foo,\n                                  // method staticmethod\necho subnamespace\\FOO; // resolves to constant Foo\\Bar\\subnamespace\\FOO\n                                  \n/* Fully qualified name */\n\\Foo\\Bar\\foo(); // resolves to function Foo\\Bar\\foo\n\\Foo\\Bar\\foo::staticmethod(); // resolves to class Foo\\Bar\\foo, method staticmethod\necho \\Foo\\Bar\\FOO; // resolves to constant Foo\\Bar\\FOO\n</code></pre>\n<p>Note that to access any global class, function or constant, a fully qualified name can be used:</p>\n<pre><code class=\"language-php\">//Accessing global classes, functions and constants from within a namespace\n&lt;?php\nnamespace Foo;\n\nfunction strlen() {}\nconst INI_ALL = 3;\nclass Exception {}\n\n$a = \\strlen('hi'); // calls global function strlen\n$b = \\INI_ALL; // accesses global constant INI_ALL\n$c = new \\Exception('error'); // instantiates global class Exception\n?&gt;\n\n</code></pre>\n<ul>\n<li>\n<p>PHP supports two ways of abstractly accessing elements within the current namespace, the <code>__NAMESPACE__</code> magic constant, and the <code>namespace</code> keyword.</p>\n</li>\n<li>\n<p>The value of <code>__NAMESPACE__</code> is a string that contains the current namespace name. In global, un-namespaced code, it contains an empty string.</p>\n</li>\n</ul>\n<p>Aliasing is accomplished with the use operator. Here is an example showing all 5 kinds of importing:</p>\n<pre><code class=\"language-php\">namespace foo;\nuse My\\Full\\Classname as Another;\n\n// this is the same as use My\\Full\\NSname as NSname\nuse My\\Full\\NSname;\n\n// importing a global class\nuse ArrayObject;\n\n// importing a function\nuse function My\\Full\\functionName;\n\n// aliasing a function\nuse function My\\Full\\functionName as func;\n\n// importing a constant\nuse const My\\Full\\CONSTANT;\n\n$obj = new namespace\\Another; // instantiates object of class foo\\Another\n$obj = new Another; // instantiates object of class My\\Full\\Classname\nNSname\\subns\\func(); // calls function My\\Full\\NSname\\subns\\func\n$a = new ArrayObject(array(1)); // instantiates object of class ArrayObject\n// without the &quot;use ArrayObject&quot; we would instantiate an object of class foo\\ArrayObject\nfunc(); // calls function My\\Full\\functionName\necho CONSTANT; // echoes the value of My\\Full\\CONSTANT\n</code></pre>\n<ul>\n<li>The <code>use</code> keyword must be declared in the outermost scope of a file (the <code>global</code> scope) or inside <code>namespace</code> declarations. This is because the importing is done at <strong>compile time</strong> and not <strong>runtime</strong>, so it cannot be block scoped. The following example will show an illegal use of the <code>use</code> keyword:</li>\n</ul>\n<pre><code class=\"language-php\"> // Illegal importing rule\n&lt;?php\nnamespace Languages;\n\nfunction toGreenlandic()\n{\n    use Languages\\Danish;\n    // ...\n}\n?&gt;\n</code></pre>\n<blockquote>\n<p>Importing rules are per file basis, meaning included files will NOT inherit the parent file’s importing rules.</p>\n</blockquote>\n<h4 id=\"group-use-declarations\">Group use declarations <a class=\"heading-anchor-permalink\" href=\"#group-use-declarations\">#</a></h4>\n<p>Classes, functions and constants being imported from the same namespace can be grouped together in a single use statement.</p>\n<pre><code class=\"language-php\">&lt;?php\n\nuse some\\namespace\\ClassA;\nuse some\\namespace\\ClassB;\nuse some\\namespace\\ClassC as C;\n\nuse function some\\namespace\\fn_a;\nuse function some\\namespace\\fn_b;\nuse function some\\namespace\\fn_c;\n\nuse const some\\namespace\\ConstA;\nuse const some\\namespace\\ConstB;\nuse const some\\namespace\\ConstC;\n\n// is equivalent to the following groupped use declaration\nuse some\\namespace\\{ClassA, ClassB, ClassC as C};\nuse function some\\namespace\\{fn_a, fn_b, fn_c};\nuse const some\\namespace\\{ConstA, ConstB, ConstC};\n?&gt;\n</code></pre>\n<h4 id=\"global-space\">Global space <a class=\"heading-anchor-permalink\" href=\"#global-space\">#</a></h4>\n<p>Without any namespace definition, all class and function definitions are placed into the global space - as it was in PHP before namespaces were supported. Prefixing a name with \\ will specify that the name is required from the global space even in the context of the namespace.</p>\n<pre><code class=\"language-php\">\n&lt;?php\nnamespace A\\B\\C;\n\n/* This function is A\\B\\C\\fopen */\nfunction fopen() { \n     /* ... */\n     $f = \\fopen(...); // call global fopen\n     return $f;\n} \n?&gt;\n\n</code></pre>\n",
      "id": 38
    },
    {
      "path": "PHP/notes_for_proff_nodejs_express.md",
      "url": "PHP/notes_for_proff_nodejs_express.html",
      "content": "### Basic Routing:\n\nFirst create an express app:\n\n```js\nconst express =  require('express');\nconst app =  express();\n```\n  \nThen you can define routes like this:\n\n```js\n\napp.get('/someUri', function (req, res, next) {})\n\n```\n\n  \n\nThat structure works for all `HTTP` methods, and expects a path as the first argument, and a handler for that path, which receives the request and response objects. So, for the basic `HTTP` methods, these are the routes\n\n  \n\n```js\n\n// GET www.domain.com/myPath\n\napp.get('/myPath', function (req, res, next) {})\n\n// POST www.domain.com/myPath\n\napp.post('/myPath', function (req, res, next) {})\n\n// PUT www.domain.com/myPath\n\napp.put('/myPath', function (req, res, next) {})\n\n// DELETE www.domain.com/myPath\n\napp.delete('/myPath', function (req, res, next) {})\n\n```\n\n  \n\nYou can check the complete list of supported verbs here. If you want to define the same behavior for a route and all ``HTTP`` methods, you can use:\n\n  \n\n```js\n\napp.all('/myPath', function (req, res, next) {})\n\n//or\n\napp.use('/myPath', function (req, res, next) {})\n\n//or\n\napp.use('*', function (req, res, next) {})\n\n// * wildcard will route for all paths\n\n```\n\n  \n\nYou can chain your route definitions for a single path\n\n  \n\n```js\n\napp.route('/myPath')\n\n.get(function (req, res, next) {})\n\n.post(function (req, res, next) {})\n\n.put(function (req, res, next) {})\n\n```\n\n  \n\nYou can also add functions to any `HTTP` method. They will run before the final callback and take the parameters `(req, res, next)` as arguments.\n\n  \n\n```js\n\n// GET www.domain.com/myPath\n\napp.get('/myPath', myFunction, function (req, res, next) {})\n\n```\n\n  \n\nYour final callbacks can be stored in an external file to avoid putting too much code in one file:\n\n  \n\n```js\n\n// other.js\n\nexports.doSomething  =  function(req, res, next) {/* do some stuff */};\n\n```\n\n  \n\nAnd then in the file containing your routes:\n\n  \n\n```js\n\nconst other =  require('./other.js');\n\napp.get('/someUri', myFunction, other.doSomething);\n\n```\n\n  \n\n### Section 3.4: Using a Template Engine\n\n  \n\nThe following code will setup Jade as template engine. (Note: Jade has been renamed to pug as of December 2015.)\n\n  \n\n```js\n\nconst express =  require('express'); //Imports the express module\n\nconst app =  express(); //Creates an instance of the express module\n\nconst PORT =  3000; //Randomly chosen port\n\n  \n\napp.set('view engine','jade'); //Sets jade as the View Engine / Template Engine\n\napp.set('views','src/views'); //Sets the directory where all the views (.jade files) are stored.\n\n  \n\n//Creates a Root Route\n\napp.get('/',function(req, res){\n\nres.render('index'); //renders the index.jade file into html and returns as a response. The render function optionally takes the data to pass to the view.\n\n});\n\n  \n\n//Starts the Express server with a callback\n\napp.listen(PORT, function(err) {\n\nif (!err) {\n\nconsole.log('Server is running at port', PORT);\n\n} else {\n\nconsole.log(JSON.stringify(err));\n\n}\n\n});\n\n  \n\n```\n\n  \n\n> Remember to `npm install` the Template Engine too such `hbs`,`jade/pug` or `ejs`.\n\n  \n\n---\n\n  \n\n### Section 3.5: JSON API with ExpressJS\n\n  \n\n```js\n\nvar express =  require('express');\n\n  \n\nvar cors =  require('cors'); // Use cors module for enable Cross-origin resource sharing\n\n  \n\nvar app =  express();\n\napp.use(cors()); // for all routes\n\n  \n\nvar port = process.env.PORT ||  8080;\n\n  \n\napp.get('/', function(req, res) {\n\nvar info = {\n\n'string_value': 'StackOverflow',\n\n  \n\n'number_value':}\n\nres.json(info);\n\n8476\n\n// or\n\n/* res.send(JSON.stringify({\n\nstring_value: 'StackOverflow',\n\nnumber_value: 8476\n\n})) */\n\n//you can add a status code to the json response\n\n/* res.status(200).json(info) */\n\n})\n\napp.listen(port, function() {\n\nconsole.log('Node.js listening on port '  + port)\n\n})\n\n```\n\n  \n\nOn http://localhost:8080/ output object\n\n  \n\n```json\n\n{\n\nstring_value:\"StackOverflow\",\n\nnumber_value:8476\n\n}\n\n```\n\n  \n\n### Section 3.6: Serving static files\n\n  \n\nWhen building a webserver with Express it's often required to serve a combination of dynamic content and static\n\nfiles.\n\n  \n\nIt is common to use folder named 'public' to have static files. In this case the folder structure may look like:\n\n  \n\n```bash\n\nproject root\n\n├── server.js\n\n├── package.json\n\n└── public\n\n├── index.html\n\n└── script.js\n\n````\n\n  \n\nTo configure Express to serve static files:\n\n  \n\n```js\n\napp.use(express.static('public'));\n\n```\n\n  \n\nyou must not specify /public/ in the url). This is because, express looks up for the files relative to the static folder configured. You can specify virtual path prefix as shown below:\n\n  \n\n```js\n\napp.use('/static', express.static('public'));\n\n```\n\n  \n\nThis will make the resources available under the `/static/` prefix.\n\n  \n  \n  \n\nTo define multiple folders at the same time:\n\n  \n\n```js\n\napp.use(express.static('public'));\n\napp.use(express.static('images'));\n\napp.use(express.static('files'));\n\n```\n\n> Express will examine the folder in definition order. In case of files with the same name, the one in the first matching folder will be served.\n\n---\n\n### Section 3.7: Adding Middleware\n\n  \n  \n\n[x] add more about `middleware` functions\n\n**Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle.**\n\n  Middleware functions can execute any code, make changes to res and req objects, end response cycle and call next middleware.\n----\n\n### Section 3.9: Getting info from the request\n\n  \n\nTo get info from the requesting url (notice that req is the request object in the handler function of routes).\n\n  \n\nConsider this route definition `/settings/:user_id` and this particular example `/settings/32135?field=name`\n\n  \n\n```js\n\n// get the full path\n\nreq.originalUrl // => /settings/32135?field=name\n\n  \n\n// get the user_id param\n\nreq.params.user_id // => 32135\n\n// get the query value of the field\nreq.query.field // => 'name'\n\n```\n\nYou can also get headers of the request, like this\n\n```js\n\nreq.get('Content-Type') // \"text/plain\"\n\n```\n\nTo simplify getting other info you can use middlewares. For example, to get the body info of the request, you can use the body-parser middleware, which will transform raw request body into usable format.\n\n  \n\n```js\n\nvar app =  require('express')();\n\nvar bodyParser =  require('body-parser');\n\napp.use(bodyParser.json()); // for parsing application/json\n\napp.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded\n\n```\n\n  \n\nNow suppose a request like this\n\n  \n\n```http\n\nPUT /settings/32135\n\n{\n\n\"name\": \"Peter\"\n\n}\n\n```\n\n  \n\nYou can access the posted name like this\n\n  \n\n```js\n\nreq.body.name // \"Peter\"\n\n```\n\n  \n\nIn a similar way, you can access cookies from the request, you also need a middleware like cookie-parser\n\n  \n\n```js\n\nreq.cookies.name\n\n```\n\n  \n  \n\n### Section 3.11: Hook: How to execute code before any `req` and after any `res`\n  app.use() and middleware can be used for \"before\" and a combination of the close and finish events can be used for \"after\".\n\n  \n\n```js\napp.use(function (req, res, next) {\nfunction  afterResponse() {\nres.removeListener('finish', afterResponse);\nres.removeListener('close', afterResponse);\n// actions after response\n}\nres.on('finish', afterResponse);\nres.on('close', afterResponse);\n// action before request\n// eventually calling 'next()'\nnext();\n});\napp.use(app.router);\n```\n\n> Note: Just make sure this \"middleware\" is used before app.router as order does matter.\n\n---\n\n### Section 3.13: Custom middleware in Express\n\nIn Express, you can define middlewares that can be used for checking requests or setting some headers in response.\n\n```js\napp.use(function(req, res, next){ }); // signature\n```\n\nExample\n\nThe following code adds user to the request object and pass the control to the next matching route.\n\n```js\nvar express =  require('express');\nvar app =  express();\n//each request will pass through it\napp.use(function(req, res, next){\nreq.user =  'testuser';\nnext(); // it will pass the control to next matching route\n});\napp.get('/', function(req, res){\nvar user = req.user;\nconsole.log(user); // testuser\nreturn res.send(user);\n});\napp.listen(3000);\n```",
      "html": "<h3 id=\"basic-routing%3A\">Basic Routing: <a class=\"heading-anchor-permalink\" href=\"#basic-routing%3A\">#</a></h3>\n<p>First create an express app:</p>\n<pre><code class=\"language-js\">const express =  require('express');\nconst app =  express();\n</code></pre>\n<p>Then you can define routes like this:</p>\n<pre><code class=\"language-js\">\napp.get('/someUri', function (req, res, next) {})\n\n</code></pre>\n<p>That structure works for all <code>HTTP</code> methods, and expects a path as the first argument, and a handler for that path, which receives the request and response objects. So, for the basic <code>HTTP</code> methods, these are the routes</p>\n<pre><code class=\"language-js\">\n// GET www.domain.com/myPath\n\napp.get('/myPath', function (req, res, next) {})\n\n// POST www.domain.com/myPath\n\napp.post('/myPath', function (req, res, next) {})\n\n// PUT www.domain.com/myPath\n\napp.put('/myPath', function (req, res, next) {})\n\n// DELETE www.domain.com/myPath\n\napp.delete('/myPath', function (req, res, next) {})\n\n</code></pre>\n<p>You can check the complete list of supported verbs here. If you want to define the same behavior for a route and all <code>HTTP</code> methods, you can use:</p>\n<pre><code class=\"language-js\">\napp.all('/myPath', function (req, res, next) {})\n\n//or\n\napp.use('/myPath', function (req, res, next) {})\n\n//or\n\napp.use('*', function (req, res, next) {})\n\n// * wildcard will route for all paths\n\n</code></pre>\n<p>You can chain your route definitions for a single path</p>\n<pre><code class=\"language-js\">\napp.route('/myPath')\n\n.get(function (req, res, next) {})\n\n.post(function (req, res, next) {})\n\n.put(function (req, res, next) {})\n\n</code></pre>\n<p>You can also add functions to any <code>HTTP</code> method. They will run before the final callback and take the parameters <code>(req, res, next)</code> as arguments.</p>\n<pre><code class=\"language-js\">\n// GET www.domain.com/myPath\n\napp.get('/myPath', myFunction, function (req, res, next) {})\n\n</code></pre>\n<p>Your final callbacks can be stored in an external file to avoid putting too much code in one file:</p>\n<pre><code class=\"language-js\">\n// other.js\n\nexports.doSomething  =  function(req, res, next) {/* do some stuff */};\n\n</code></pre>\n<p>And then in the file containing your routes:</p>\n<pre><code class=\"language-js\">\nconst other =  require('./other.js');\n\napp.get('/someUri', myFunction, other.doSomething);\n\n</code></pre>\n<h3 id=\"section-3.4%3A-using-a-template-engine\">Section 3.4: Using a Template Engine <a class=\"heading-anchor-permalink\" href=\"#section-3.4%3A-using-a-template-engine\">#</a></h3>\n<p>The following code will setup Jade as template engine. (Note: Jade has been renamed to pug as of December 2015.)</p>\n<pre><code class=\"language-js\">\nconst express =  require('express'); //Imports the express module\n\nconst app =  express(); //Creates an instance of the express module\n\nconst PORT =  3000; //Randomly chosen port\n\n  \n\napp.set('view engine','jade'); //Sets jade as the View Engine / Template Engine\n\napp.set('views','src/views'); //Sets the directory where all the views (.jade files) are stored.\n\n  \n\n//Creates a Root Route\n\napp.get('/',function(req, res){\n\nres.render('index'); //renders the index.jade file into html and returns as a response. The render function optionally takes the data to pass to the view.\n\n});\n\n  \n\n//Starts the Express server with a callback\n\napp.listen(PORT, function(err) {\n\nif (!err) {\n\nconsole.log('Server is running at port', PORT);\n\n} else {\n\nconsole.log(JSON.stringify(err));\n\n}\n\n});\n\n  \n\n</code></pre>\n<blockquote>\n<p>Remember to <code>npm install</code> the Template Engine too such <code>hbs</code>,<code>jade/pug</code> or <code>ejs</code>.</p>\n</blockquote>\n<hr>\n<h3 id=\"section-3.5%3A-json-api-with-expressjs\">Section 3.5: JSON API with ExpressJS <a class=\"heading-anchor-permalink\" href=\"#section-3.5%3A-json-api-with-expressjs\">#</a></h3>\n<pre><code class=\"language-js\">\nvar express =  require('express');\n\n  \n\nvar cors =  require('cors'); // Use cors module for enable Cross-origin resource sharing\n\n  \n\nvar app =  express();\n\napp.use(cors()); // for all routes\n\n  \n\nvar port = process.env.PORT ||  8080;\n\n  \n\napp.get('/', function(req, res) {\n\nvar info = {\n\n'string_value': 'StackOverflow',\n\n  \n\n'number_value':}\n\nres.json(info);\n\n8476\n\n// or\n\n/* res.send(JSON.stringify({\n\nstring_value: 'StackOverflow',\n\nnumber_value: 8476\n\n})) */\n\n//you can add a status code to the json response\n\n/* res.status(200).json(info) */\n\n})\n\napp.listen(port, function() {\n\nconsole.log('Node.js listening on port '  + port)\n\n})\n\n</code></pre>\n<p>On <a href=\"http://localhost:8080/\">http://localhost:8080/</a> output object</p>\n<pre><code class=\"language-json\">\n{\n\nstring_value:&quot;StackOverflow&quot;,\n\nnumber_value:8476\n\n}\n\n</code></pre>\n<h3 id=\"section-3.6%3A-serving-static-files\">Section 3.6: Serving static files <a class=\"heading-anchor-permalink\" href=\"#section-3.6%3A-serving-static-files\">#</a></h3>\n<p>When building a webserver with Express it’s often required to serve a combination of dynamic content and static</p>\n<p>files.</p>\n<p>It is common to use folder named ‘public’ to have static files. In this case the folder structure may look like:</p>\n<pre><code class=\"language-bash\">\nproject root\n\n├── server.js\n\n├── package.json\n\n└── public\n\n├── index.html\n\n└── script.js\n\n</code></pre>\n<p>To configure Express to serve static files:</p>\n<pre><code class=\"language-js\">\napp.use(express.static('public'));\n\n</code></pre>\n<p>you must not specify /public/ in the url). This is because, express looks up for the files relative to the static folder configured. You can specify virtual path prefix as shown below:</p>\n<pre><code class=\"language-js\">\napp.use('/static', express.static('public'));\n\n</code></pre>\n<p>This will make the resources available under the <code>/static/</code> prefix.</p>\n<p>To define multiple folders at the same time:</p>\n<pre><code class=\"language-js\">\napp.use(express.static('public'));\n\napp.use(express.static('images'));\n\napp.use(express.static('files'));\n\n</code></pre>\n<blockquote>\n<p>Express will examine the folder in definition order. In case of files with the same name, the one in the first matching folder will be served.</p>\n</blockquote>\n<hr>\n<h3 id=\"section-3.7%3A-adding-middleware\">Section 3.7: Adding Middleware <a class=\"heading-anchor-permalink\" href=\"#section-3.7%3A-adding-middleware\">#</a></h3>\n<p>[x] add more about <code>middleware</code> functions</p>\n<p><strong>Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle.</strong></p>\n<h2 id=\"middleware-functions-can-execute-any-code%2C-make-changes-to-res-and-req-objects%2C-end-response-cycle-and-call-next-middleware.\">Middleware functions can execute any code, make changes to res and req objects, end response cycle and call next middleware. <a class=\"heading-anchor-permalink\" href=\"#middleware-functions-can-execute-any-code%2C-make-changes-to-res-and-req-objects%2C-end-response-cycle-and-call-next-middleware.\">#</a></h2>\n<h3 id=\"section-3.9%3A-getting-info-from-the-request\">Section 3.9: Getting info from the request <a class=\"heading-anchor-permalink\" href=\"#section-3.9%3A-getting-info-from-the-request\">#</a></h3>\n<p>To get info from the requesting url (notice that req is the request object in the handler function of routes).</p>\n<p>Consider this route definition <code>/settings/:user_id</code> and this particular example <code>/settings/32135?field=name</code></p>\n<pre><code class=\"language-js\">\n// get the full path\n\nreq.originalUrl // =&gt; /settings/32135?field=name\n\n  \n\n// get the user_id param\n\nreq.params.user_id // =&gt; 32135\n\n// get the query value of the field\nreq.query.field // =&gt; 'name'\n\n</code></pre>\n<p>You can also get headers of the request, like this</p>\n<pre><code class=\"language-js\">\nreq.get('Content-Type') // &quot;text/plain&quot;\n\n</code></pre>\n<p>To simplify getting other info you can use middlewares. For example, to get the body info of the request, you can use the body-parser middleware, which will transform raw request body into usable format.</p>\n<pre><code class=\"language-js\">\nvar app =  require('express')();\n\nvar bodyParser =  require('body-parser');\n\napp.use(bodyParser.json()); // for parsing application/json\n\napp.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded\n\n</code></pre>\n<p>Now suppose a request like this</p>\n<pre><code class=\"language-http\">\nPUT /settings/32135\n\n{\n\n&quot;name&quot;: &quot;Peter&quot;\n\n}\n\n</code></pre>\n<p>You can access the posted name like this</p>\n<pre><code class=\"language-js\">\nreq.body.name // &quot;Peter&quot;\n\n</code></pre>\n<p>In a similar way, you can access cookies from the request, you also need a middleware like cookie-parser</p>\n<pre><code class=\"language-js\">\nreq.cookies.name\n\n</code></pre>\n<h3 id=\"section-3.11%3A-hook%3A-how-to-execute-code-before-any-req-and-after-any-res\">Section 3.11: Hook: How to execute code before any <code>req</code> and after any <code>res</code> <a class=\"heading-anchor-permalink\" href=\"#section-3.11%3A-hook%3A-how-to-execute-code-before-any-req-and-after-any-res\">#</a></h3>\n<p>app.use() and middleware can be used for “before” and a combination of the close and finish events can be used for “after”.</p>\n<pre><code class=\"language-js\">app.use(function (req, res, next) {\nfunction  afterResponse() {\nres.removeListener('finish', afterResponse);\nres.removeListener('close', afterResponse);\n// actions after response\n}\nres.on('finish', afterResponse);\nres.on('close', afterResponse);\n// action before request\n// eventually calling 'next()'\nnext();\n});\napp.use(app.router);\n</code></pre>\n<blockquote>\n<p>Note: Just make sure this “middleware” is used before app.router as order does matter.</p>\n</blockquote>\n<hr>\n<h3 id=\"section-3.13%3A-custom-middleware-in-express\">Section 3.13: Custom middleware in Express <a class=\"heading-anchor-permalink\" href=\"#section-3.13%3A-custom-middleware-in-express\">#</a></h3>\n<p>In Express, you can define middlewares that can be used for checking requests or setting some headers in response.</p>\n<pre><code class=\"language-js\">app.use(function(req, res, next){ }); // signature\n</code></pre>\n<p>Example</p>\n<p>The following code adds user to the request object and pass the control to the next matching route.</p>\n<pre><code class=\"language-js\">var express =  require('express');\nvar app =  express();\n//each request will pass through it\napp.use(function(req, res, next){\nreq.user =  'testuser';\nnext(); // it will pass the control to next matching route\n});\napp.get('/', function(req, res){\nvar user = req.user;\nconsole.log(user); // testuser\nreturn res.send(user);\n});\napp.listen(3000);\n</code></pre>\n",
      "id": 39
    },
    {
      "path": "PHP/npm_quick_ref.md",
      "url": "PHP/npm_quick_ref.html",
      "content": "\n# NPM Quick Reference\n```bash\n\n$ which node # where installed\n\n/usr/bin/node\n\n$ node --version # check version\n\nv12.15.0\n\n$ node\n\n> console.log('Node is running');\n\nNode is running\n\n> .help\n\n.break Sometimes you get stuck, this gets you out\n\n.clear Alias for .break\n\n.editor Enter editor mode\n\n.exit Exit the repl\n\n.help Print this help message\n\n.load Load JS from a file into the REPL session\n\n.save Save all evaluated commands in this REPL session to a file\n\n  \n\nPress ^C to abort current expression, ^D to exit the repl\n\n```\n\n  \n\n> Node.js installation is OK, lets check `npm`\n\n  \n\n```bash\n\n$ which npm\n\n/usr/bin/npm\n\n$ npm --version\n\n6.13.7\n\n```\n\n  \n\n> For Node Package Manager, is a separate project from Node.js. It tends to be updated more frequently. You can check the latest available npm version on this <https://www.npmjs.com/package/npm.>\n\n> to be sure, update `npm`:\n\n  \n\n```bash\n\nnpm install -g npm@latest\n\n```\n\n  \n\n## Node Packaged Modules\n\n  \n\n- In `Local` mode Inside `node_modules` folder in your parent working directory. This location is owned by the current user. If you’re not using a [version manager] (such as nvm)\n\n  \n\n```bash\n\n$curl -o https://raw.githubusercontent.com/creationix nvm/v0.35.2/install.sh | bash\n\n```\n\n  \n\n> See <https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/]>which you probably should be)\n\n  \n\n> global packages are in `{prefix}/lib/node_modules/`, which is owned by root (where `{prefix}` is usually `/usr/` or `/usr/local`). This means you would have to use `sudo` to install packages globally, which could cause permission errors when resolving third-party dependencies, as well as being a security concern.\n\n  \n\n## Changing the Location of Global Packages\n\n  \n\nLet’s see what output `npm config` gives us:\n\n  \n\n```bash\n\n$ npm config list\n\n; cli configs\n\nmetrics-registry = \"https://registry.npmjs.org/\"\n\nscope = \"\"\n\nuser-agent = \"npm/6.13.7 node/v12.15.0 linux x64\"\n\n  \n\n; node bin location = /usr/bin/nodejs\n\n; cwd = /home/sitepoint\n\n; HOME = /home/sitepoint\n\n;  \"npm config ls -l\" to show all defaults.\n\n  \n\n```\n\n  \n\nThis gives us information about our install. For now, it’s important to get the current global location:\n\n  \n\n```bash\n\n$ npm config get prefix\n\n/usr\n\n  \n\n```\n\n  \n\nThis is the prefix we want to change, in order to install global packages in our home directory. To do that create a new directory in your home folder:\n\n  \n\n```bash\n\n$cd  ~  && mkdir .node_modules_global\n\n$ npm config set prefix=$HOME/.node_modules_global\n\n```\n\n  \n\nWith this simple configuration change, we’ve altered the location to which global Node packages are installed. This also creates a `.npmrc` file in our home directory:\n\n  \n\n```bash\n\n$ npm config get prefix\n\n/home/sitepoint/.node_modules_global\n\n$ cat .npmrc\n\nprefix=/home/sitepoint/.node_modules_global\n\n  \n\n```\n\n  \n\nWe still have npm installed in a location owned by root. But because we changed our global package location, we can take advantage of that. We need to install npm again, but this time in the new, user-owned location. This will also install the latest version of npm:\n\n  \n\n```bash\n\nnpm install npm@latest -g\n\n  \n\n```\n\n  \n\nFinally, we need to add `.node_modules_global/bin` to our `$PATH` environment variable, so that we can run global packages from the command line. Do this by appending the following line to your `.profile`, `.bash_profile`or `.bashrc` and restarting your terminal:\n\n  \n\n```bash\n\nexport PATH=\"$HOME/.node_modules_global/bin:$PATH\"\n\n  \n\n```\n\n  \n\nNow our `.node_modules_global/bin` will be found first and the correct version of npm will be used:\n\n  \n\n```bash\n\n$ which npm\n\n/home/sitepoint/.node_modules_global/bin/npm\n\n$ npm --version\n\n6.13.7\n\n  \n\n```\n\n  \n\n_Tip: you can avoid all of this if you use a Node version manager. Check out this tutorial to find out how: [Installing Multiple Versions of Node.js Using nvm](https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/)._\n\n  \n\n## Installing Packages in Global Mode\n\n  \n\nAt the moment, we only have one package installed globally — the npm package itself. So let’s change that and install [UglifyJS](https://www.npmjs.com/package/uglify-js) (a JavaScript minification tool). We use the `--global` flag, but this can be abbreviated to `-g`:\n\n  \n\n```bash\n\n$ npm install uglify-js --global\n\n/home/sitepoint/.node_modules_global/bin/uglifyjs -> /home/sitepoint/.node_modules_global/lib/node_modules/uglify-js/bin/uglifyjs\n\n+ uglify-js@3.7.7\n\nadded 3 packages from 38 contributors in 0.259s\n\n  \n\n```\n\n  \n\nAs you can see from the output, additional packages are installed. These are UglifyJS’s dependencies.\n\n  \n\n## Listing Global Packages\n\n  \n\nWe can list the global packages we’ve installed with the `npm list` command:\n\n  \n\n```bash\n\n$ npm list --global\n\nhome/sitepoint/.node_modules_global/lib\n\n├─┬ npm@6.9.0\n\n│ ├── abbrev@1.1.1\n\n│ ├── ansicolors@0.3.2\n\n│ ├── ansistyles@0.1.3\n\n│ ├── aproba@2.0.0\n\n│ ├── archy@1.0.0\n\n....................\n\n└─┬ uglify-js@3.5.3\n\n├── commander@2.19.0\n\n└── source-map@0.6.1\n\n  \n\n```\n\n  \n\nThe output, however, is rather verbose. We can change that with the `--depth=0` option:\n\n  \n\n```bash\n\n$ npm list -g --depth=0\n\n/home/sitepoint/.node_modules_global/lib\n\n├── npm@6.13.7\n\n└── uglify-js@3.7.7\n\n  \n\n```\n\n  \n\nThat’s better; now we see just the packages we’ve installed along with their version numbers.\n\n  \n\nAny packages installed globally will become available from the command line. For example, here’s how you would use the Uglify package to minify `example.js` into `example.min.js`:\n\n  \n\n```bash\n\n$uglifyjs example.js -o example.min.js\n\n```\n\n  \n\n## Installing Packages in Local Mode\n\n  \n\nWhen you install packages locally, you normally do so using a `package.json` file. Let’s go ahead and create one:\n\n  \n\n```bash\n\n$ mkdir project &&  cd project\n\n  \n\n$ npm init\n\npackage name: (project)\n\nversion: (1.0.0)\n\ndescription: Demo of package.json\n\nentry point: (index.js)\n\ntest command:\n\ngit repository:\n\nkeywords:\n\nauthor:\n\nlicense: (ISC)\n\n  \n\n```\n\n  \n\nPress Return to accept the defaults, then press it again to confirm your choices. This will create a `package.json` file at the root of the project:\n\n  \n\n```javascript\n\n{\n\n\"name\": \"project\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\n},\n\n\"author\": \"\",\n\n\"license\": \"ISC\"\n\n}\n\n  \n\n```\n\n  \n\n_Tip: If you want a quicker way to generate a `package.json` file use `npm init --y`._\n\n  \n\nThe fields are hopefully pretty self-explanatory, with the exception of `main` and `scripts`. The `main` field is the primary entry point to your program, and the `scripts` field lets you specify script commands that are run at various times in the life cycle of your package. We can leave these as they are for now, but if you’d like to find out more, see the [package.json documentation on npm](https://docs.npmjs.com/files/package.json) and this article on [using npm as a build tool](https://www.sitepoint.com/guide-to-npm-as-a-build-tool/).\n\n  \n\nNow let’s try and install [Underscore](http://underscorejs.org/):\n\n  \n\n```bash\n\n$ npm install underscore\n\nnpm notice created a lockfile as package-lock.json. You should commit this file.\n\nnpm WARN project@1.0.0 No repository field.\n\n  \n\n+ underscore@1.9.2\n\nadded 1 package from 1 contributor and audited 1 package in 0.412s\n\nfound 0 vulnerabilities\n\n  \n\n```\n\n  \n\n_Note that a lockfile is created. We’ll be coming back to this later._\n\n  \n\nNow if we have a look in `package.json`, we’ll see that a `dependencies` field has been added:\n\n  \n\n[Report Advertisement](https://www.sitepoint.com/beginners-guide-node-package-manager/#report-ad)\n\n  \n\n```javascript\n\n{\n\n...\n\n\"dependencies\": {\n\n\"underscore\": \"^1.9.2\"\n\n}\n\n}\n\n  \n\n```\n\n  \n\n## Managing Dependencies with package.json\n\n  \n\nAs you can see, Underscore v1.9.2 was installed in our project. The caret (`^`) at the front of the version number indicates that when installing, npm will pull in the highest version of the package it can find where only the major version has to match (unless a `package-lock.json` file is present). In our case, that would be anything below v2.0.0. This method of versioning dependencies (major.minor.patch) is known as **semantic versioning**. You can read more about it here: [Semantic Versioning: Why You Should Be Using it](https://www.sitepoint.com/semantic-versioning-why-you-should-using/).\n\n  \n\nAlso notice that Underscore was saved as a property of the `dependencies` field. This has become the default in the latest version of npm and is used for packages (like Underscore) required for the application to run. It would also be possible to save a package as a `devDependency` by specifying a `--save-dev` flag. `devDependencies` are packages used for development purposes — for example, for running tests or transpiling code.\n\n  \n\n_Tip: you can also add `private: true` to `package.json` to prevent accidental publication of private repositories, as well as suppressing any warnings generated when running `npm install`._\n\n  \n\nFar and away the biggest reason for using `package.json` to specify a project’s dependencies is portability. For example, when you clone someone else’s code, all you have to do is run `npm i` in the project root and npm will resolve and fetch all of the necessary packages for you to run the app. We’ll look at this in more detail later.\n\n  \n\nBefore finishing this section, let’s quickly check that Underscore is working. Create a file called `test.js` in the project root and add the following:\n\n  \n\n```javascript\n\nconst  _  =  require(\"underscore\");\n\nconsole.log(_.range(5));\n\n  \n\n```\n\n  \n\nRun the file using `node test.js` and you should see `[0, 1, 2, 3, 4]` output to the screen.\n\n  \n\n## Uninstalling Local Packages\n\n  \n\nnpm is a package manager, so it must be able to remove a package. Let’s assume that the current Underscore package is causing us compatibility problems. We can remove the package and install an older version, like so:\n\n  \n\n```bash\n\n$ npm uninstall underscore\n\nremoved 1 package in 0.386s\n\n  \n\n$ npm list\n\nproject@1.0.0 /home/sitepoint/project\n\n└── (empty)\n\n```\n\n  \n\n## Installing a Specific Version of a Package\n\n  \n\nWe can now install the Underscore package in the version we want. We do that by using the @ sign to append a version number:\n\n  \n\n```bash\n\n$ npm install underscore@1.9.1\n\n+ underscore@1.9.1\n\nadded 1 package in 1.574s\n\n  \n\n$ npm list\n\nproject@1.0.0 /home/sitepoint/project\n\n└── underscore@1.9.1\n\n  \n\n```\n\n  \n\n## Updating a Package\n\n  \n\nLet’s check if there’s an update for the Underscore package:\n\n  \n\n```bash\n\n$ npm outdated\n\nPackage Current Wanted Latest Location\n\nunderscore 1.9.1 1.9.2 1.9.2 project\n\n```\n\n  \n\nThe _Current_ column shows us the version that is installed locally. The _Latest_ column tells us the latest version of the package. And the _Wanted_ column tells us the latest version of the package we can upgrade to without breaking our existing code.\n\n  \n\nRemember the `package-lock.json` file from earlier? Introduced in npm v5, the purpose of this file is to ensure that the dependencies remain _exactly_ the same on all machines the project is installed on. It’s automatically generated for any operations where npm modifies either the `node_modules` folder or the `package.json` file.\n\n  \n\nYou can go ahead and try this out if you like. Delete the `node_modules` folder, then re-run `npm i` (this is short for `npm install`). npm will re-install Underscore v1.9.1, even though we just saw that v1.9.2 is available. This is because we specified version 1.9.1 in the `package-lock.json` file:\n\n  \n\n```javascript\n\n{\n\n\"name\": \"project\",\n\n\"version\": \"1.0.0\",\n\n\"lockfileVersion\": 1,\n\n\"requires\": true,\n\n\"dependencies\": {\n\n\"underscore\": {\n\n\"version\": \"1.9.1\",\n\n\"resolved\": \"https://registry.npmjs.org/underscore/-/underscore-1.9.1.tgz\",\n\n\"integrity\": \"sha512-5/4etnCkd9c8gwgowi5/om/mYO5ajCaOgdzj/oW+0eQV9WxKBDZw5+ycmKmeaTXjInS/W0BzpGLo2xR2aBwZdg==\"\n\n}\n\n}\n\n}\n\n  \n\n```\n\n  \n\nPrior to the emergence of the `package-lock.json` file, inconsistent package versions proved a big headache for developers. This was normally solved by using an `npm-shrinkwrap.json` file, which had to be manually created.\n\n  \n\nNow, let’s assume the latest version of Underscore fixed the bug we had earlier and we want to update our package to that version:\n\n  \n\n```bash\n\n$ npm update underscore\n\n+ underscore@1.9.2\n\nupdated 1 package in 0.236s\n\n  \n\n$ npm list\n\nproject@1.0.0 /home/sitepoint/project\n\n└── underscore@1.9.2\n\n  \n\n```\n\n  \n\n_Tip: for this to work, Underscore has to be listed as a dependency in `package.json`. We can also execute `npm update` if we have many outdated modules we want to update._\n\n  \n\n## Searching for Packages\n\n  \n\nWe’ve used the `mkdir` command a couple of times in this tutorial. Is there a Node package that has this functionality? Let’s use `npm search`:\n\n  \n\n```bash\n\n$ npm search mkdir\n\nNAME | DESCRIPTION | AUTHOR | DATE\n\nmkdir | Directory creation… | =joehewitt | 2012-04-17\n\nfs-extra | fs-extra contains… | =jprichardson… | 2019-06-28\n\nmkdirp | Recursively mkdir,… | =isaacs… | 2020-01-24\n\nmake-dir | Make a directory… | =sindresorhus | 2019-04-01\n\n...\n\n  \n\n```\n\n  \n\nThere’s ([mkdirp](https://www.npmjs.com/package/mkdirp)). Let’s install it:\n\n  \n\n```bash\n\n$ npm install mkdirp\n\n+ mkdirp@1.0.3\n\nadded 1 package and audited 2 packages in 0.384s\n\n  \n\n```\n\n  \n\nNow create a `mkdir.js` fie and copy–paste this code:\n\n  \n\n```javascript\n\nconst  mkdirp  =  require('mkdirp');\n\n  \n\nconst  made  =  mkdirp.sync('/tmp/foo/bar/baz');\n\nconsole.log(`made directories, starting with ${made}`);\n\n  \n\n```\n\n  \n\nNext, run it from the terminal:\n\n  \n\n```bash\n\n$ node mkdir.js\n\nmade directories, starting with /tmp/foo\n\n  \n\n```\n\n  \n\n## Re-installing Project Dependencies\n\n  \n\nLet’s first install one more package:\n\n  \n\n```bash\n\n$ npm install request\n\n+ request@2.88.0\n\nadded 48 packages from 59 contributors and audited 65 packages in 2.73s\n\nfound 0 vulnerabilities\n\n  \n\n```\n\n  \n\nCheck the `package.json`:\n\n  \n\n```javascript\n\n\"dependencies\": {\n\n\"mkdirp\": \"^1.0.3\",\n\n\"request\": \"^2.88.0\",\n\n\"underscore\": \"^1.9.2\"\n\n},\n\n  \n\n```\n\n  \n\nNote the dependencies list got updated automatically. If you wanted to install a package without saving it in `package.json`, just use the `--no-save` argument.\n\n  \n\nLet’s assume you’ve cloned your project source code to a another machine and we want to install the dependencies. Let’s delete the `node_modules` folder first, then execute `npm install`:\n\n  \n\n```bash\n\n$ rm -R node_modules\n\n$ npm list --depth=0\n\nproject@1.0.0 /home/sitepoint/project\n\n├── UNMET DEPENDENCY mkdirp@1.0.3\n\n├─┬ UNMET DEPENDENCY request@2.88.0\n\n...\n\n└── UNMET DEPENDENCY underscore@1.9.2\n\n  \n\nnpm ERR! missing: mkdirp@1.0.3, required by project@1.0.0\n\nnpm ERR! missing: request@2.88.0, required by project@1.0.0\n\nnpm ERR! missing: underscore@1.9.2, required by project@1.0.0\n\n...\n\n  \n\n$ npm install\n\nadded 50 packages from 60 contributors and audited 65 packages in 1.051s\n\nfound 0 vulnerabilities\n\n  \n\n```\n\n  \n\nIf you look at your `node_modules` folder, you’ll see that it gets recreated again. This way, you can easily share your code with others without bloating your project and source repositories with dependencies.\n\n  \n\n## Managing the Cache\n\n  \n\nWhen npm installs a package, it keeps a copy, so the next time you want to install that package, it doesn’t need to hit the network. The copies are cached in the `.npm` directory in your home path:\n\n  \n\n```bash\n\n$ ls ~/.npm\n\nanonymous-cli-metrics.json _cacache index-v5 _locks _logs node-sass\n\n  \n\n```\n\n  \n\nThis directory will get cluttered with old packages over time, so it’s useful to clean it up occasionally:\n\n  \n\n```bash\n\n$npm cache clean --force\n\n  \n\n```\n\n  \n\nYou can also purge all `node_module` folders from your workspace if you have multiple node projects on your system you want to clean up:\n\n  \n\n```bash\n\nfind . -name \"node_modules\" -type d -exec rm -rf '{}' +\n\n  \n\n```\n\n  \n\n## Audit\n\n  \n\nHave you noticed all of those `found 0 vulnerabilities` scattered throughout the CLI output? The reason for this is that a new feature was introduced in npm that allows developers to scan the dependencies for known security vulnerabilities.\n\n  \n\nLet’s try out this feature by installing an old version of `express`:\n\n  \n\n```bash\n\n$ npm install express@4.8.0\n\n  \n\nexpress@4.8.0\n\nadded 36 packages from 24 contributors and audited 123 packages in 2.224s\n\nfound 21 vulnerabilities (8 low, 9 moderate, 4 high)\n\nrun `npm audit fix` to fix them, or `npm audit`  for details\n\n  \n\n```\n\n  \n\nAs soon as we finish installing, we get a quick report that multiple vulnerabilities have been found. You can run the command `npm audit` to view more details:\n\n  \n\n```bash\n\n$ npm audit\n\n  \n\n=== npm audit security report ===\n\n  \n\n# Run npm install express@4.17.1 to resolve 21 vulnerabilities\n\n┌───────────────┬──────────────────────────────────────────────────────────────┐\n\n│ High │ Regular Expression Denial of Service │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Package │ negotiator │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Dependency of │ express │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Path │ express > accepts > negotiator │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ More info │ https://nodesecurity.io/advisories/106 │\n\n└───────────────┴──────────────────────────────────────────────────────────────┘\n\n  \n\n┌───────────────┬──────────────────────────────────────────────────────────────┐\n\n│ Moderate │ Timing Attack │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Package │ cookie-signature │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Dependency of │ express │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Path │ express > cookie-signature │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ More info │ https://nodesecurity.io/advisories/134 │\n\n└───────────────┴──────────────────────────────────────────────────────────────┘\n\n  \n\n```\n\n  \n\nYou’ll get a detailed list of packages that have vulnerabilities. If you look at the `Path` field, it shows the dependency path. For example, the Path `express > accepts > negotiator` means Express depends on the `Accepts` package. The `Accepts` package depends on the the `negotiator` package, which contains the vulnerability.\n\n  \n\nThere are two ways of fixing all these problems. We can either execute the command `npm install express@4.17.1` as suggested, or run `npm audit fix`. Let’s do the latter:\n\n  \n\n```bash\n\n$ npm audit fix\n\n  \n\n+ express@4.17.1\n\nadded 20 packages from 14 contributors, removed 7 packages and updated 29 packages in 1.382s\n\nfixed 21 of 21 vulnerabilities in 122 scanned packages\n\n  \n\n```\n\n  \n\nThe command `npm audit fix` automatically installs any compatible updates to vulnerable dependencies. While this might seem like magic, do note that vulnerabilities can’t always be fixed automatically. This could happen if you’re using a package that’s undergone a major change which could break your current project if updated. For situations such as this, you’ll have to review your code and manually apply the fix.\n\n  \n\nYou can also run `npm audit fix --force` if you don’t mind upgrading packages with breaking changes. After you’ve executed the command, run `npm audit` to ensure that all vulnerabilities have been resolved.\n\n  \n\n## Aliases\n\n  \n\nAs you may have noticed, there are multiple ways of running npm commands. Here’s a brief list of some of the commonly used npm aliases:\n\n  \n\n-  `npm i <package>`: install local package\n\n-  `npm i -g <package>`: install global package\n\n-  `npm un <package>`: uninstall local package\n\n-  `npm up`: npm update packages\n\n-  `npm t`: run tests\n\n-  `npm ls`: list installed modules\n\n-  `npm ll` or `npm la`: print additional package information while listing modules\n\n  \n\nYou can also install multiple packages at once like this:\n\n  \n\n```bash\n\n$npm i express momemt lodash mongoose body-parser webpack\n\n  \n\n```\n\n  \n\nIf you want to view all the common npm commands, just execute `npm help` for the full list. You can also learn more in our article [10 Tips and Tricks That Will Make You an npm Ninja](https://www.sitepoint.com/10-npm-tips-and-tricks/).\n\n  \n\n## npx\n\n  \n\nYou might also hear talk of npx on your travels. Don’t confuse this with npm. As we’ve learned, npm is a tool for _managing_ your packages, whereas npx is a tool for _executing_ packages. It comes bundled with npm version 5.2+.\n\n  \n\nA typical use of npx is for executing one-off commands. For example, imagine you wanted to spin up a simple HTTP server. You _could_ install the [http-server package](https://www.npmjs.com/package/http-server) globally on your system, which is great if you’ll be using `http-server` on a regular basis. But if you just want to test the package, or would like to keep your globally installed modules to a minimum, you can change into the directory where you’d like to run it, then execute the following command:\n\n  \n\n```bash\n\nnpx http-server\n\n  \n\n```\n\n  \n\nAnd this will spin up the server without installing anything globally.\n\n  \n\nYou can [read more about npx here](https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner).\n\n  \n\n## Conclusion\n\n  \n\nIn this tutorial, we’ve covered the basics of working with npm. We’ve demonstrated how to install Node.js from the project’s download page, how to alter the location of global packages (so we can avoid using `sudo`), and how to install packages in local and global mode. We also covered deleting, updating and installing a certain version of a package, as well as managing a project’s dependencies.\n \n\nWith every new release, npm is making huge strides into the world of front-end development. [According to its co-founder](http://frontendhappyhour.com/episodes/npm-install-beer-save-in-mouth/), its user base is changing and most of those using it are not using it to write Node at all. Rather, it’s becoming a tool that people use to put JavaScript together on the front end (seriously, you can use it to install just about anything) and one which is becoming an integral part of writing modern JavaScript.\n \n\nAre you using npm in your projects? If not, now might be a good time to start.",
      "html": "<h1 id=\"npm-quick-reference\">NPM Quick Reference <a class=\"heading-anchor-permalink\" href=\"#npm-quick-reference\">#</a></h1>\n<pre><code class=\"language-bash\">\n$ which node # where installed\n\n/usr/bin/node\n\n$ node --version # check version\n\nv12.15.0\n\n$ node\n\n&gt; console.log('Node is running');\n\nNode is running\n\n&gt; .help\n\n.break Sometimes you get stuck, this gets you out\n\n.clear Alias for .break\n\n.editor Enter editor mode\n\n.exit Exit the repl\n\n.help Print this help message\n\n.load Load JS from a file into the REPL session\n\n.save Save all evaluated commands in this REPL session to a file\n\n  \n\nPress ^C to abort current expression, ^D to exit the repl\n\n</code></pre>\n<blockquote>\n<p>Node.js installation is OK, lets check <code>npm</code></p>\n</blockquote>\n<pre><code class=\"language-bash\">\n$ which npm\n\n/usr/bin/npm\n\n$ npm --version\n\n6.13.7\n\n</code></pre>\n<blockquote>\n<p>For Node Package Manager, is a separate project from Node.js. It tends to be updated more frequently. You can check the latest available npm version on this <a href=\"https://www.npmjs.com/package/npm.\">https://www.npmjs.com/package/npm.</a></p>\n</blockquote>\n<blockquote>\n<p>to be sure, update <code>npm</code>:</p>\n</blockquote>\n<pre><code class=\"language-bash\">\nnpm install -g npm@latest\n\n</code></pre>\n<h2 id=\"node-packaged-modules\">Node Packaged Modules <a class=\"heading-anchor-permalink\" href=\"#node-packaged-modules\">#</a></h2>\n<ul>\n<li>In <code>Local</code> mode Inside <code>node_modules</code> folder in your parent working directory. This location is owned by the current user. If you’re not using a [version manager] (such as nvm)</li>\n</ul>\n<pre><code class=\"language-bash\">\n$curl -o https://raw.githubusercontent.com/creationix nvm/v0.35.2/install.sh | bash\n\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/%5D\">https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/]</a>which you probably should be)</p>\n</blockquote>\n<blockquote>\n<p>global packages are in <code>{prefix}/lib/node_modules/</code>, which is owned by root (where <code>{prefix}</code> is usually <code>/usr/</code> or <code>/usr/local</code>). This means you would have to use <code>sudo</code> to install packages globally, which could cause permission errors when resolving third-party dependencies, as well as being a security concern.</p>\n</blockquote>\n<h2 id=\"changing-the-location-of-global-packages\">Changing the Location of Global Packages <a class=\"heading-anchor-permalink\" href=\"#changing-the-location-of-global-packages\">#</a></h2>\n<p>Let’s see what output <code>npm config</code> gives us:</p>\n<pre><code class=\"language-bash\">\n$ npm config list\n\n; cli configs\n\nmetrics-registry = &quot;https://registry.npmjs.org/&quot;\n\nscope = &quot;&quot;\n\nuser-agent = &quot;npm/6.13.7 node/v12.15.0 linux x64&quot;\n\n  \n\n; node bin location = /usr/bin/nodejs\n\n; cwd = /home/sitepoint\n\n; HOME = /home/sitepoint\n\n;  &quot;npm config ls -l&quot; to show all defaults.\n\n  \n\n</code></pre>\n<p>This gives us information about our install. For now, it’s important to get the current global location:</p>\n<pre><code class=\"language-bash\">\n$ npm config get prefix\n\n/usr\n\n  \n\n</code></pre>\n<p>This is the prefix we want to change, in order to install global packages in our home directory. To do that create a new directory in your home folder:</p>\n<pre><code class=\"language-bash\">\n$cd  ~  &amp;&amp; mkdir .node_modules_global\n\n$ npm config set prefix=$HOME/.node_modules_global\n\n</code></pre>\n<p>With this simple configuration change, we’ve altered the location to which global Node packages are installed. This also creates a <code>.npmrc</code> file in our home directory:</p>\n<pre><code class=\"language-bash\">\n$ npm config get prefix\n\n/home/sitepoint/.node_modules_global\n\n$ cat .npmrc\n\nprefix=/home/sitepoint/.node_modules_global\n\n  \n\n</code></pre>\n<p>We still have npm installed in a location owned by root. But because we changed our global package location, we can take advantage of that. We need to install npm again, but this time in the new, user-owned location. This will also install the latest version of npm:</p>\n<pre><code class=\"language-bash\">\nnpm install npm@latest -g\n\n  \n\n</code></pre>\n<p>Finally, we need to add <code>.node_modules_global/bin</code> to our <code>$PATH</code> environment variable, so that we can run global packages from the command line. Do this by appending the following line to your <code>.profile</code>, <code>.bash_profile</code>or <code>.bashrc</code> and restarting your terminal:</p>\n<pre><code class=\"language-bash\">\nexport PATH=&quot;$HOME/.node_modules_global/bin:$PATH&quot;\n\n  \n\n</code></pre>\n<p>Now our <code>.node_modules_global/bin</code> will be found first and the correct version of npm will be used:</p>\n<pre><code class=\"language-bash\">\n$ which npm\n\n/home/sitepoint/.node_modules_global/bin/npm\n\n$ npm --version\n\n6.13.7\n\n  \n\n</code></pre>\n<p><em>Tip: you can avoid all of this if you use a Node version manager. Check out this tutorial to find out how: <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">Installing Multiple Versions of Node.js Using nvm</a>.</em></p>\n<h2 id=\"installing-packages-in-global-mode\">Installing Packages in Global Mode <a class=\"heading-anchor-permalink\" href=\"#installing-packages-in-global-mode\">#</a></h2>\n<p>At the moment, we only have one package installed globally — the npm package itself. So let’s change that and install <a href=\"https://www.npmjs.com/package/uglify-js\">UglifyJS</a> (a JavaScript minification tool). We use the <code>--global</code> flag, but this can be abbreviated to <code>-g</code>:</p>\n<pre><code class=\"language-bash\">\n$ npm install uglify-js --global\n\n/home/sitepoint/.node_modules_global/bin/uglifyjs -&gt; /home/sitepoint/.node_modules_global/lib/node_modules/uglify-js/bin/uglifyjs\n\n+ uglify-js@3.7.7\n\nadded 3 packages from 38 contributors in 0.259s\n\n  \n\n</code></pre>\n<p>As you can see from the output, additional packages are installed. These are UglifyJS’s dependencies.</p>\n<h2 id=\"listing-global-packages\">Listing Global Packages <a class=\"heading-anchor-permalink\" href=\"#listing-global-packages\">#</a></h2>\n<p>We can list the global packages we’ve installed with the <code>npm list</code> command:</p>\n<pre><code class=\"language-bash\">\n$ npm list --global\n\nhome/sitepoint/.node_modules_global/lib\n\n├─┬ npm@6.9.0\n\n│ ├── abbrev@1.1.1\n\n│ ├── ansicolors@0.3.2\n\n│ ├── ansistyles@0.1.3\n\n│ ├── aproba@2.0.0\n\n│ ├── archy@1.0.0\n\n....................\n\n└─┬ uglify-js@3.5.3\n\n├── commander@2.19.0\n\n└── source-map@0.6.1\n\n  \n\n</code></pre>\n<p>The output, however, is rather verbose. We can change that with the <code>--depth=0</code> option:</p>\n<pre><code class=\"language-bash\">\n$ npm list -g --depth=0\n\n/home/sitepoint/.node_modules_global/lib\n\n├── npm@6.13.7\n\n└── uglify-js@3.7.7\n\n  \n\n</code></pre>\n<p>That’s better; now we see just the packages we’ve installed along with their version numbers.</p>\n<p>Any packages installed globally will become available from the command line. For example, here’s how you would use the Uglify package to minify <code>example.js</code> into <code>example.min.js</code>:</p>\n<pre><code class=\"language-bash\">\n$uglifyjs example.js -o example.min.js\n\n</code></pre>\n<h2 id=\"installing-packages-in-local-mode\">Installing Packages in Local Mode <a class=\"heading-anchor-permalink\" href=\"#installing-packages-in-local-mode\">#</a></h2>\n<p>When you install packages locally, you normally do so using a <code>package.json</code> file. Let’s go ahead and create one:</p>\n<pre><code class=\"language-bash\">\n$ mkdir project &amp;&amp;  cd project\n\n  \n\n$ npm init\n\npackage name: (project)\n\nversion: (1.0.0)\n\ndescription: Demo of package.json\n\nentry point: (index.js)\n\ntest command:\n\ngit repository:\n\nkeywords:\n\nauthor:\n\nlicense: (ISC)\n\n  \n\n</code></pre>\n<p>Press Return to accept the defaults, then press it again to confirm your choices. This will create a <code>package.json</code> file at the root of the project:</p>\n<pre><code class=\"language-javascript\">\n{\n\n&quot;name&quot;: &quot;project&quot;,\n\n&quot;version&quot;: &quot;1.0.0&quot;,\n\n&quot;description&quot;: &quot;&quot;,\n\n&quot;main&quot;: &quot;index.js&quot;,\n\n&quot;scripts&quot;: {\n\n&quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n\n},\n\n&quot;author&quot;: &quot;&quot;,\n\n&quot;license&quot;: &quot;ISC&quot;\n\n}\n\n  \n\n</code></pre>\n<p><em>Tip: If you want a quicker way to generate a <code>package.json</code> file use <code>npm init --y</code>.</em></p>\n<p>The fields are hopefully pretty self-explanatory, with the exception of <code>main</code> and <code>scripts</code>. The <code>main</code> field is the primary entry point to your program, and the <code>scripts</code> field lets you specify script commands that are run at various times in the life cycle of your package. We can leave these as they are for now, but if you’d like to find out more, see the <a href=\"https://docs.npmjs.com/files/package.json\">package.json documentation on npm</a> and this article on <a href=\"https://www.sitepoint.com/guide-to-npm-as-a-build-tool/\">using npm as a build tool</a>.</p>\n<p>Now let’s try and install <a href=\"http://underscorejs.org/\">Underscore</a>:</p>\n<pre><code class=\"language-bash\">\n$ npm install underscore\n\nnpm notice created a lockfile as package-lock.json. You should commit this file.\n\nnpm WARN project@1.0.0 No repository field.\n\n  \n\n+ underscore@1.9.2\n\nadded 1 package from 1 contributor and audited 1 package in 0.412s\n\nfound 0 vulnerabilities\n\n  \n\n</code></pre>\n<p><em>Note that a lockfile is created. We’ll be coming back to this later.</em></p>\n<p>Now if we have a look in <code>package.json</code>, we’ll see that a <code>dependencies</code> field has been added:</p>\n<p><a href=\"https://www.sitepoint.com/beginners-guide-node-package-manager/#report-ad\">Report Advertisement</a></p>\n<pre><code class=\"language-javascript\">\n{\n\n...\n\n&quot;dependencies&quot;: {\n\n&quot;underscore&quot;: &quot;^1.9.2&quot;\n\n}\n\n}\n\n  \n\n</code></pre>\n<h2 id=\"managing-dependencies-with-package.json\">Managing Dependencies with package.json <a class=\"heading-anchor-permalink\" href=\"#managing-dependencies-with-package.json\">#</a></h2>\n<p>As you can see, Underscore v1.9.2 was installed in our project. The caret (<code>^</code>) at the front of the version number indicates that when installing, npm will pull in the highest version of the package it can find where only the major version has to match (unless a <code>package-lock.json</code> file is present). In our case, that would be anything below v2.0.0. This method of versioning dependencies (major.minor.patch) is known as <strong>semantic versioning</strong>. You can read more about it here: <a href=\"https://www.sitepoint.com/semantic-versioning-why-you-should-using/\">Semantic Versioning: Why You Should Be Using it</a>.</p>\n<p>Also notice that Underscore was saved as a property of the <code>dependencies</code> field. This has become the default in the latest version of npm and is used for packages (like Underscore) required for the application to run. It would also be possible to save a package as a <code>devDependency</code> by specifying a <code>--save-dev</code> flag. <code>devDependencies</code> are packages used for development purposes — for example, for running tests or transpiling code.</p>\n<p><em>Tip: you can also add <code>private: true</code> to <code>package.json</code> to prevent accidental publication of private repositories, as well as suppressing any warnings generated when running <code>npm install</code>.</em></p>\n<p>Far and away the biggest reason for using <code>package.json</code> to specify a project’s dependencies is portability. For example, when you clone someone else’s code, all you have to do is run <code>npm i</code> in the project root and npm will resolve and fetch all of the necessary packages for you to run the app. We’ll look at this in more detail later.</p>\n<p>Before finishing this section, let’s quickly check that Underscore is working. Create a file called <code>test.js</code> in the project root and add the following:</p>\n<pre><code class=\"language-javascript\">\nconst  _  =  require(&quot;underscore&quot;);\n\nconsole.log(_.range(5));\n\n  \n\n</code></pre>\n<p>Run the file using <code>node test.js</code> and you should see <code>[0, 1, 2, 3, 4]</code> output to the screen.</p>\n<h2 id=\"uninstalling-local-packages\">Uninstalling Local Packages <a class=\"heading-anchor-permalink\" href=\"#uninstalling-local-packages\">#</a></h2>\n<p>npm is a package manager, so it must be able to remove a package. Let’s assume that the current Underscore package is causing us compatibility problems. We can remove the package and install an older version, like so:</p>\n<pre><code class=\"language-bash\">\n$ npm uninstall underscore\n\nremoved 1 package in 0.386s\n\n  \n\n$ npm list\n\nproject@1.0.0 /home/sitepoint/project\n\n└── (empty)\n\n</code></pre>\n<h2 id=\"installing-a-specific-version-of-a-package\">Installing a Specific Version of a Package <a class=\"heading-anchor-permalink\" href=\"#installing-a-specific-version-of-a-package\">#</a></h2>\n<p>We can now install the Underscore package in the version we want. We do that by using the @ sign to append a version number:</p>\n<pre><code class=\"language-bash\">\n$ npm install underscore@1.9.1\n\n+ underscore@1.9.1\n\nadded 1 package in 1.574s\n\n  \n\n$ npm list\n\nproject@1.0.0 /home/sitepoint/project\n\n└── underscore@1.9.1\n\n  \n\n</code></pre>\n<h2 id=\"updating-a-package\">Updating a Package <a class=\"heading-anchor-permalink\" href=\"#updating-a-package\">#</a></h2>\n<p>Let’s check if there’s an update for the Underscore package:</p>\n<pre><code class=\"language-bash\">\n$ npm outdated\n\nPackage Current Wanted Latest Location\n\nunderscore 1.9.1 1.9.2 1.9.2 project\n\n</code></pre>\n<p>The <em>Current</em> column shows us the version that is installed locally. The <em>Latest</em> column tells us the latest version of the package. And the <em>Wanted</em> column tells us the latest version of the package we can upgrade to without breaking our existing code.</p>\n<p>Remember the <code>package-lock.json</code> file from earlier? Introduced in npm v5, the purpose of this file is to ensure that the dependencies remain <em>exactly</em> the same on all machines the project is installed on. It’s automatically generated for any operations where npm modifies either the <code>node_modules</code> folder or the <code>package.json</code> file.</p>\n<p>You can go ahead and try this out if you like. Delete the <code>node_modules</code> folder, then re-run <code>npm i</code> (this is short for <code>npm install</code>). npm will re-install Underscore v1.9.1, even though we just saw that v1.9.2 is available. This is because we specified version 1.9.1 in the <code>package-lock.json</code> file:</p>\n<pre><code class=\"language-javascript\">\n{\n\n&quot;name&quot;: &quot;project&quot;,\n\n&quot;version&quot;: &quot;1.0.0&quot;,\n\n&quot;lockfileVersion&quot;: 1,\n\n&quot;requires&quot;: true,\n\n&quot;dependencies&quot;: {\n\n&quot;underscore&quot;: {\n\n&quot;version&quot;: &quot;1.9.1&quot;,\n\n&quot;resolved&quot;: &quot;https://registry.npmjs.org/underscore/-/underscore-1.9.1.tgz&quot;,\n\n&quot;integrity&quot;: &quot;sha512-5/4etnCkd9c8gwgowi5/om/mYO5ajCaOgdzj/oW+0eQV9WxKBDZw5+ycmKmeaTXjInS/W0BzpGLo2xR2aBwZdg==&quot;\n\n}\n\n}\n\n}\n\n  \n\n</code></pre>\n<p>Prior to the emergence of the <code>package-lock.json</code> file, inconsistent package versions proved a big headache for developers. This was normally solved by using an <code>npm-shrinkwrap.json</code> file, which had to be manually created.</p>\n<p>Now, let’s assume the latest version of Underscore fixed the bug we had earlier and we want to update our package to that version:</p>\n<pre><code class=\"language-bash\">\n$ npm update underscore\n\n+ underscore@1.9.2\n\nupdated 1 package in 0.236s\n\n  \n\n$ npm list\n\nproject@1.0.0 /home/sitepoint/project\n\n└── underscore@1.9.2\n\n  \n\n</code></pre>\n<p><em>Tip: for this to work, Underscore has to be listed as a dependency in <code>package.json</code>. We can also execute <code>npm update</code> if we have many outdated modules we want to update.</em></p>\n<h2 id=\"searching-for-packages\">Searching for Packages <a class=\"heading-anchor-permalink\" href=\"#searching-for-packages\">#</a></h2>\n<p>We’ve used the <code>mkdir</code> command a couple of times in this tutorial. Is there a Node package that has this functionality? Let’s use <code>npm search</code>:</p>\n<pre><code class=\"language-bash\">\n$ npm search mkdir\n\nNAME | DESCRIPTION | AUTHOR | DATE\n\nmkdir | Directory creation… | =joehewitt | 2012-04-17\n\nfs-extra | fs-extra contains… | =jprichardson… | 2019-06-28\n\nmkdirp | Recursively mkdir,… | =isaacs… | 2020-01-24\n\nmake-dir | Make a directory… | =sindresorhus | 2019-04-01\n\n...\n\n  \n\n</code></pre>\n<p>There’s (<a href=\"https://www.npmjs.com/package/mkdirp\">mkdirp</a>). Let’s install it:</p>\n<pre><code class=\"language-bash\">\n$ npm install mkdirp\n\n+ mkdirp@1.0.3\n\nadded 1 package and audited 2 packages in 0.384s\n\n  \n\n</code></pre>\n<p>Now create a <code>mkdir.js</code> fie and copy–paste this code:</p>\n<pre><code class=\"language-javascript\">\nconst  mkdirp  =  require('mkdirp');\n\n  \n\nconst  made  =  mkdirp.sync('/tmp/foo/bar/baz');\n\nconsole.log(`made directories, starting with ${made}`);\n\n  \n\n</code></pre>\n<p>Next, run it from the terminal:</p>\n<pre><code class=\"language-bash\">\n$ node mkdir.js\n\nmade directories, starting with /tmp/foo\n\n  \n\n</code></pre>\n<h2 id=\"re-installing-project-dependencies\">Re-installing Project Dependencies <a class=\"heading-anchor-permalink\" href=\"#re-installing-project-dependencies\">#</a></h2>\n<p>Let’s first install one more package:</p>\n<pre><code class=\"language-bash\">\n$ npm install request\n\n+ request@2.88.0\n\nadded 48 packages from 59 contributors and audited 65 packages in 2.73s\n\nfound 0 vulnerabilities\n\n  \n\n</code></pre>\n<p>Check the <code>package.json</code>:</p>\n<pre><code class=\"language-javascript\">\n&quot;dependencies&quot;: {\n\n&quot;mkdirp&quot;: &quot;^1.0.3&quot;,\n\n&quot;request&quot;: &quot;^2.88.0&quot;,\n\n&quot;underscore&quot;: &quot;^1.9.2&quot;\n\n},\n\n  \n\n</code></pre>\n<p>Note the dependencies list got updated automatically. If you wanted to install a package without saving it in <code>package.json</code>, just use the <code>--no-save</code> argument.</p>\n<p>Let’s assume you’ve cloned your project source code to a another machine and we want to install the dependencies. Let’s delete the <code>node_modules</code> folder first, then execute <code>npm install</code>:</p>\n<pre><code class=\"language-bash\">\n$ rm -R node_modules\n\n$ npm list --depth=0\n\nproject@1.0.0 /home/sitepoint/project\n\n├── UNMET DEPENDENCY mkdirp@1.0.3\n\n├─┬ UNMET DEPENDENCY request@2.88.0\n\n...\n\n└── UNMET DEPENDENCY underscore@1.9.2\n\n  \n\nnpm ERR! missing: mkdirp@1.0.3, required by project@1.0.0\n\nnpm ERR! missing: request@2.88.0, required by project@1.0.0\n\nnpm ERR! missing: underscore@1.9.2, required by project@1.0.0\n\n...\n\n  \n\n$ npm install\n\nadded 50 packages from 60 contributors and audited 65 packages in 1.051s\n\nfound 0 vulnerabilities\n\n  \n\n</code></pre>\n<p>If you look at your <code>node_modules</code> folder, you’ll see that it gets recreated again. This way, you can easily share your code with others without bloating your project and source repositories with dependencies.</p>\n<h2 id=\"managing-the-cache\">Managing the Cache <a class=\"heading-anchor-permalink\" href=\"#managing-the-cache\">#</a></h2>\n<p>When npm installs a package, it keeps a copy, so the next time you want to install that package, it doesn’t need to hit the network. The copies are cached in the <code>.npm</code> directory in your home path:</p>\n<pre><code class=\"language-bash\">\n$ ls ~/.npm\n\nanonymous-cli-metrics.json _cacache index-v5 _locks _logs node-sass\n\n  \n\n</code></pre>\n<p>This directory will get cluttered with old packages over time, so it’s useful to clean it up occasionally:</p>\n<pre><code class=\"language-bash\">\n$npm cache clean --force\n\n  \n\n</code></pre>\n<p>You can also purge all <code>node_module</code> folders from your workspace if you have multiple node projects on your system you want to clean up:</p>\n<pre><code class=\"language-bash\">\nfind . -name &quot;node_modules&quot; -type d -exec rm -rf '{}' +\n\n  \n\n</code></pre>\n<h2 id=\"audit\">Audit <a class=\"heading-anchor-permalink\" href=\"#audit\">#</a></h2>\n<p>Have you noticed all of those <code>found 0 vulnerabilities</code> scattered throughout the CLI output? The reason for this is that a new feature was introduced in npm that allows developers to scan the dependencies for known security vulnerabilities.</p>\n<p>Let’s try out this feature by installing an old version of <code>express</code>:</p>\n<pre><code class=\"language-bash\">\n$ npm install express@4.8.0\n\n  \n\nexpress@4.8.0\n\nadded 36 packages from 24 contributors and audited 123 packages in 2.224s\n\nfound 21 vulnerabilities (8 low, 9 moderate, 4 high)\n\nrun `npm audit fix` to fix them, or `npm audit`  for details\n\n  \n\n</code></pre>\n<p>As soon as we finish installing, we get a quick report that multiple vulnerabilities have been found. You can run the command <code>npm audit</code> to view more details:</p>\n<pre><code class=\"language-bash\">\n$ npm audit\n\n  \n\n=== npm audit security report ===\n\n  \n\n# Run npm install express@4.17.1 to resolve 21 vulnerabilities\n\n┌───────────────┬──────────────────────────────────────────────────────────────┐\n\n│ High │ Regular Expression Denial of Service │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Package │ negotiator │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Dependency of │ express │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Path │ express &gt; accepts &gt; negotiator │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ More info │ https://nodesecurity.io/advisories/106 │\n\n└───────────────┴──────────────────────────────────────────────────────────────┘\n\n  \n\n┌───────────────┬──────────────────────────────────────────────────────────────┐\n\n│ Moderate │ Timing Attack │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Package │ cookie-signature │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Dependency of │ express │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ Path │ express &gt; cookie-signature │\n\n├───────────────┼──────────────────────────────────────────────────────────────┤\n\n│ More info │ https://nodesecurity.io/advisories/134 │\n\n└───────────────┴──────────────────────────────────────────────────────────────┘\n\n  \n\n</code></pre>\n<p>You’ll get a detailed list of packages that have vulnerabilities. If you look at the <code>Path</code> field, it shows the dependency path. For example, the Path <code>express &gt; accepts &gt; negotiator</code> means Express depends on the <code>Accepts</code> package. The <code>Accepts</code> package depends on the the <code>negotiator</code> package, which contains the vulnerability.</p>\n<p>There are two ways of fixing all these problems. We can either execute the command <code>npm install express@4.17.1</code> as suggested, or run <code>npm audit fix</code>. Let’s do the latter:</p>\n<pre><code class=\"language-bash\">\n$ npm audit fix\n\n  \n\n+ express@4.17.1\n\nadded 20 packages from 14 contributors, removed 7 packages and updated 29 packages in 1.382s\n\nfixed 21 of 21 vulnerabilities in 122 scanned packages\n\n  \n\n</code></pre>\n<p>The command <code>npm audit fix</code> automatically installs any compatible updates to vulnerable dependencies. While this might seem like magic, do note that vulnerabilities can’t always be fixed automatically. This could happen if you’re using a package that’s undergone a major change which could break your current project if updated. For situations such as this, you’ll have to review your code and manually apply the fix.</p>\n<p>You can also run <code>npm audit fix --force</code> if you don’t mind upgrading packages with breaking changes. After you’ve executed the command, run <code>npm audit</code> to ensure that all vulnerabilities have been resolved.</p>\n<h2 id=\"aliases\">Aliases <a class=\"heading-anchor-permalink\" href=\"#aliases\">#</a></h2>\n<p>As you may have noticed, there are multiple ways of running npm commands. Here’s a brief list of some of the commonly used npm aliases:</p>\n<ul>\n<li>\n<p><code>npm i &lt;package&gt;</code>: install local package</p>\n</li>\n<li>\n<p><code>npm i -g &lt;package&gt;</code>: install global package</p>\n</li>\n<li>\n<p><code>npm un &lt;package&gt;</code>: uninstall local package</p>\n</li>\n<li>\n<p><code>npm up</code>: npm update packages</p>\n</li>\n<li>\n<p><code>npm t</code>: run tests</p>\n</li>\n<li>\n<p><code>npm ls</code>: list installed modules</p>\n</li>\n<li>\n<p><code>npm ll</code> or <code>npm la</code>: print additional package information while listing modules</p>\n</li>\n</ul>\n<p>You can also install multiple packages at once like this:</p>\n<pre><code class=\"language-bash\">\n$npm i express momemt lodash mongoose body-parser webpack\n\n  \n\n</code></pre>\n<p>If you want to view all the common npm commands, just execute <code>npm help</code> for the full list. You can also learn more in our article <a href=\"https://www.sitepoint.com/10-npm-tips-and-tricks/\">10 Tips and Tricks That Will Make You an npm Ninja</a>.</p>\n<h2 id=\"npx\">npx <a class=\"heading-anchor-permalink\" href=\"#npx\">#</a></h2>\n<p>You might also hear talk of npx on your travels. Don’t confuse this with npm. As we’ve learned, npm is a tool for <em>managing</em> your packages, whereas npx is a tool for <em>executing</em> packages. It comes bundled with npm version 5.2+.</p>\n<p>A typical use of npx is for executing one-off commands. For example, imagine you wanted to spin up a simple HTTP server. You <em>could</em> install the <a href=\"https://www.npmjs.com/package/http-server\">http-server package</a> globally on your system, which is great if you’ll be using <code>http-server</code> on a regular basis. But if you just want to test the package, or would like to keep your globally installed modules to a minimum, you can change into the directory where you’d like to run it, then execute the following command:</p>\n<pre><code class=\"language-bash\">\nnpx http-server\n\n  \n\n</code></pre>\n<p>And this will spin up the server without installing anything globally.</p>\n<p>You can <a href=\"https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner\">read more about npx here</a>.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"heading-anchor-permalink\" href=\"#conclusion\">#</a></h2>\n<p>In this tutorial, we’ve covered the basics of working with npm. We’ve demonstrated how to install Node.js from the project’s download page, how to alter the location of global packages (so we can avoid using <code>sudo</code>), and how to install packages in local and global mode. We also covered deleting, updating and installing a certain version of a package, as well as managing a project’s dependencies.</p>\n<p>With every new release, npm is making huge strides into the world of front-end development. <a href=\"http://frontendhappyhour.com/episodes/npm-install-beer-save-in-mouth/\">According to its co-founder</a>, its user base is changing and most of those using it are not using it to write Node at all. Rather, it’s becoming a tool that people use to put JavaScript together on the front end (seriously, you can use it to install just about anything) and one which is becoming an integral part of writing modern JavaScript.</p>\n<p>Are you using npm in your projects? If not, now might be a good time to start.</p>\n",
      "id": 40
    },
    {
      "path": "PHP/pandoc_quick_ref.md",
      "url": "PHP/pandoc_quick_ref.html",
      "content": "Official Site: https://pandoc.org\n\n## Using pandoc:\n\n-   If no `input-files` are specified, input is read from stdin. Output goes to stdout by default:\n\n```\npandoc -o output.html input.txt #use -o option for output to file.\n```\n\n> Example:\n\n-   **input.txt file**:\n\n```\n# H1 title\n## h2 title\n\n- item 1\n - item 1.1\n-item 1\n\n`var a=Math.floor(33.33);`\n```\n\n-   if:\n\n```\n$ pandoc -o output.html input.txt\n$ cat output.html\n```\n\noutput.html file will contains:\n\n```\n<h1 id=\"h1-title\">H1 title</h1>\n<h2 id=\"h2-title\">h2 title</h2>\n<ul>\n <li>item 1</li>\n <li>item 1.1 -item 1</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><span class=\"kw\">var</span> a<span class=\"op\">=</span><span class=\"va\">Math</span>.<span class=\"at\">floor</span>(<span class=\"fl\">33.33</span>)<span class=\"op\">;</span></a></code></pre>\n</div>\n```\n\n-   By default, pandoc produces a document fragment(small pieces of code) not a complete doucment:\n\n```\n# to produce a standalone document e.g. valid HTML file with <head> and <body>\n$ pandoc -s -o output.html input.txt\n```\n\n-   If multiple input files are given, pandoc will concatenate them all (with blank lines between them) before parsing. (Use –file-scope to parse files individually.).\n\n## Explicity specify the formats:\n\n-   use `-f/--from` and ‘-t/–to’\n\n```\n# convert hello.txt from Markdown to LaTeX, you could type:\n$ pandoc -f markdown -t latex hello.txt\n# To convert hello.html from HTML to Markdown:\n$ pandoc -f html -t markdown hello.html\n```\n\n## Character encoding:\n\n-   Pandoc uses the UTF-8 character encoding for both input and output.\n-   If your local character encoding is not UTF-8, you should pipe input and output through iconv:\n\n```\niconv -t utf-8 input.txt | pandoc | iconv -f utf-8\n```\n\n-   To produce a `PDF` : `pandoc test.txt -o test.pdf`\n\nBy default, pandoc will use `LaTeX` to create the `PDF`, which requires that a `LaTeX` engine be installed (see `--pdf-engine` below). Alternatively, `pandoc` can use `ConTeXt, roff ms, or HTML` as an intermediate format.\n\nTo do this, specify an output file with a `.pdf` extension, as before, but add the `--pdf-engine` option or `-t` context, `-t html`, or `-t ms` to the command line.\n\nThe tool used to generate the PDF from the intermediate format may be specified using `--pdf-engine`.\n\n----------\n\n## Input data from the `Web`:\n\n-   Instead of an input file, an absolute URI may be given. In this case pandoc will fetch the content using HTTP:\n\n`pandoc -f html -t markdown https://www.fsf.org`\n\n-   It is possible to supply a custom User-Agent string or other header when requesting a doc- ument from a URL: pandoc -f html -t markdown –request-header User-Agent:“Mozilla/5.0” https://www.fsf.org\n\n### Producing slide shows with pandoc:\n\nTo produce an HTML + JavaScript slide presentation that can be viewed via a web browser. There are five ways to do this, using S5, DZSlides, Slidy, Slideous, or reveal.js. You can also produce a PDF slide show using LaTeX beamer, or slides shows in Microsoft PowerPoint format.\n\n**Here’s the Markdown source for a simple slide show, habits.txt:**\n\n```\n% Habits\n% John Doe\n% March 22, 2005\n# In the morning\n## Getting up\n- Turn off alarm\n- Get out of bed\n## Breakfast\n- Eat eggs\n- Drink coffee\n# In the evening\n## Dinner\n- Eat spaghetti\n- Drink wine\n------------------\n![picture of spaghetti](images/spaghetti.jpg)\n## Going to sleep\n- Get in bed\n- Count sheep\n\n```\n\n**To produce an HTML/JavaScript slide show, simply type**\n\n`pandoc -t FORMAT -s habits.txt -o habits.html`",
      "html": "<p>Official Site: <a href=\"https://pandoc.org\">https://pandoc.org</a></p>\n<h2 id=\"using-pandoc%3A\">Using pandoc: <a class=\"heading-anchor-permalink\" href=\"#using-pandoc%3A\">#</a></h2>\n<ul>\n<li>If no <code>input-files</code> are specified, input is read from stdin. Output goes to stdout by default:</li>\n</ul>\n<pre><code>pandoc -o output.html input.txt #use -o option for output to file.\n</code></pre>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<ul>\n<li><strong>input.txt file</strong>:</li>\n</ul>\n<pre><code># H1 title\n## h2 title\n\n- item 1\n - item 1.1\n-item 1\n\n`var a=Math.floor(33.33);`\n</code></pre>\n<ul>\n<li>if:</li>\n</ul>\n<pre><code>$ pandoc -o output.html input.txt\n$ cat output.html\n</code></pre>\n<p>output.html file will contains:</p>\n<pre><code>&lt;h1 id=&quot;h1-title&quot;&gt;H1 title&lt;/h1&gt;\n&lt;h2 id=&quot;h2-title&quot;&gt;h2 title&lt;/h2&gt;\n&lt;ul&gt;\n &lt;li&gt;item 1&lt;/li&gt;\n &lt;li&gt;item 1.1 -item 1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;\n &lt;pre class=&quot;sourceCode js&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-1&quot; title=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;33.33&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>By default, pandoc produces a document fragment(small pieces of code) not a complete doucment:</li>\n</ul>\n<pre><code># to produce a standalone document e.g. valid HTML file with &lt;head&gt; and &lt;body&gt;\n$ pandoc -s -o output.html input.txt\n</code></pre>\n<ul>\n<li>If multiple input files are given, pandoc will concatenate them all (with blank lines between them) before parsing. (Use –file-scope to parse files individually.).</li>\n</ul>\n<h2 id=\"explicity-specify-the-formats%3A\">Explicity specify the formats: <a class=\"heading-anchor-permalink\" href=\"#explicity-specify-the-formats%3A\">#</a></h2>\n<ul>\n<li>use <code>-f/--from</code> and ‘-t/–to’</li>\n</ul>\n<pre><code># convert hello.txt from Markdown to LaTeX, you could type:\n$ pandoc -f markdown -t latex hello.txt\n# To convert hello.html from HTML to Markdown:\n$ pandoc -f html -t markdown hello.html\n</code></pre>\n<h2 id=\"character-encoding%3A\">Character encoding: <a class=\"heading-anchor-permalink\" href=\"#character-encoding%3A\">#</a></h2>\n<ul>\n<li>Pandoc uses the UTF-8 character encoding for both input and output.</li>\n<li>If your local character encoding is not UTF-8, you should pipe input and output through iconv:</li>\n</ul>\n<pre><code>iconv -t utf-8 input.txt | pandoc | iconv -f utf-8\n</code></pre>\n<ul>\n<li>To produce a <code>PDF</code> : <code>pandoc test.txt -o test.pdf</code></li>\n</ul>\n<p>By default, pandoc will use <code>LaTeX</code> to create the <code>PDF</code>, which requires that a <code>LaTeX</code> engine be installed (see <code>--pdf-engine</code> below). Alternatively, <code>pandoc</code> can use <code>ConTeXt, roff ms, or HTML</code> as an intermediate format.</p>\n<p>To do this, specify an output file with a <code>.pdf</code> extension, as before, but add the <code>--pdf-engine</code> option or <code>-t</code> context, <code>-t html</code>, or <code>-t ms</code> to the command line.</p>\n<p>The tool used to generate the PDF from the intermediate format may be specified using <code>--pdf-engine</code>.</p>\n<hr>\n<h2 id=\"input-data-from-the-web%3A\">Input data from the <code>Web</code>: <a class=\"heading-anchor-permalink\" href=\"#input-data-from-the-web%3A\">#</a></h2>\n<ul>\n<li>Instead of an input file, an absolute URI may be given. In this case pandoc will fetch the content using HTTP:</li>\n</ul>\n<p><code>pandoc -f html -t markdown https://www.fsf.org</code></p>\n<ul>\n<li>It is possible to supply a custom User-Agent string or other header when requesting a doc- ument from a URL: pandoc -f html -t markdown –request-header User-Agent:“Mozilla/5.0” <a href=\"https://www.fsf.org\">https://www.fsf.org</a></li>\n</ul>\n<h3 id=\"producing-slide-shows-with-pandoc%3A\">Producing slide shows with pandoc: <a class=\"heading-anchor-permalink\" href=\"#producing-slide-shows-with-pandoc%3A\">#</a></h3>\n<p>To produce an HTML + JavaScript slide presentation that can be viewed via a web browser. There are five ways to do this, using S5, DZSlides, Slidy, Slideous, or reveal.js. You can also produce a PDF slide show using LaTeX beamer, or slides shows in Microsoft PowerPoint format.</p>\n<p><strong>Here’s the Markdown source for a simple slide show, habits.txt:</strong></p>\n<pre><code>% Habits\n% John Doe\n% March 22, 2005\n# In the morning\n## Getting up\n- Turn off alarm\n- Get out of bed\n## Breakfast\n- Eat eggs\n- Drink coffee\n# In the evening\n## Dinner\n- Eat spaghetti\n- Drink wine\n------------------\n![picture of spaghetti](images/spaghetti.jpg)\n## Going to sleep\n- Get in bed\n- Count sheep\n\n</code></pre>\n<p><strong>To produce an HTML/JavaScript slide show, simply type</strong></p>\n<p><code>pandoc -t FORMAT -s habits.txt -o habits.html</code></p>\n",
      "id": 41
    },
    {
      "path": "PHP/php_basics.md",
      "url": "PHP/php_basics.html",
      "content": "# Basics\n\n> For resources, see the end of this file\n> <br>\n\n## PHP types\n\nEvery single expression in PHP has one of the following built-in types depending on its value:\n\n- `null`\n- `bool`\n- `int`\n- `float` (floating-point number)\n- `string`\n- `array`\n- `object`\n- `callable`\n- `resource`\n\n---\n\n#### Callable <p>notesforproff - php section 9.5</p>\n\n- anything which can be called as a **callback** such as `anonymous` functions, `static` classes, specific `Object/Class` Methods,`Objects` themselves and others.\n- Callbacks can be denoted by `callable` type hint. For example:\n\n```php\n$callable = function(){\nreturn 'value';\n}; // Note 'callable' and closures end with ';'\nfunction call_something(callable $fn) {\ncall_user_func($fn);\n}\ncall_something($callable);\n```\n\n- Some functions like `call_user_func()` or `usort()` accept user-defined callback functions as a parameter. Callback functions can not only be simple functions, but also object methods, including static class methods.\n- A PHP function is passed by its name as a string.\n  For example:\n\n```php\n// An example callback function\nfunction my_callback_function() {\n    echo 'hello world!';\n}\n\n// An example callback method\nclass MyClass {\n    static function myCallbackMethod() {\n        echo 'Hello World!';\n    }\n}\n\n// Type 1: Simple callback\ncall_user_func('my_callback_function');\n\n// Type 2: Static class method call\ncall_user_func(array('MyClass', 'myCallbackMethod'));\n\n// Type 3: Object method call\n$obj = new MyClass();\ncall_user_func(array($obj, 'myCallbackMethod'));\n\n// Type 4: Static class method call\ncall_user_func('MyClass::myCallbackMethod');\n\n// Type 5: Relative static class method call\nclass A {\n    public static function who() {\n        echo \"A\\n\";\n    }\n}\n\nclass B extends A {\n    public static function who() {\n        echo \"B\\n\";\n    }\n}\n\ncall_user_func(array('B', 'parent::who')); // A, deprecated as of PHP 8.2.0\n\n// Type 6: Objects implementing __invoke can be used as callables\nclass C {\n    public function __invoke($name) {\n        echo 'Hello ', $name, \"\\n\";\n    }\n}\n\n$c = new C();\ncall_user_func($c, 'PHP!');\n?>\n```\n\n- PHP is a dynamically typed language, which means that by default there is no need to `.....`\n- To check the value and type of an expression, use the `var_dump()`\n- to check if an expression is of a certain type use the `is_type` functions instead.\n- practices:\n\n```php\n<?php\n$a_bool = true;   // a bool\n$a_str  = \"foo\";  // a string\n$a_str2 = 'foo';  // a string\n$an_int = 12;     // an int\n\necho get_debug_type($a_bool), \"\\n\";\necho get_debug_type($a_str), \"\\n\";\n\n// If $an_int is an integer, increment it by four\nif (is_int($an_int)) {\n    $an_int += 4;\n}\nvar_dump($an_int);\n\n// If $a_bool is a string, print it out\nif (is_string($a_bool)) {\n    echo \"String: $a_bool\";\n}\n?>\n```\n\n<hr style=\"border:2px solid blue;background-color:blue;\">\n\n## Variables Scope\n\n<p>see notesforproffesionals-php section 3</p>\n\n- **variable scope** = visibility thought out PHP scope blocks which defined by functions, classes and a global scope.\n- **Super global variable**: built-in variables that are always available in **all scope** and to access them within functions or methods, there is no need to do `global $variable` or to pass them as parameters in your functions.\n  Examples:\n  - `$GLOBALS` - References all variables available in global scope\n  - `$_SERVER` - Server and execution environment information (info such as `headers,paths and script locations`)\n  - `$_GET` - HTTP GET variables\n  - `$_POST` - HTTP POST variables\n  - `$_FILES` - HTTP File Upload variables\n  - `$_COOKIE` - HTTP Cookies\n  - `$_SESSION` - Session variables\n  - `$_REQUEST` - HTTP Request variables\n  - `$_ENV` - Environment variables\n- **Static properties and variables** (inside classes declared by: `public static int $variable`) is same as **global variable** and doesn't require an instantiation of the class.\n- **Functions can also define static variables inside their own scope by: `static $variable`**. This useful for example to save data after function/method is terminated.\n\n#### **User-defined global variables**\n\n- **global scope** is the scope outside of any function or class.\n- When a PHP script includes another (using `include`\n  or `require`) the scope remains the same.\n- If a script is included outside of any `function` or `class`, it's global variables are included in the same global scope, but if a script is included from within a `function`, the variables in the included script are in the **scope of the function**.\n\n> Note: Using global keyword outside a function is not an error. It can be used if the file is included from inside a function.\n\n- To create an access **user-defined global variables** within the scope of a `function` or `class` method, the `global` keyword can be used OR via the `$GLOBALS` array which is a **superglobal** array contains references to all variables which are currently defined of the script. the variable names are the keys of the array(`[$variable_name => variable_content]`).\n  For example:\n\n```php\n$myGlobal = \"global\"; // declare a variable outside of scope\nfunction test()\n{\n $myLocal = \"local\"; // declare variable inside of scope\n // both variables are printed\n var_dump($myLocal);//string 'local' (length=5)\n var_dump($GLOBALS[\"myGlobal\"]);//string 'global' (length=6)\n}\ntest(); // run function\n\n// only $myGlobal is printed since $myLocal is not globally scoped\nvar_dump($myLocal); //null\nvar_dump($myGlobal);//string 'global' (length=6)\n```\n\n- Two options to **becoming global:**\n\n  1. **global keyword**\n\n  ```php\n  function test()\n  {\n  global $myLocal;// can not be (global $myLocal=\"local\";), it must be separated\n  $myLocal = \"local\";\n  var_dump($myLocal);\n  var_dump($GLOBALS[\"myGlobal\"]);\n  }\n  ```\n\n  2. **`$GLOBALS` Array**\n\n  ```php\n  function test()\n  {\n  $GLOBALS[\"myLocal\"] = \"local\";\n  $myLocal = $GLOBALS[\"myLocal\"];\n  var_dump($myLocal);\n  var_dump($GLOBALS[\"myGlobal\"]);\n  }\n\n  ```\n\n> Note: Static variables can be assigned values which are the result of constant expressions, but dynamic expressions, such as function calls, will cause a parse error.\n\n- variables declared inside blocks such as loops or if's, will also be recognized and accessible outside of the block.\n\n## Arrays\n\n- define Arrays\n- add a new variables using an index. for ex. add an item to the end of the list which contains 5 items?\n  > Arrays can contain different types of variables according to your needs, and can even contain other arrays or objects as members.\n- To delete an item from an array, use the `.....` function on the member itself.\n\nexample:\n(https://replit.com/@FarisubuntuDropper/phpvariablesscope2#index.php)\n\n### Useful functions:\n\n- to print array contents and indecis use `print_r($array)`\n- `count` hint: js length property\n- `reset` and `end`, first item and last item\n\n### Stack and queue functions:\n\n- Arrays can be used as stacks and queues as well.\n- How to use `array_push`, `array_shift` _functions_\n\nsee examples:\n(https://replit.com/@FarisubuntuDropper/phpstringsusefulfunctions#index.php)\n\n### Concatenating arrays:\n\n- `array_merge`\n\nsee example:\n(https://replit.com/@FarisubuntuDropper/phpconcatentatingsortingarrays#index.php)\n\n### Sorting arrays:\n\n- `sort` and `rsort` (note: done on the input array and does not return a new array)\n\n### Advanced array functions:\n\n- ` array_slice`: returns a new array that contains a certain part of a specific array from an offset.\n- The `array_splice` function does exactly the same as `array_slice`, however it will also remove the slice returned from the original array (in this case, the numbers variable).\n\n#### Arrays with keys (instead of 'indics):\n\n- called **associative array**\n- A good example for using arrays with keys is a phone book. _try to define a `$phone_nums` with three names and their numbers_\n- To add an item to an array using a key, we use the brackets operator\n- To check if a key exists within an array, we can use the `array_key_exists` function\n- To extract only the keys of the array (the names), we can use the `array_keys` function\n- To extract only the values of the array , we can use the `array_keys` function\n\n### Multidimensional arrays:\n\n- This type of array may contain another array as a value for a specific index:\n\n```php\n$multiArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n// to print inner array:\nprint_r($multiArray[0]); // first array\n// to get the value from any index from the inner array:\nprint_r($multiArray[0][0]) // 1\nprint_r($multiArray[0][1]) // 2\nprint_r($multiArray[0][2]) // 3\n```\n\n- We can also create an associative multidimensional array?\n\n```php\n$people = [\n    \"john_doe\" => [\n        \"name\" => \"John\",\n        \"surname\" => \"Doe\",\n        \"age\" => 25,\n    ],\n    \"jane_doe\" => [\n        \"name\" => \"Jane\",\n        \"surname\" => \"Doe\",\n        \"age\" => 25,\n    ]\n];\n\nprint_r($people);\n```\n\n---\n\n## Strings\n\n> for quick ref see: (https://www.w3schools.com/php/php_ref_string.asp)\n\n- We can also concatenate strings using the dot . operator. For example:\n\n```php\n$name = $first_name . \" \" . $last_name;\n```\n\n- To measure the length of a string, we use the `strlen` function\n- To cut a part of a string and return it as a new string, we can use the `substr` function. For example:\n\n```php\n$filename = \"image.png\";\n$extension = substr($filename, strlen($filename) - 3);\n```\n\n#### Extracting/Replacing substrings:\n\n<p>for examples, see : phpnotesforproffesional.pdf - Section 25.2: Substring</p>\n\n- Single characters can be extracted using array (square brace) syntax but now curly brace `{}` syntax is no longer supported. ex `$str{4}='5';`\n- If more charachter is needed, a function will be required, ie - `substr()`\n- Strings, like everything in PHP, are 0-indexed.\n\nExamples:\n\n```php\n/* If there is a possibility of meeting multi-byte character strings,\n then it would be safer to use mb_substr:*/\n$sentence = \"هذا مكتوب بالعربية\";\nvar_dump(substr($sentence,0,3));// string(3) \"ه�\"\necho \"<hr>\";\nvar_dump(mb_substr($sentence,0,3,'UTF-8'));// string(6) \"هذا\"\n// substr_replace\n$foo = 'Hello world';\n// below will result in $foo= 'Hello World';\n$foo[6] = 'W';\nsubstr_replace($foo, 'W', 6, 1);\n/* note below, the replacement string need not be the same length as\n the substring replaced.*/\nsubstr_replace($foo, 'Whi', 6, 2);// result in :  'Hello Whirled'\n/* Let's say you want to find a specific word in a string - and don't\nwant to use Regex.*/\n$bye = \"Goodbye cruel World!\";\nvar_dump(strpos($bye, \" \")); // int(7)\nvar_dump(substr($bye, -1 * (strlen($bye) - strpos($bye, \" \")))); // string(13) \" cruel World!\"\n\n/*Another option is a very basic parsing of an email.*/\n$email = \"test@example.com\";\n$wrong = \"foobar.co.uk\";\n$notld = \"foo@bar\";\n\n$at = strpos($email, \"@\"); // int(4)\n$wat = strpos($wrong, \"@\"); // bool(false)\n$nat = strpos($notld , \"@\"); // int(3)\n$domain = substr($email, $at + 1); // string(11) \"example.com\"\n$womain = substr($wrong, $wat + 1); // string(11) \"oobar.co\n$nomain = substr($notld, $nat + 1); // string(3) \"bar\"\n// for complete example: noteforproffesional - page 150\n\n```\n\n#### Joining and splitting:\n\n- `explode` and `strstr` are simpler methods to get substrings by separators.\n\n```php\n$fruits = \"apple,banana,orange\";\n$fruit_list = explode(\",\", $fruits);\n```\n\nAlso note other uses:\n\n```php\n$fruits= 'apple,pear,grapefruit,cherry';\n// If the limit parameter is zero, then this is treated as 1:\nprint_r(explode(',',$fruits,0)); //the same result if it '1', Array ( [0] => apple,pear,grapefruit,cherry )\n// but: below the returned array will contain a maximum of limit elements with the last element containing the rest of string.\nprint_r(explode(',',$fruits,2)); // Array ( [0] => apple [1] => pear,grapefruit,cherry )\n// If the limit parameter is negative, all components except the last -limit are returned.\nprint_r(explode(',',$fruits,-1)); // ['apple', 'pear', 'grapefruit']\n// 'explode' can be combined with list to parse a string into variables in one line:\n$email = \"user@example.com\";\nlist($name, $domain) = explode(\"@\", $email);\necho \"$name <br>\"; // user\necho \"$domain\"; // example.com\n// `strstr` strips away or only returns the substring before the first occurrence of the given needle.\n$string = \"1:23:456\";\necho json_encode(explode(\":\", $string)); // [\"1\",\"23\",\"456\"]\nvar_dump(strstr($string, \":\")); // string(7) \":23:456\"\nvar_dump(strstr($string, \":\", true)); // string(1) \"1\"\n\n```\n\n- To **join** back an array to a single string separated with commas, we use the `implode` function:\n\n```php\n$fruit_list = [\"apple\",\"banana\",\"orange\"];\n$fruits = implode(\",\", $fruit_list);\n```\n\n#### Searching a substring with strpos:\n\n- `strpos` can be understood as the number of bytes in the haystack before the first occurrence of the needle.\n\n```php\nvar_dump(strpos(\"haystack\", \"hay\")); // int(0)\nvar_dump(strpos(\"haystack\", \"stack\")); // int(3)\nvar_dump(strpos(\"haystack\", \"stackoverflow\"); // bool(false)\n```\n\n<p>below, try to answer by yourself if trouble see: PHPnotesforproff.pdf page 151<p>\n\n- **Checking if a substring exists?** (be careful when checking against TRUE or FALSE because if it 0 then will evaluated as FALSE)\n- **Search starting from an offset**\n- **Get all occurrences of a substring**\n\n### String Formating: \n\n#### string interpolation:\n<p>see phpnotesforprofessionals - chapter 24</p>\n\n- You can also use interpolation to interpolate (insert) a variable within a string. Interpolation works in double quoted\nstrings and the heredoc syntax only.\n\n\n## PHP Loops\n\n#### For , Foreach\n\n- There are two types of for loops - a simple (C style) for loop, and a foreach loop. For example:\n\n```php\n$odd_numbers = [1,3,5,7,9];\nfor ($i = 0; $i < count($odd_numbers); $i=$i+1) {\n    $odd_number = $odd_numbers[$i];\n    echo $odd_number . \"\\n\";\n}\n```\n\n- `foreach` loop: iterates over an iterable element such as an array or an object, providing the members in a specific variable one at a time.\n\n```php\n$odd_numbers = [1,3,5,7,9];\nforeach($odd_numbers as $odd_number){\n\techo $odd_number . \"\\n\";\n}\n```\n\n- When iterating over arrays with keys, we can use the following syntax:\n\n```php\n$phone_numbers = [\n  \"Alex\" => \"415-235-8573\",\n  \"Jessica\" => \"415-492-4856\",\n];\n\nforeach ($phone_numbers as $name => $number) {\n  echo \"$name's number is $number.\\n\";\n}\n```\n\n- also to iterate over object:\n\n```php\nclass Student{\n    public string $name;\n    public int $age;\n    public int $level;\n    public function __construct($name,$age,$level){\n        $this->name=$name;\n        $this->age=$age;\n        $this->level=$level;\n    }\n}\n$student1=new Student(\"Faris\",26,10);\nforeach ($student1 as $prop=>$value){\n    echo \"$prop: \" . $value . \"\\n\";\n}\n```\n\n#### While loops\n\n```php\n$counter = 0;\n\nwhile ($counter < 10) {\n    $counter += 1;\n    echo \"Executing - counter is $counter.\\n\";\n}\n```\n\n#### Flow statements:\n\n- Loops can be controlled using the break and continue flow statements, which come in handy in while loops very much. The break statement immediately quits the for loop at the middle of the block, while the continue statement returns to the top of the while loop, re-checking if the loop condition is met as well. For example:\n\n```php\n$counter = 0;\n\nwhile ($counter < 10) {\n    $counter += 1;\n\n    if ($counter % 2 == 0) {\n        echo \"Skipping number $counter because it is even.\\n\";\n        continue;\n    }\n\n    echo \"Executing - counter is $counter.\\n\";\n}\n```\n\n---\n\n## Functions\n\n> See phpnotesforproffesionals - chapter 21 and chapter 22\n\n#### How to read a function definition (prototype):\n\nsee (https://www.php.net/manual/en/about.prototypes.php)\n\n- **All functions and classes in PHP have the global scope - they can be called outside a function even if they were defined inside and vice versa.**\n- **PHP does not support function overloading, nor is it possible to undefine or redefine previously-declared functions.**\n- There are two types of functions - library functions and user functions.\n\n#### User-defined functions\n\n```php\n// Explain and give examples:\n\n// Conditional functions?\n$makefoo = true;\n//foo(); //not exist\nbar(); //exist\nif($makefoo){\n function foo(){echo \"foo() exist ...\";}\n}\nfoo(); // exist\nfunction bar(){\n echo \"bar() exist... <br>\";\n}\n// Function within functions?\nfunction foo()\n{\n  function bar()\n  {\n    echo \"I don't exist until foo() is called.\\n\";\n  }\n}\nbar(); //error: bar() doesn't exist\nfoo();\nbar(); //work: bar() exist\n// Recursive functions?\nfunction recursion($a)\n{\n    if ($a < 20) {\n        echo \"$a\\n\";\n        recursion($a + 1);\n    }\n}\n\n```\n\n#### Function arguments\n\n- The arguments are evaluated from left to right, before the function is actually called (eager evaluation).\n- PHP supports passing arguments by value (the default), passing by reference, and default argument values. Variable-length argument lists and Named Arguments are also supported.\n- The default is used only when the parameter is not specified; in particular, note that passing null does not assign the default value.\n- The default value must be a constant expression, not (for example) a variable, a class member or a function call.\n- Note that any optional arguments should be specified after any required arguments, otherwise they cannot be omitted from calls.\n\n```php\n// Passing arrays to functions?\n  // > write function that print total of first and second elements only\n\n// Function Argument List with trailing Comma (hint: list args vertically)\n\n// Passing arguments by reference?: To allow a function to modify its arguments, they must be passed by reference.\n\n// Default argument values?:\n\n// Using non-scalar types as default values\n<?php\nfunction makecoffee($types = array(\"cappuccino\"), $coffeeMaker = NULL)\n{\n    $device = is_null($coffeeMaker) ? \"hands\" : $coffeeMaker;\n    return \"Making a cup of \".join(\", \", $types).\" with $device.\\n\";\n}\necho makecoffee();//Making a cup of cappuccino with hands.\necho makecoffee(array(\"cappuccino\", \"lavazza\"), \"teapot\");//Making a cup of cappuccino, lavazza with teapot.\n\n//  Using objects as default values:\n\nclass Person{\n  public function getRule(){\n   return \"Person <br>\";\n  }\n}\nclass Student {\n\n  public function getRule() {\n   return \"Student <br>\";\n  }\n}\nclass Employee {\n  public function getRule(){\n   return \"Employee <br>\";\n  }\n}\nfunction getRule($person = new Person){ // note 'Person' without ();\nreturn $person->getRule();\n}\necho getRule(); //Person\necho getRule(new Student); // Student\necho getRule(new Employee); // Employee\n\n// another example with abstract Person class : (https://replit.com/@FarisubuntuDropper/php-Functions#index.php)\n\n// As of PHP 8.8.8,  named arguments can be used to skip over multiple optional parameters?:\nfunction makeyogurt(\n    $container = \"bowl\", $flavour = \"raspberry\", $style = \"Greek\"\n    )\n{ return \"Making a $container of $flavour $style yogurt.\\n\"; }\necho makeyougurt(style:\"natural\"); // Making a bowl of raspberry natural yogurt.\n\n// Variable-length argument lists?: PHP has support for variable-length argument lists in user-defined functions by using the ... token.  The arguments will be passed into the given variable as an array:\nfunction getSum(...$numbers){\n $sum = 0;\n foreach($numbers as  $number){\n  $sum += $number;\n }\n return $sum;\n}\necho getSum(1,2,3); //6\n// below, Error: unsported operand types: int+array ...\n/*\necho getSum([1,2,3]);\necho getSum(range(1,3));\necho getSum(array(1,2,3));\n*/\n\n// '...' can also be used when calling functions to unpack an array or 'Traversable' variable or literal into the argument list:\n\nfunction add($a,$b,$c){\n return $a+$b+$c;\n}\necho add(...[1,2,3]) . \"\\n\"; //3\n//echo add(...[1,2]) . \"\\n\";// Error: ArgCountError:too few args...\n$d=[5,2];\n//echo add(...$d) . \"\\n\";//Error: ArgCountError:too few args...\n$e=[1,2,3,4,5];\necho add(...$e) . \"\\n\";// 6 not 15. only the first three elements.\n\n// Positional arguments versus named arguments:\n // Using positional arguments:\n array_fill(0, 100, 50);\n // Using named arguments:\n array_fill(start_index: 0, count: 100, value: 50);\n```\n\n- Finally, variable arguments can also be passed by reference by prefixing the ... with an ampersand (&).\n\n#### Returning values\n\n- If the return is omitted the value null will be returned.\n- A function can not return multiple values, but similar results can be obtained by returning an array.\n- To return a reference from a function, use the reference operator `&` in both the function declaration and when assigning the returned value to a variable.\n- Objects are always passed by reference and returned by reference:\n\n```php\nclass Obj{\n    public $x;\n}\nfunction modify($obj){\n    $obj->x++;\n    return $obj;\n}\n\n$obj1=new Obj();\n$obj2=modify($obj1);\n$obj1->x++;\necho $obj1->x . ', ' . $obj2->x; // 2,2\n$obj2->x++;\necho $obj1->x . ', ' . $obj2->x; // 3,3\n```\n\n- You have to force pass by reference and return by reference on arrays:\n\n```php\nfunction &array_ref_inc_x(&$array) {\n    $array{'x'}++; /* Array and string offset access syntax with\n                      curly braces is no longer supported...?*/\n    return $array;\n}\n\n$array = array();\n$array['x'] = 1;\n\n$array2 =& array_ref_inc_x($array); # Need reference here as well as the function sig\narray_ref_inc_x($array2);\n\nprint $array['x'] . ', ' . $array2['x'] . \"\\n\";\n```\n\n#### Variable functions\n\n- If a variable name has parentheses appended to it, PHP will look for a function with the same name as whatever the variable evaluates to, and will attempt to execute it:\n\n```php\nfunction foo(){\n    echo \"Foo() ....\";\n}\n$func='foo';\n$func(); //Foo() ....\n```\n\n- also, the same applied on variable method?\n\n#### Internal (built-in) functions\n\n- There are functions that require specific PHP extensions compiled in, otherwise fatal \"undefined function\" errors will appear.\n- A call to phpinfo() or get_loaded_extensions() will show which extensions are loaded into PHP.\n\n#### Anonymous functions\n\n- also known as **closures**, allow the creation of functions which have no specified name.\n\n```php\n$welcome= function ($user_name){\n    echo \"Hello, $user_name\";\n};\n\n$welcome('John');\necho \"\\n\";\n$welcome('Peter');\n```\n- A closure is an anonymous function that can't access outside scope.\n- When defining an anonymous function as such, you're creating a \"namespace\" for that function. It currently only\nhas access to that namespace.\n- Closures may also inherit variables from the parent scope. Any such variables must be passed to the `use` language construct.\n- Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing. The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from). See the following example:\n\nExample 1:\n\n```php\n$message = 'hello';\n\n// No \"use\"\n$example = function () {\n    var_dump($message);\n    echo \"<hr>\";\n};\n$example(); // Null, undefined variable\n\n// Inherit $message\n$example = function () use ($message) { // copy $message into the closure's scope\n    var_dump($message);\n    echo \"<hr>\";\n};\n$example(); // string(5) \"hello\"\n\n// Inherited variable's value is from when the function\n// is defined, not when called\n$message = 'world';\n$example(); // string(5) \"hello\"\n\n// reset message:\n$message = \"hello\";\n$example=function () use (&$message){ // Must passed by reference if you care about their contents over time\n var_dump($message);\n echo \"<hr>\";\n};\n\n$example(); //string(5) \"hello\"\n$message =\"World\";\n\n$example(); //string(5) \"World\"\n\n// Closures can also accept regular arguments\n$example = function ($arg) use ($message) {\n var_dump($arg . ' ' . $message);\n echo \"<hr>\";\n};\n$example(\"hello\"); // string(11) \"hello World\"\n\n// Return type declaration comes after the use clause\n$example = function () use ($message): string {\n return \"hello $message\";\n};\nvar_dump($example()); // string(11) \"hello World\"\n\n```\n\nExample 2:\n\n```php\n/* A basic shopping cart which contains a list of added products and the quantity of each product. \nIncludes a method which calculates the total price of the items in the cart using\n a closure as a callback.*/\n\nclass Cart\n{\n    const PRICE_BUTTER  = 1.00;\n    const PRICE_MILK    = 3.00;\n    const PRICE_EGGS    = 6.95;\n\n    protected $products = array();\n\n    public function add($product, $quantity)\n    {\n        $this->products[$product] = $quantity;\n    }\n\n    public function getQuantity($product)\n    {\n        return isset($this->products[$product]) ? $this->products[$product] :\n               FALSE;\n    }\n    public function getTotal($tax)\n    {\n        $total = 0.00;\n\n        $callback =\n            function ($quantity, $product) use ($tax, &$total)\n            {\n                $pricePerItem = constant(__CLASS__ . \"::PRICE_\" .\n                    strtoupper($product));\n                $total += ($pricePerItem * $quantity) * ($tax + 1.0);\n            };\n\n        array_walk($this->products, $callback);\n        return round($total, 2);\n    }\n}\n$my_cart = new Cart;\n// Add some items to the cart\n$my_cart->add('butter', 1);\n$my_cart->add('milk', 3);\n$my_cart->add('eggs', 6);\n\n// Print the total with a 5% sales tax.\nprint $my_cart->getTotal(0.05) . \"\\n\";\n// The result is 54.29\n```\n\nExample 3: Automatic Binding of $this\n\n```php\n\n$myClosure = function() {\n    echo $this->property;\n};\n\nclass MyClass\n{\n    public $property;\n\n    public function __construct($propertyValue)\n    {\n        $this->property = $propertyValue;\n    }\n}\n\n$myInstance = new MyClass('Hello world!');\n$myBoundClosure = $myClosure->bindTo($myInstance);\n\n$myBoundClosure(); // Shows \"Hello world!\"\n```\n\nExample 4: An example showing how to use closures to implement a Python-like decorator pattern:\n\n```php\n/*\n * My goal was that you should be able to decorate a function with any\n * other function, then call the decorated function directly:\n *\n * Define function:         $foo = function($a, $b, $c, ...) {...}\n * Define decorator:        $decorator = function($func) {...}\n * Decorate it:             $foo = $decorator($foo)\n * Call it:                 $foo($a, $b, $c, ...)\n *\n * This example show an authentication decorator for a service, using a simple\n * mock session and mock service.\n */\n\nsession_start();\n\n/*\n * Define an example decorator. A decorator function should take the form:\n * $decorator = function($func) {\n *     return function() use $func) {\n *         // Do something, then call the decorated function when needed:\n *         $args = func_get_args($func);\n *         call_user_func_array($func, $args);\n *         // Do something else.\n *     };\n * };\n */\n$authorise = function($func) {\n    return function() use ($func) {\n        if ($_SESSION['is_authorised'] == true) {\n            $args = func_get_args($func);\n            call_user_func_array($func, $args);\n        }\n        else {\n            echo \"Access Denied\";\n        }\n    };\n};\n/*\n * Define a function to be decorated, in this example a mock service that\n * need to be authorised.\n */\n$service = function($foo) {\n    echo \"Service returns: $foo\";\n};\n/*\n * Decorate it. Ensure you replace the origin function reference with the\n * decorated function; ie just $authorise($service) won't work, so do\n * $service = $authorise($service)\n */\n$service = $authorise($service);\n/*\n * Establish mock authorisation, call the service; should get\n * 'Service returns: test 1'.\n */\n$_SESSION['is_authorised'] = true;\n$service('test 1');\n\n/*\n * Remove mock authorisation, call the service; should get 'Access Denied'.\n */\n$_SESSION['is_authorised'] = false;\n$service('test 2');\n```\n\n#### Arrow Functions\n\n- **Both anonymous functions and arrow functions are implemented using the Closure class.**\n- Arrow functions have the basic form `fn (argument_list) => expr`.\n- Arrow functions support the same features as anonymous functions, except that using variables from the parent scope is always automatic.\n\nExample: \n\n```php\n$z=2;\n\n$arrow_fun=fn($x)=>$x+$z; // inherit parent scope automatically no need to 'use'\n\necho $arrow_fun(5); // 7\n$z=100;\necho \"<hr>\";\necho $arrow_fun(5); // 7\n```\n\n## Classes and Objects:\n\n> examples from phpnotesforproffesionals.pdf chapter 26\n\nHere are some important definitions related to objects:\n\n- Classes define how objects behave. Classes do not contain data.\n- Objects are instances of classes, which contain data.\n- Members are variables that belong to an object.\n- Methods are functions that belong to an object, and have access to its members.\n- Constructor is a special method that is executed when an object is created.\n- PHP treats objects in the same way as references or handles, meaning that each variable contains an object reference rather than a copy of the entire object.\n- The pseudo-variable `$this` is available when a method is called from within an object context. $this is the value of the calling object.\n- **class member properties** are defined by using at least one modifier (such as Visibility(`public,private,protected`), `Static` Keyword and followed by a variable declaration which may include an initialization but Must be a `constant` value.\n- typed properties (`int,string,...`) Must be initialized before accessing, otherwise an ERROR is thrown.\n\n## Class Constants\n\n- It is possible to define constants on a per-class basis remaining the same and unchangeable and can be redefined by a child class except when it defined as `final`.\n- **Remember: constants and class constants not like a regular variables so not prefixed with `$`**\n- The default visibility of class constants is `public`.\n- Class constants can only be defined with the `const` keyword - the `define` function cannot be used in this context.\n- Outside class, Class constants may be accessed by using the double colon operator (so-called the **scope resolution operator**) on a class, much like static variables. Unlike static variables, however, class constants have their values fixed at **compile time** and cannot be reassigned to (e.g. `MathValues::PI = 7` would produce a fatal error).\n- We can reference class constants internally (inside the class) using the `self` scope resolutor (which works in both instanced and static implementations). For example:\n\n```php\nclass Labor {\n/** How long, in hours, does it take to build the item? */\nconst LABOR_UNITS = 0.26; // defualt is public but can 'private','protected'\n/** How much are we paying employees per hour? */\nconst LABOR_COST = 12.75;\n// also we can do this: 'const LABOR_COST=12.75 * 0.26;'\npublic function getLaborCost($number_units) {\n// accessing constant internally using `self`\nreturn (self::LABOR_UNITS * self::LABOR_COST) * $number_units;\n }\n}\n//access class constant outside its class:\necho Labor::LABOR_UNITS; // note no $\n//\n$labor=new Labor();\necho $labor->getLaborCost(4); // 13.26\n\n```\n\n#### Abstract Classes:\n\n- An abstract class is a class that cannot be instantiated. Abstract classes can define abstract methods, which are methods without any body, only a definition.\n- Any class that contains at least one abstract method must also be abstract.\n- When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be defined by the child class.\n\nExample\n\n```php\nabstract class AbstractClass\n{\n    // Force Extending class to define this method\n    abstract protected function getValue();\n    abstract protected function prefixValue($prefix);\n    // Common method\n    public function printOut() {\n        print $this->getValue() . \"\\n\";\n    }\n}\nclass ConcreteClass1 extends AbstractClass\n{\n    protected function getValue() {\n        return \"ConcreteClass1\";\n    }\n    public function prefixValue($prefix) { //note visibility can be changed\n        return \"{$prefix}ConcreteClass1\";\n    }\n    /* also you can define optional arguments such\n    public function prefixValue($prefix,$seperator=':'){\n      return \"{prefix}{$seperator}ConcreteClass1\";\n    }\n    */\n}\nclass ConcreteClass2 extends AbstractClass\n{\n    public function getValue() {\n        return \"ConcreteClass2\";\n    }\n    public function prefixValue($prefix) {\n        return \"{$prefix}ConcreteClass2\";\n    }\n}\n\n$class1 = new ConcreteClass1;\n$class1->printOut();\necho $class1->prefixValue('FOO_') .\"\\n\";\n\n$class2 = new ConcreteClass2;\n$class2->printOut();\necho $class2->prefixValue('FOO_') .\"\\n\";\n```\n\n#### How to Distinguish between Abstract class and Interface:\n\n- An Interface is like a protocol. It doesn't designate the behavior of the object; it designates how your code tells that object to act. Defining an interface defines how your code communicates with any object implementing that interface.\n- An interface is always an agreement or a promise. When a class says \"I implement interface Y\", it is saying \"I promise to have the same public methods that any object with interface Y has\".\n- You would have your class implement a particular interface if you were distributing a class to be used by other people.\n\nOn other hand:\n\n- an Abstract Class is like a partially built class. It is much like a document with blanks to fill in. It is the foundation for another object.\n- When a class says \"I extend abstract class Y\", it is saying \"I use some methods or properties already defined in this other class named Y\".\n- You would have your class extend an abstract class if you (or someone else) wrote a class that already had some methods written that you want to use in your new class.\n\nExample:\n\n```php\n// this is saying that \"X\" agrees to speak language \"Y\" with your code.\nclass X implements Y { }\n// this is saying that \"X\" is going to complete the partial class \"Y\".\nclass X extends Y { }\n```\n\n> **For all intents and purposes, if you're the only user of any of your classes, you don't need to implement interfaces.**\n\n#### Summary of differences between abstract class and interface\n\nFrom: (https://www.javatpoint.com/php-oops-difference-between-abstract-class-and-interface)\n\n**Abstract class:**\n\n- Abstract class comes under partial abstraction.\n- Abstract classes can maintain abstract methods and non abstract methods.\n- In abstract classes, we can create the variables/properties.\n- In abstract classes, we can use any access specifier.\n- By using 'extends' keyword we can access the abstract class features from derived class.\n- Multiple inheritance is **not possible**.\n\n**Interface:**\n\n- Interface comes under fully abstraction.\n- Interfaces can maintain only abstract methods.\n- In interfaces, we can't create the variables/properties.\n- In interface, we can use only public access specifier.\n- By using 'implement' keyword we can get interface from derived class.\n- By using interfaces multible inheritance is **possible**.\n\n**Important Notes:**\n\n- Interfaces can be extended like classes using the `extends` operator.\n- When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be defined by the child (or the child itself must also be marked abstract); additionally, **these methods must be defined with the same (or a less restricted) visibility**. For example, if the abstract method is defined as protected, the function implementation must be defined as either protected or public, but not private.\n- When abstract classes implement interfaces, they **do not need to implement all methods**. Any method not implemented in the base class must then be implemented by the **concrete class** _(a class that we can create an instance of, using the `new` keyword)_ that extends it. example: (https://replit.com/@FarisubuntuDropper/InterfaceInheritance-1)\n\n> In PHP, **polymorphism** means that if B is a descendant of A and a function can accept A as a parameter, then it can also accept B as a parameter.\n\nTry below examples:\n\n- Good Example: (https://replit.com/@FarisubuntuDropper/howabstractinterfaceworktogether#index.php)\n- Basic interface use: (https://replit.com/@FarisubuntuDropper/interfaceexample1)\n- interface inherit another interface: (https://replit.com/@FarisubuntuDropper/interfaceexample2Extendable#index.php)\n- Example #5 Interfaces with constants: (https://replit.com/@FarisubuntuDropper/example3-Variance-compatibility-with-multiple-interfaces#index.php)\n- Example #6 Interfaces with abstract classes: (https://replit.com/@FarisubuntuDropper/Interfaces-with-abstract-classes)\n- Example #7 Another good example of implementing an interface (https://replit.com/@FarisubuntuDropper/another-interface-usage)\n\n## Traits\n\n- Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce some limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.\n- It is not possible to instantiate a Trait on its own like as class.\n- Its is an addition to traditional inheritance and enables the application of class members without requiring inheritance.\n\nExamples:\n\n- Basic Usage: (https://replit.com/@FarisubuntuDropper/Example-1-Trait-example#index.php)\n\n## Constructors and Destructors\n\n(https://www.php.net/manual/en/language.oop5.decon.php)\n\n- Parent constructors are not called **implicitly** if the child class defines a constructor.\n- to run a parent constructor, a call to `parent::__construct()` within the child constructor is required. If the child does not define a constructor then it may be inherited from the parent class just like a normal class method (if it was not declared as private).\n\nExample:\n\n```php\n<?php\nclass Point {\n    protected int $x;\n    protected int $y;\n\n    public function __construct(int $x, int $y = 0) {\n        $this->x = $x;\n        $this->y = $y;\n    }\n}\n\n// Pass both parameters.\n\n$p1 = new Point(4, 5);\n/* Pass only the required parameter. $y will take its default\n value of 0.*/\n$p2 = new Point(4);\n// With named parameters (as of PHP 8.0):\n$p3 = new Point(y: 5, x: 4);\n?>\n```\n\n- When a constructor argument includes a visibility modifier(`public,private,protected`), PHP will interpret it as both an object property (_promoted property_) and a constructor argument, and assign the argument value to the property. For example instead of doing this:\n\n```php\n// Instead of this:\n\nclass CustomerDTO\n{\n    public string $name;\n    public string $email;\n    public DateTimeImmutable $birth_date;\n    public function __construct(\n        string $name,\n        string $email,\n        DateTimeImmutable $birth_date\n    ) {\n        $this->name = $name;\n        $this->email = $email;\n        $this->birth_date = $birth_date;\n    }\n}\n\n// You would write this:\n\nclass CustomerDTO\n{\n\n    // __construct parameters you want to be promoted object property should prefixed with visibility keyword.\n    public function __construct(\n        public string $name,\n        public string $email,\n        public DateTimeImmutable $birth_date,\n    ) {}\n}\n\n```\n\n- **Promoted properties can only be used in constructors**.\n- You're not able to declare a class property and a promoted property with the same name.\n- Not all arguments need to be promoted. It is possible to mix and match promoted and not-promoted arguments, in any order.\n\nTry this example: https://replit.com/@FarisubuntuDropper/abstractclassescarexample#index.php\n\n#### Static creation methods:\n\n- PHP only supports a single constructor per class. In some cases, however, it may be desirable to allow an object to be constructed in different ways with different inputs. The recommended way to do so is by using **static** methods as constructor wrappers. For Example:\n\n```php\nclass Product {\n\n    private ?int $id;\n    private ?string $name;\n\n    private function __construct(?int $id = null, ?string $name = null) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n\n   public static function fromBasicData(int $id, string $name): static {\n        $new = new static($id, $name);\n        return $new;\n    }\n\n    public static function fromJson(string $json): static {\n        $data = json_decode($json);\n        return new static($data['id'], $data['name']);\n    }\n    public static function fromXml(string $xml): static {\n        // Custom logic here.\n        $data = convert_xml_to_array($xml);\n        $new = new static();\n        $new->id = $data['id'];\n        $new->name = $data['name'];\n        return $new;\n    }\n}\n\n/* Below, the three public static methods then demonstrate\ndifferent ways of instantiating the object.*/\n\n/*fromBasicData() takes the exact parameters that are needed,\n then creates the object by calling the constructor and\n  returning the result.*/\n$p1 = Product::fromBasicData(5, 'Widget');\necho $p1->name  //'Widget'\n/*fromJson() accepts a JSON string and does some pre-processing\n on it itself to convert it into the format desired by the\n  constructor. It then returns the new object.*/\n$p2 = Product::fromJson($some_json_string);\n\n/*fromXml() accepts an XML string, preprocesses it, and then\n creates a bare object. The constructor is still called, but\n  as all of the parameters are optional the method skips\n  them. It then assigns values to the object properties directly\n   before returning the result.*/\n$p3 = Product::fromXml($some_xml_string);\n\n/* Note: in all three cases, the static keyword is translated\n into the name of the class the code is in. In this case, Product.*/\n```\n\n#### Destructors:\n\n- Like constructors, parent destructors will not be called implicitly by the engine. In order to run a parent destructor, one would have to explicitly call `parent::__destruct()` in the destructor body. Also like constructors, a child class may inherit the parent's destructor if it does not implement one itself. For example:\n\n```php\nclass MyDestructableClass\n{\n    function __construct() {\n        print \"In constructor\\n\";\n    }\n    /* The destructor method will be called as soon as there\n     are no other references to a particular object, or in\n      any order during the shutdown sequence.*/\n    function __destruct() {\n        print \"Destroying \" . __CLASS__ . \"\\n\";\n    }\n}\n\n$obj = new MyDestructableClass();\n```\n\n## Object Inheritance\n\n- When extending a class, the subclass inherits all of the public and protected methods, properties and constants from the parent class. Unless a class overrides those methods, they will retain their original functionality.\n- Private methods of a parent class are not accessible to a child class. As a result, child classes may reimplement a private method themselves without regard for normal inheritance rules.\n- It is not allowed to override a read-write property with a readonly property or vice versa. For example:\n\n```php\nclass A {\n    public int $prop;\n}\nclass B extends A {\n    // Illegal: read-write -> readonly\n    public readonly int $prop;\n}\n```\n\n## Visibility\n\n- Class members declared public can be accessed everywhere. Members declared protected can be accessed only within the class itself and by inheriting and parent classes. Members declared as private may only be accessed by the class that defines the member.\n\n#### Property Visibility\n\n- `private,protected,public` ....\n\n#### Public and private functions\n\n- Example:\n\n```php\nclass Student {\n    // constructor should be public\n    public function __construct($first_name, $last_name) {\n        $this->first_name = $first_name;\n        $this->last_name = $last_name;\n    }\n    // For external use (accessed through an 'object)\n    public function say_name() {\n        echo \"My name is \" . $this->full_name() . \"\\n\";\n    }\n    // For internal use\n    private function full_name() {\n        return $this->first_name . \" \" . $this->last_name;\n    }\n}\n$alex = new Student(\"Alex\", \"Jones\");\n$alex->say_name();\n// this will not work\n// echo $alex->full_name();\n```\n\n#### Method Visibility:\n\n- Methods declared without any explicit visibility keyword are defined as public.\n\nSee Example: (https://replit.com/@FarisubuntuDropper/php-method-visibility#index.php)\n\n#### Constant Visibility:\n\n- Constants declared without any explicit visibility keyword are defined as public.\n\nExample: (https://replit.com/@FarisubuntuDropper/php-Constant-Visibility#index.php)\n\n#### Visibility from other objects:\n\n- Objects of the same type will have access to each others private and protected members even though they are not the same instances.\n  Example: (https://replit.com/@FarisubuntuDropper/php-Visibility-from-other-objects#index.php)\n\n---\n\n## Namespaces:\n\n- Before, see the basic usage: (https://www.php.net/manual/en/language.namespaces.basics.php) [Example: (https://replit.com/@FarisubuntuDropper/php-namespace-basics#index.php)]\n\n#### Overview\n\n- Namespaces are a way of encapsulating items.\n- For example: directories serve to group related files, and act as a namespace for the files within them.\n- In PHP, namespaces are designed to solve two probelms:\n  1. Name collisions between code you create, and internal PHP classes/functions/constants or third-party classes/functions/constants.\n  2. Ability to alias (or shorten) Extra_Long_Names designed to alleviate the first problem, improving readability of source code.\n- A namespace declaration can look as follows:\n\n```php\nnamespace MyProject; // Declare the namespace MyProject\nnamespace MyProject\\Security\\Cryptography; // Declare a nested namespace\nnamespace MyProject { ... } // Declare a namespace with enclosing brackets.\n```\n\n**Namespaces Notes:**\n\n- Namespace names are case-insensitive.\n- The Namespace name PHP, and compound names starting with this name (like PHP\\Classes) are reserved for internal language use and should not be used in the userspace code.\n- Fully qualified names (i.e. names starting with a backslash) are not allowed in namespace declarations, because such constructs are interpreted as relative namespace expressions.\n- `namespace` statement is defined at first of the php files. But before namespace declaration only three elements allowed. [ex. 2]\n  1. `declare` statement\n  2. spaces\n  3. comments\n- Unlike any other PHP construct, the same namespace may be defined in multiple files, allowing splitting up of a namespace's contents across the filesystem.\n- It is recommended to only declare a single namespace per file, even though you can declare as many as you like in\n  a single file.\n- Every time you declare a namespace, classes you define after that will belong to that namespace:\n\n```php\nnamespace MyProject\\Shapes;\nclass Rectangle { ... }\nclass Square { ... }\nclass Circle { ... }\n\n/*A namespace declaration can be used multiple times\n in different files. The example above defined three\n  classes in the MyProject\\Shapes namespace in a single file.\n   Preferably this would be split up into three files,\n   each starting with namespace MyProject\\Shapes;*/\n```\n\n> **see phpnotesforProffesionals.php chapter 27: Namespaces**\n\n**Namespaces Examples:**\n\n1. Namespace syntax example: (https://replit.com/@FarisubuntuDropper/php-namespace-1#index.php)\n2. namespace decleration : (https://replit.com/@FarisubuntuDropper/php-namespace-2#index.php)\n3. define constant and explicit constant use: (https://replit.com/@FarisubuntuDropper/php-define-namespace-constant-1)\n4. Declaring a single namespace with hierarchy: (https://replit.com/@FarisubuntuDropper/Declaring-a-single-namespace-with-hierarchy#)\n5. Defining multiple namespaces in the same file (https://replit.com/@FarisubuntuDropper/php-Defining-multiple-namespaces-in-the-same-file#index.php)\n6. Namespaces and Multiple files (https://replit.com/@FarisubuntuDropper/php-namespace-in-multiple-files-1#index.php)\n7. Declaring sub-namesapce: (https://replit.com/@FarisubuntuDropper/php-Declaring-sub-namespaces#index.php)\n\n## Exceptions\n\n- Example:\n\n```php\n//  Each try must have at least one corresponding catch or finally block.\ntry {\n  echo 2 / 0;\n} catch (Exception $e) {\n  echo \"Caught exception: Division by zero!\";\n}\n\n```\n\nMultiple catch blocks can be used to catch different classes of exceptions:\n\n```php\nif (4/2 == 2) {\n  echo \"Right!\";\n} else {\n  throw new Exception(\"Wrong answer!\");\n}\n```\n\n# Resources {#identifier resources}\n\n- https://www.learn-php.org\n- PHP notes for proffesionals (commented copy inside pdfs folder)\n- https://www.php.net/manual/en/\n",
      "html": "<h1 id=\"basics\">Basics <a class=\"heading-anchor-permalink\" href=\"#basics\">#</a></h1>\n<blockquote>\n<p>For resources, see the end of this file\n<br></p>\n</blockquote>\n<h2 id=\"php-types\">PHP types <a class=\"heading-anchor-permalink\" href=\"#php-types\">#</a></h2>\n<p>Every single expression in PHP has one of the following built-in types depending on its value:</p>\n<ul>\n<li><code>null</code></li>\n<li><code>bool</code></li>\n<li><code>int</code></li>\n<li><code>float</code> (floating-point number)</li>\n<li><code>string</code></li>\n<li><code>array</code></li>\n<li><code>object</code></li>\n<li><code>callable</code></li>\n<li><code>resource</code></li>\n</ul>\n<hr>\n<h4 id=\"callable-notesforproff---php-section-9.5\">Callable <p>notesforproff - php section 9.5</p> <a class=\"heading-anchor-permalink\" href=\"#callable-notesforproff---php-section-9.5\">#</a></h4>\n<ul>\n<li>anything which can be called as a <strong>callback</strong> such as <code>anonymous</code> functions, <code>static</code> classes, specific <code>Object/Class</code> Methods,<code>Objects</code> themselves and others.</li>\n<li>Callbacks can be denoted by <code>callable</code> type hint. For example:</li>\n</ul>\n<pre><code class=\"language-php\">$callable = function(){\nreturn 'value';\n}; // Note 'callable' and closures end with ';'\nfunction call_something(callable $fn) {\ncall_user_func($fn);\n}\ncall_something($callable);\n</code></pre>\n<ul>\n<li>Some functions like <code>call_user_func()</code> or <code>usort()</code> accept user-defined callback functions as a parameter. Callback functions can not only be simple functions, but also object methods, including static class methods.</li>\n<li>A PHP function is passed by its name as a string.\nFor example:</li>\n</ul>\n<pre><code class=\"language-php\">// An example callback function\nfunction my_callback_function() {\n    echo 'hello world!';\n}\n\n// An example callback method\nclass MyClass {\n    static function myCallbackMethod() {\n        echo 'Hello World!';\n    }\n}\n\n// Type 1: Simple callback\ncall_user_func('my_callback_function');\n\n// Type 2: Static class method call\ncall_user_func(array('MyClass', 'myCallbackMethod'));\n\n// Type 3: Object method call\n$obj = new MyClass();\ncall_user_func(array($obj, 'myCallbackMethod'));\n\n// Type 4: Static class method call\ncall_user_func('MyClass::myCallbackMethod');\n\n// Type 5: Relative static class method call\nclass A {\n    public static function who() {\n        echo &quot;A\\n&quot;;\n    }\n}\n\nclass B extends A {\n    public static function who() {\n        echo &quot;B\\n&quot;;\n    }\n}\n\ncall_user_func(array('B', 'parent::who')); // A, deprecated as of PHP 8.2.0\n\n// Type 6: Objects implementing __invoke can be used as callables\nclass C {\n    public function __invoke($name) {\n        echo 'Hello ', $name, &quot;\\n&quot;;\n    }\n}\n\n$c = new C();\ncall_user_func($c, 'PHP!');\n?&gt;\n</code></pre>\n<ul>\n<li>PHP is a dynamically typed language, which means that by default there is no need to <code>.....</code></li>\n<li>To check the value and type of an expression, use the <code>var_dump()</code></li>\n<li>to check if an expression is of a certain type use the <code>is_type</code> functions instead.</li>\n<li>practices:</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php\n$a_bool = true;   // a bool\n$a_str  = &quot;foo&quot;;  // a string\n$a_str2 = 'foo';  // a string\n$an_int = 12;     // an int\n\necho get_debug_type($a_bool), &quot;\\n&quot;;\necho get_debug_type($a_str), &quot;\\n&quot;;\n\n// If $an_int is an integer, increment it by four\nif (is_int($an_int)) {\n    $an_int += 4;\n}\nvar_dump($an_int);\n\n// If $a_bool is a string, print it out\nif (is_string($a_bool)) {\n    echo &quot;String: $a_bool&quot;;\n}\n?&gt;\n</code></pre>\n<hr style=\"border:2px solid blue;background-color:blue;\">\n<h2 id=\"variables-scope\">Variables Scope <a class=\"heading-anchor-permalink\" href=\"#variables-scope\">#</a></h2>\n<p>see notesforproffesionals-php section 3</p>\n<ul>\n<li><strong>variable scope</strong> = visibility thought out PHP scope blocks which defined by functions, classes and a global scope.</li>\n<li><strong>Super global variable</strong>: built-in variables that are always available in <strong>all scope</strong> and to access them within functions or methods, there is no need to do <code>global $variable</code> or to pass them as parameters in your functions.\nExamples:\n<ul>\n<li><code>$GLOBALS</code> - References all variables available in global scope</li>\n<li><code>$_SERVER</code> - Server and execution environment information (info such as <code>headers,paths and script locations</code>)</li>\n<li><code>$_GET</code> - HTTP GET variables</li>\n<li><code>$_POST</code> - HTTP POST variables</li>\n<li><code>$_FILES</code> - HTTP File Upload variables</li>\n<li><code>$_COOKIE</code> - HTTP Cookies</li>\n<li><code>$_SESSION</code> - Session variables</li>\n<li><code>$_REQUEST</code> - HTTP Request variables</li>\n<li><code>$_ENV</code> - Environment variables</li>\n</ul>\n</li>\n<li><strong>Static properties and variables</strong> (inside classes declared by: <code>public static int $variable</code>) is same as <strong>global variable</strong> and doesn’t require an instantiation of the class.</li>\n<li><strong>Functions can also define static variables inside their own scope by: <code>static $variable</code></strong>. This useful for example to save data after function/method is terminated.</li>\n</ul>\n<h4 id=\"user-defined-global-variables\"><strong>User-defined global variables</strong> <a class=\"heading-anchor-permalink\" href=\"#user-defined-global-variables\">#</a></h4>\n<ul>\n<li><strong>global scope</strong> is the scope outside of any function or class.</li>\n<li>When a PHP script includes another (using <code>include</code>\nor <code>require</code>) the scope remains the same.</li>\n<li>If a script is included outside of any <code>function</code> or <code>class</code>, it’s global variables are included in the same global scope, but if a script is included from within a <code>function</code>, the variables in the included script are in the <strong>scope of the function</strong>.</li>\n</ul>\n<blockquote>\n<p>Note: Using global keyword outside a function is not an error. It can be used if the file is included from inside a function.</p>\n</blockquote>\n<ul>\n<li>To create an access <strong>user-defined global variables</strong> within the scope of a <code>function</code> or <code>class</code> method, the <code>global</code> keyword can be used OR via the <code>$GLOBALS</code> array which is a <strong>superglobal</strong> array contains references to all variables which are currently defined of the script. the variable names are the keys of the array(<code>[$variable_name =&gt; variable_content]</code>).\nFor example:</li>\n</ul>\n<pre><code class=\"language-php\">$myGlobal = &quot;global&quot;; // declare a variable outside of scope\nfunction test()\n{\n $myLocal = &quot;local&quot;; // declare variable inside of scope\n // both variables are printed\n var_dump($myLocal);//string 'local' (length=5)\n var_dump($GLOBALS[&quot;myGlobal&quot;]);//string 'global' (length=6)\n}\ntest(); // run function\n\n// only $myGlobal is printed since $myLocal is not globally scoped\nvar_dump($myLocal); //null\nvar_dump($myGlobal);//string 'global' (length=6)\n</code></pre>\n<ul>\n<li>\n<p>Two options to <strong>becoming global:</strong></p>\n<ol>\n<li><strong>global keyword</strong></li>\n</ol>\n<pre><code class=\"language-php\">function test()\n{\nglobal $myLocal;// can not be (global $myLocal=&quot;local&quot;;), it must be separated\n$myLocal = &quot;local&quot;;\nvar_dump($myLocal);\nvar_dump($GLOBALS[&quot;myGlobal&quot;]);\n}\n</code></pre>\n<ol start=\"2\">\n<li><strong><code>$GLOBALS</code> Array</strong></li>\n</ol>\n<pre><code class=\"language-php\">function test()\n{\n$GLOBALS[&quot;myLocal&quot;] = &quot;local&quot;;\n$myLocal = $GLOBALS[&quot;myLocal&quot;];\nvar_dump($myLocal);\nvar_dump($GLOBALS[&quot;myGlobal&quot;]);\n}\n\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>Note: Static variables can be assigned values which are the result of constant expressions, but dynamic expressions, such as function calls, will cause a parse error.</p>\n</blockquote>\n<ul>\n<li>variables declared inside blocks such as loops or if’s, will also be recognized and accessible outside of the block.</li>\n</ul>\n<h2 id=\"arrays\">Arrays <a class=\"heading-anchor-permalink\" href=\"#arrays\">#</a></h2>\n<ul>\n<li>define Arrays</li>\n<li>add a new variables using an index. for ex. add an item to the end of the list which contains 5 items?\n<blockquote>\n<p>Arrays can contain different types of variables according to your needs, and can even contain other arrays or objects as members.</p>\n</blockquote>\n</li>\n<li>To delete an item from an array, use the <code>.....</code> function on the member itself.</li>\n</ul>\n<p>example:\n(<a href=\"https://replit.com/@FarisubuntuDropper/phpvariablesscope2#index.php\">https://replit.com/@FarisubuntuDropper/phpvariablesscope2#index.php</a>)</p>\n<h3 id=\"useful-functions%3A\">Useful functions: <a class=\"heading-anchor-permalink\" href=\"#useful-functions%3A\">#</a></h3>\n<ul>\n<li>to print array contents and indecis use <code>print_r($array)</code></li>\n<li><code>count</code> hint: js length property</li>\n<li><code>reset</code> and <code>end</code>, first item and last item</li>\n</ul>\n<h3 id=\"stack-and-queue-functions%3A\">Stack and queue functions: <a class=\"heading-anchor-permalink\" href=\"#stack-and-queue-functions%3A\">#</a></h3>\n<ul>\n<li>Arrays can be used as stacks and queues as well.</li>\n<li>How to use <code>array_push</code>, <code>array_shift</code> <em>functions</em></li>\n</ul>\n<p>see examples:\n(<a href=\"https://replit.com/@FarisubuntuDropper/phpstringsusefulfunctions#index.php\">https://replit.com/@FarisubuntuDropper/phpstringsusefulfunctions#index.php</a>)</p>\n<h3 id=\"concatenating-arrays%3A\">Concatenating arrays: <a class=\"heading-anchor-permalink\" href=\"#concatenating-arrays%3A\">#</a></h3>\n<ul>\n<li><code>array_merge</code></li>\n</ul>\n<p>see example:\n(<a href=\"https://replit.com/@FarisubuntuDropper/phpconcatentatingsortingarrays#index.php\">https://replit.com/@FarisubuntuDropper/phpconcatentatingsortingarrays#index.php</a>)</p>\n<h3 id=\"sorting-arrays%3A\">Sorting arrays: <a class=\"heading-anchor-permalink\" href=\"#sorting-arrays%3A\">#</a></h3>\n<ul>\n<li><code>sort</code> and <code>rsort</code> (note: done on the input array and does not return a new array)</li>\n</ul>\n<h3 id=\"advanced-array-functions%3A\">Advanced array functions: <a class=\"heading-anchor-permalink\" href=\"#advanced-array-functions%3A\">#</a></h3>\n<ul>\n<li><code>array_slice</code>: returns a new array that contains a certain part of a specific array from an offset.</li>\n<li>The <code>array_splice</code> function does exactly the same as <code>array_slice</code>, however it will also remove the slice returned from the original array (in this case, the numbers variable).</li>\n</ul>\n<h4 id=\"arrays-with-keys-(instead-of-'indics)%3A\">Arrays with keys (instead of 'indics): <a class=\"heading-anchor-permalink\" href=\"#arrays-with-keys-(instead-of-'indics)%3A\">#</a></h4>\n<ul>\n<li>called <strong>associative array</strong></li>\n<li>A good example for using arrays with keys is a phone book. <em>try to define a <code>$phone_nums</code> with three names and their numbers</em></li>\n<li>To add an item to an array using a key, we use the brackets operator</li>\n<li>To check if a key exists within an array, we can use the <code>array_key_exists</code> function</li>\n<li>To extract only the keys of the array (the names), we can use the <code>array_keys</code> function</li>\n<li>To extract only the values of the array , we can use the <code>array_keys</code> function</li>\n</ul>\n<h3 id=\"multidimensional-arrays%3A\">Multidimensional arrays: <a class=\"heading-anchor-permalink\" href=\"#multidimensional-arrays%3A\">#</a></h3>\n<ul>\n<li>This type of array may contain another array as a value for a specific index:</li>\n</ul>\n<pre><code class=\"language-php\">$multiArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n// to print inner array:\nprint_r($multiArray[0]); // first array\n// to get the value from any index from the inner array:\nprint_r($multiArray[0][0]) // 1\nprint_r($multiArray[0][1]) // 2\nprint_r($multiArray[0][2]) // 3\n</code></pre>\n<ul>\n<li>We can also create an associative multidimensional array?</li>\n</ul>\n<pre><code class=\"language-php\">$people = [\n    &quot;john_doe&quot; =&gt; [\n        &quot;name&quot; =&gt; &quot;John&quot;,\n        &quot;surname&quot; =&gt; &quot;Doe&quot;,\n        &quot;age&quot; =&gt; 25,\n    ],\n    &quot;jane_doe&quot; =&gt; [\n        &quot;name&quot; =&gt; &quot;Jane&quot;,\n        &quot;surname&quot; =&gt; &quot;Doe&quot;,\n        &quot;age&quot; =&gt; 25,\n    ]\n];\n\nprint_r($people);\n</code></pre>\n<hr>\n<h2 id=\"strings\">Strings <a class=\"heading-anchor-permalink\" href=\"#strings\">#</a></h2>\n<blockquote>\n<p>for quick ref see: (<a href=\"https://www.w3schools.com/php/php_ref_string.asp\">https://www.w3schools.com/php/php_ref_string.asp</a>)</p>\n</blockquote>\n<ul>\n<li>We can also concatenate strings using the dot . operator. For example:</li>\n</ul>\n<pre><code class=\"language-php\">$name = $first_name . &quot; &quot; . $last_name;\n</code></pre>\n<ul>\n<li>To measure the length of a string, we use the <code>strlen</code> function</li>\n<li>To cut a part of a string and return it as a new string, we can use the <code>substr</code> function. For example:</li>\n</ul>\n<pre><code class=\"language-php\">$filename = &quot;image.png&quot;;\n$extension = substr($filename, strlen($filename) - 3);\n</code></pre>\n<h4 id=\"extracting%2Freplacing-substrings%3A\">Extracting/Replacing substrings: <a class=\"heading-anchor-permalink\" href=\"#extracting%2Freplacing-substrings%3A\">#</a></h4>\n<p>for examples, see : phpnotesforproffesional.pdf - Section 25.2: Substring</p>\n<ul>\n<li>Single characters can be extracted using array (square brace) syntax but now curly brace <code>{}</code> syntax is no longer supported. ex <code>$str{4}='5';</code></li>\n<li>If more charachter is needed, a function will be required, ie - <code>substr()</code></li>\n<li>Strings, like everything in PHP, are 0-indexed.</li>\n</ul>\n<p>Examples:</p>\n<pre><code class=\"language-php\">/* If there is a possibility of meeting multi-byte character strings,\n then it would be safer to use mb_substr:*/\n$sentence = &quot;هذا مكتوب بالعربية&quot;;\nvar_dump(substr($sentence,0,3));// string(3) &quot;ه�&quot;\necho &quot;&lt;hr&gt;&quot;;\nvar_dump(mb_substr($sentence,0,3,'UTF-8'));// string(6) &quot;هذا&quot;\n// substr_replace\n$foo = 'Hello world';\n// below will result in $foo= 'Hello World';\n$foo[6] = 'W';\nsubstr_replace($foo, 'W', 6, 1);\n/* note below, the replacement string need not be the same length as\n the substring replaced.*/\nsubstr_replace($foo, 'Whi', 6, 2);// result in :  'Hello Whirled'\n/* Let's say you want to find a specific word in a string - and don't\nwant to use Regex.*/\n$bye = &quot;Goodbye cruel World!&quot;;\nvar_dump(strpos($bye, &quot; &quot;)); // int(7)\nvar_dump(substr($bye, -1 * (strlen($bye) - strpos($bye, &quot; &quot;)))); // string(13) &quot; cruel World!&quot;\n\n/*Another option is a very basic parsing of an email.*/\n$email = &quot;test@example.com&quot;;\n$wrong = &quot;foobar.co.uk&quot;;\n$notld = &quot;foo@bar&quot;;\n\n$at = strpos($email, &quot;@&quot;); // int(4)\n$wat = strpos($wrong, &quot;@&quot;); // bool(false)\n$nat = strpos($notld , &quot;@&quot;); // int(3)\n$domain = substr($email, $at + 1); // string(11) &quot;example.com&quot;\n$womain = substr($wrong, $wat + 1); // string(11) &quot;oobar.co\n$nomain = substr($notld, $nat + 1); // string(3) &quot;bar&quot;\n// for complete example: noteforproffesional - page 150\n\n</code></pre>\n<h4 id=\"joining-and-splitting%3A\">Joining and splitting: <a class=\"heading-anchor-permalink\" href=\"#joining-and-splitting%3A\">#</a></h4>\n<ul>\n<li><code>explode</code> and <code>strstr</code> are simpler methods to get substrings by separators.</li>\n</ul>\n<pre><code class=\"language-php\">$fruits = &quot;apple,banana,orange&quot;;\n$fruit_list = explode(&quot;,&quot;, $fruits);\n</code></pre>\n<p>Also note other uses:</p>\n<pre><code class=\"language-php\">$fruits= 'apple,pear,grapefruit,cherry';\n// If the limit parameter is zero, then this is treated as 1:\nprint_r(explode(',',$fruits,0)); //the same result if it '1', Array ( [0] =&gt; apple,pear,grapefruit,cherry )\n// but: below the returned array will contain a maximum of limit elements with the last element containing the rest of string.\nprint_r(explode(',',$fruits,2)); // Array ( [0] =&gt; apple [1] =&gt; pear,grapefruit,cherry )\n// If the limit parameter is negative, all components except the last -limit are returned.\nprint_r(explode(',',$fruits,-1)); // ['apple', 'pear', 'grapefruit']\n// 'explode' can be combined with list to parse a string into variables in one line:\n$email = &quot;user@example.com&quot;;\nlist($name, $domain) = explode(&quot;@&quot;, $email);\necho &quot;$name &lt;br&gt;&quot;; // user\necho &quot;$domain&quot;; // example.com\n// `strstr` strips away or only returns the substring before the first occurrence of the given needle.\n$string = &quot;1:23:456&quot;;\necho json_encode(explode(&quot;:&quot;, $string)); // [&quot;1&quot;,&quot;23&quot;,&quot;456&quot;]\nvar_dump(strstr($string, &quot;:&quot;)); // string(7) &quot;:23:456&quot;\nvar_dump(strstr($string, &quot;:&quot;, true)); // string(1) &quot;1&quot;\n\n</code></pre>\n<ul>\n<li>To <strong>join</strong> back an array to a single string separated with commas, we use the <code>implode</code> function:</li>\n</ul>\n<pre><code class=\"language-php\">$fruit_list = [&quot;apple&quot;,&quot;banana&quot;,&quot;orange&quot;];\n$fruits = implode(&quot;,&quot;, $fruit_list);\n</code></pre>\n<h4 id=\"searching-a-substring-with-strpos%3A\">Searching a substring with strpos: <a class=\"heading-anchor-permalink\" href=\"#searching-a-substring-with-strpos%3A\">#</a></h4>\n<ul>\n<li><code>strpos</code> can be understood as the number of bytes in the haystack before the first occurrence of the needle.</li>\n</ul>\n<pre><code class=\"language-php\">var_dump(strpos(&quot;haystack&quot;, &quot;hay&quot;)); // int(0)\nvar_dump(strpos(&quot;haystack&quot;, &quot;stack&quot;)); // int(3)\nvar_dump(strpos(&quot;haystack&quot;, &quot;stackoverflow&quot;); // bool(false)\n</code></pre>\n<p>below, try to answer by yourself if trouble see: PHPnotesforproff.pdf page 151<p>\n<ul>\n<li><strong>Checking if a substring exists?</strong> (be careful when checking against TRUE or FALSE because if it 0 then will evaluated as FALSE)</li>\n<li><strong>Search starting from an offset</strong></li>\n<li><strong>Get all occurrences of a substring</strong></li>\n</ul>\n<h3 id=\"string-formating%3A\">String Formating: <a class=\"heading-anchor-permalink\" href=\"#string-formating%3A\">#</a></h3>\n<h4 id=\"string-interpolation%3A\">string interpolation: <a class=\"heading-anchor-permalink\" href=\"#string-interpolation%3A\">#</a></h4>\n<p>see phpnotesforprofessionals - chapter 24</p>\n<ul>\n<li>You can also use interpolation to interpolate (insert) a variable within a string. Interpolation works in double quoted\nstrings and the heredoc syntax only.</li>\n</ul>\n<h2 id=\"php-loops\">PHP Loops <a class=\"heading-anchor-permalink\" href=\"#php-loops\">#</a></h2>\n<h4 id=\"for-%2C-foreach\">For , Foreach <a class=\"heading-anchor-permalink\" href=\"#for-%2C-foreach\">#</a></h4>\n<ul>\n<li>There are two types of for loops - a simple (C style) for loop, and a foreach loop. For example:</li>\n</ul>\n<pre><code class=\"language-php\">$odd_numbers = [1,3,5,7,9];\nfor ($i = 0; $i &lt; count($odd_numbers); $i=$i+1) {\n    $odd_number = $odd_numbers[$i];\n    echo $odd_number . &quot;\\n&quot;;\n}\n</code></pre>\n<ul>\n<li><code>foreach</code> loop: iterates over an iterable element such as an array or an object, providing the members in a specific variable one at a time.</li>\n</ul>\n<pre><code class=\"language-php\">$odd_numbers = [1,3,5,7,9];\nforeach($odd_numbers as $odd_number){\n\techo $odd_number . &quot;\\n&quot;;\n}\n</code></pre>\n<ul>\n<li>When iterating over arrays with keys, we can use the following syntax:</li>\n</ul>\n<pre><code class=\"language-php\">$phone_numbers = [\n  &quot;Alex&quot; =&gt; &quot;415-235-8573&quot;,\n  &quot;Jessica&quot; =&gt; &quot;415-492-4856&quot;,\n];\n\nforeach ($phone_numbers as $name =&gt; $number) {\n  echo &quot;$name's number is $number.\\n&quot;;\n}\n</code></pre>\n<ul>\n<li>also to iterate over object:</li>\n</ul>\n<pre><code class=\"language-php\">class Student{\n    public string $name;\n    public int $age;\n    public int $level;\n    public function __construct($name,$age,$level){\n        $this-&gt;name=$name;\n        $this-&gt;age=$age;\n        $this-&gt;level=$level;\n    }\n}\n$student1=new Student(&quot;Faris&quot;,26,10);\nforeach ($student1 as $prop=&gt;$value){\n    echo &quot;$prop: &quot; . $value . &quot;\\n&quot;;\n}\n</code></pre>\n<h4 id=\"while-loops\">While loops <a class=\"heading-anchor-permalink\" href=\"#while-loops\">#</a></h4>\n<pre><code class=\"language-php\">$counter = 0;\n\nwhile ($counter &lt; 10) {\n    $counter += 1;\n    echo &quot;Executing - counter is $counter.\\n&quot;;\n}\n</code></pre>\n<h4 id=\"flow-statements%3A\">Flow statements: <a class=\"heading-anchor-permalink\" href=\"#flow-statements%3A\">#</a></h4>\n<ul>\n<li>Loops can be controlled using the break and continue flow statements, which come in handy in while loops very much. The break statement immediately quits the for loop at the middle of the block, while the continue statement returns to the top of the while loop, re-checking if the loop condition is met as well. For example:</li>\n</ul>\n<pre><code class=\"language-php\">$counter = 0;\n\nwhile ($counter &lt; 10) {\n    $counter += 1;\n\n    if ($counter % 2 == 0) {\n        echo &quot;Skipping number $counter because it is even.\\n&quot;;\n        continue;\n    }\n\n    echo &quot;Executing - counter is $counter.\\n&quot;;\n}\n</code></pre>\n<hr>\n<h2 id=\"functions\">Functions <a class=\"heading-anchor-permalink\" href=\"#functions\">#</a></h2>\n<blockquote>\n<p>See phpnotesforproffesionals - chapter 21 and chapter 22</p>\n</blockquote>\n<h4 id=\"how-to-read-a-function-definition-(prototype)%3A\">How to read a function definition (prototype): <a class=\"heading-anchor-permalink\" href=\"#how-to-read-a-function-definition-(prototype)%3A\">#</a></h4>\n<p>see (<a href=\"https://www.php.net/manual/en/about.prototypes.php\">https://www.php.net/manual/en/about.prototypes.php</a>)</p>\n<ul>\n<li><strong>All functions and classes in PHP have the global scope - they can be called outside a function even if they were defined inside and vice versa.</strong></li>\n<li><strong>PHP does not support function overloading, nor is it possible to undefine or redefine previously-declared functions.</strong></li>\n<li>There are two types of functions - library functions and user functions.</li>\n</ul>\n<h4 id=\"user-defined-functions\">User-defined functions <a class=\"heading-anchor-permalink\" href=\"#user-defined-functions\">#</a></h4>\n<pre><code class=\"language-php\">// Explain and give examples:\n\n// Conditional functions?\n$makefoo = true;\n//foo(); //not exist\nbar(); //exist\nif($makefoo){\n function foo(){echo &quot;foo() exist ...&quot;;}\n}\nfoo(); // exist\nfunction bar(){\n echo &quot;bar() exist... &lt;br&gt;&quot;;\n}\n// Function within functions?\nfunction foo()\n{\n  function bar()\n  {\n    echo &quot;I don't exist until foo() is called.\\n&quot;;\n  }\n}\nbar(); //error: bar() doesn't exist\nfoo();\nbar(); //work: bar() exist\n// Recursive functions?\nfunction recursion($a)\n{\n    if ($a &lt; 20) {\n        echo &quot;$a\\n&quot;;\n        recursion($a + 1);\n    }\n}\n\n</code></pre>\n<h4 id=\"function-arguments\">Function arguments <a class=\"heading-anchor-permalink\" href=\"#function-arguments\">#</a></h4>\n<ul>\n<li>The arguments are evaluated from left to right, before the function is actually called (eager evaluation).</li>\n<li>PHP supports passing arguments by value (the default), passing by reference, and default argument values. Variable-length argument lists and Named Arguments are also supported.</li>\n<li>The default is used only when the parameter is not specified; in particular, note that passing null does not assign the default value.</li>\n<li>The default value must be a constant expression, not (for example) a variable, a class member or a function call.</li>\n<li>Note that any optional arguments should be specified after any required arguments, otherwise they cannot be omitted from calls.</li>\n</ul>\n<pre><code class=\"language-php\">// Passing arrays to functions?\n  // &gt; write function that print total of first and second elements only\n\n// Function Argument List with trailing Comma (hint: list args vertically)\n\n// Passing arguments by reference?: To allow a function to modify its arguments, they must be passed by reference.\n\n// Default argument values?:\n\n// Using non-scalar types as default values\n&lt;?php\nfunction makecoffee($types = array(&quot;cappuccino&quot;), $coffeeMaker = NULL)\n{\n    $device = is_null($coffeeMaker) ? &quot;hands&quot; : $coffeeMaker;\n    return &quot;Making a cup of &quot;.join(&quot;, &quot;, $types).&quot; with $device.\\n&quot;;\n}\necho makecoffee();//Making a cup of cappuccino with hands.\necho makecoffee(array(&quot;cappuccino&quot;, &quot;lavazza&quot;), &quot;teapot&quot;);//Making a cup of cappuccino, lavazza with teapot.\n\n//  Using objects as default values:\n\nclass Person{\n  public function getRule(){\n   return &quot;Person &lt;br&gt;&quot;;\n  }\n}\nclass Student {\n\n  public function getRule() {\n   return &quot;Student &lt;br&gt;&quot;;\n  }\n}\nclass Employee {\n  public function getRule(){\n   return &quot;Employee &lt;br&gt;&quot;;\n  }\n}\nfunction getRule($person = new Person){ // note 'Person' without ();\nreturn $person-&gt;getRule();\n}\necho getRule(); //Person\necho getRule(new Student); // Student\necho getRule(new Employee); // Employee\n\n// another example with abstract Person class : (https://replit.com/@FarisubuntuDropper/php-Functions#index.php)\n\n// As of PHP 8.8.8,  named arguments can be used to skip over multiple optional parameters?:\nfunction makeyogurt(\n    $container = &quot;bowl&quot;, $flavour = &quot;raspberry&quot;, $style = &quot;Greek&quot;\n    )\n{ return &quot;Making a $container of $flavour $style yogurt.\\n&quot;; }\necho makeyougurt(style:&quot;natural&quot;); // Making a bowl of raspberry natural yogurt.\n\n// Variable-length argument lists?: PHP has support for variable-length argument lists in user-defined functions by using the ... token.  The arguments will be passed into the given variable as an array:\nfunction getSum(...$numbers){\n $sum = 0;\n foreach($numbers as  $number){\n  $sum += $number;\n }\n return $sum;\n}\necho getSum(1,2,3); //6\n// below, Error: unsported operand types: int+array ...\n/*\necho getSum([1,2,3]);\necho getSum(range(1,3));\necho getSum(array(1,2,3));\n*/\n\n// '...' can also be used when calling functions to unpack an array or 'Traversable' variable or literal into the argument list:\n\nfunction add($a,$b,$c){\n return $a+$b+$c;\n}\necho add(...[1,2,3]) . &quot;\\n&quot;; //3\n//echo add(...[1,2]) . &quot;\\n&quot;;// Error: ArgCountError:too few args...\n$d=[5,2];\n//echo add(...$d) . &quot;\\n&quot;;//Error: ArgCountError:too few args...\n$e=[1,2,3,4,5];\necho add(...$e) . &quot;\\n&quot;;// 6 not 15. only the first three elements.\n\n// Positional arguments versus named arguments:\n // Using positional arguments:\n array_fill(0, 100, 50);\n // Using named arguments:\n array_fill(start_index: 0, count: 100, value: 50);\n</code></pre>\n<ul>\n<li>Finally, variable arguments can also be passed by reference by prefixing the … with an ampersand (&amp;).</li>\n</ul>\n<h4 id=\"returning-values\">Returning values <a class=\"heading-anchor-permalink\" href=\"#returning-values\">#</a></h4>\n<ul>\n<li>If the return is omitted the value null will be returned.</li>\n<li>A function can not return multiple values, but similar results can be obtained by returning an array.</li>\n<li>To return a reference from a function, use the reference operator <code>&amp;</code> in both the function declaration and when assigning the returned value to a variable.</li>\n<li>Objects are always passed by reference and returned by reference:</li>\n</ul>\n<pre><code class=\"language-php\">class Obj{\n    public $x;\n}\nfunction modify($obj){\n    $obj-&gt;x++;\n    return $obj;\n}\n\n$obj1=new Obj();\n$obj2=modify($obj1);\n$obj1-&gt;x++;\necho $obj1-&gt;x . ', ' . $obj2-&gt;x; // 2,2\n$obj2-&gt;x++;\necho $obj1-&gt;x . ', ' . $obj2-&gt;x; // 3,3\n</code></pre>\n<ul>\n<li>You have to force pass by reference and return by reference on arrays:</li>\n</ul>\n<pre><code class=\"language-php\">function &amp;array_ref_inc_x(&amp;$array) {\n    $array{'x'}++; /* Array and string offset access syntax with\n                      curly braces is no longer supported...?*/\n    return $array;\n}\n\n$array = array();\n$array['x'] = 1;\n\n$array2 =&amp; array_ref_inc_x($array); # Need reference here as well as the function sig\narray_ref_inc_x($array2);\n\nprint $array['x'] . ', ' . $array2['x'] . &quot;\\n&quot;;\n</code></pre>\n<h4 id=\"variable-functions\">Variable functions <a class=\"heading-anchor-permalink\" href=\"#variable-functions\">#</a></h4>\n<ul>\n<li>If a variable name has parentheses appended to it, PHP will look for a function with the same name as whatever the variable evaluates to, and will attempt to execute it:</li>\n</ul>\n<pre><code class=\"language-php\">function foo(){\n    echo &quot;Foo() ....&quot;;\n}\n$func='foo';\n$func(); //Foo() ....\n</code></pre>\n<ul>\n<li>also, the same applied on variable method?</li>\n</ul>\n<h4 id=\"internal-(built-in)-functions\">Internal (built-in) functions <a class=\"heading-anchor-permalink\" href=\"#internal-(built-in)-functions\">#</a></h4>\n<ul>\n<li>There are functions that require specific PHP extensions compiled in, otherwise fatal “undefined function” errors will appear.</li>\n<li>A call to phpinfo() or get_loaded_extensions() will show which extensions are loaded into PHP.</li>\n</ul>\n<h4 id=\"anonymous-functions\">Anonymous functions <a class=\"heading-anchor-permalink\" href=\"#anonymous-functions\">#</a></h4>\n<ul>\n<li>also known as <strong>closures</strong>, allow the creation of functions which have no specified name.</li>\n</ul>\n<pre><code class=\"language-php\">$welcome= function ($user_name){\n    echo &quot;Hello, $user_name&quot;;\n};\n\n$welcome('John');\necho &quot;\\n&quot;;\n$welcome('Peter');\n</code></pre>\n<ul>\n<li>A closure is an anonymous function that can’t access outside scope.</li>\n<li>When defining an anonymous function as such, you’re creating a “namespace” for that function. It currently only\nhas access to that namespace.</li>\n<li>Closures may also inherit variables from the parent scope. Any such variables must be passed to the <code>use</code> language construct.</li>\n<li>Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing. The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from). See the following example:</li>\n</ul>\n<p>Example 1:</p>\n<pre><code class=\"language-php\">$message = 'hello';\n\n// No &quot;use&quot;\n$example = function () {\n    var_dump($message);\n    echo &quot;&lt;hr&gt;&quot;;\n};\n$example(); // Null, undefined variable\n\n// Inherit $message\n$example = function () use ($message) { // copy $message into the closure's scope\n    var_dump($message);\n    echo &quot;&lt;hr&gt;&quot;;\n};\n$example(); // string(5) &quot;hello&quot;\n\n// Inherited variable's value is from when the function\n// is defined, not when called\n$message = 'world';\n$example(); // string(5) &quot;hello&quot;\n\n// reset message:\n$message = &quot;hello&quot;;\n$example=function () use (&amp;$message){ // Must passed by reference if you care about their contents over time\n var_dump($message);\n echo &quot;&lt;hr&gt;&quot;;\n};\n\n$example(); //string(5) &quot;hello&quot;\n$message =&quot;World&quot;;\n\n$example(); //string(5) &quot;World&quot;\n\n// Closures can also accept regular arguments\n$example = function ($arg) use ($message) {\n var_dump($arg . ' ' . $message);\n echo &quot;&lt;hr&gt;&quot;;\n};\n$example(&quot;hello&quot;); // string(11) &quot;hello World&quot;\n\n// Return type declaration comes after the use clause\n$example = function () use ($message): string {\n return &quot;hello $message&quot;;\n};\nvar_dump($example()); // string(11) &quot;hello World&quot;\n\n</code></pre>\n<p>Example 2:</p>\n<pre><code class=\"language-php\">/* A basic shopping cart which contains a list of added products and the quantity of each product. \nIncludes a method which calculates the total price of the items in the cart using\n a closure as a callback.*/\n\nclass Cart\n{\n    const PRICE_BUTTER  = 1.00;\n    const PRICE_MILK    = 3.00;\n    const PRICE_EGGS    = 6.95;\n\n    protected $products = array();\n\n    public function add($product, $quantity)\n    {\n        $this-&gt;products[$product] = $quantity;\n    }\n\n    public function getQuantity($product)\n    {\n        return isset($this-&gt;products[$product]) ? $this-&gt;products[$product] :\n               FALSE;\n    }\n    public function getTotal($tax)\n    {\n        $total = 0.00;\n\n        $callback =\n            function ($quantity, $product) use ($tax, &amp;$total)\n            {\n                $pricePerItem = constant(__CLASS__ . &quot;::PRICE_&quot; .\n                    strtoupper($product));\n                $total += ($pricePerItem * $quantity) * ($tax + 1.0);\n            };\n\n        array_walk($this-&gt;products, $callback);\n        return round($total, 2);\n    }\n}\n$my_cart = new Cart;\n// Add some items to the cart\n$my_cart-&gt;add('butter', 1);\n$my_cart-&gt;add('milk', 3);\n$my_cart-&gt;add('eggs', 6);\n\n// Print the total with a 5% sales tax.\nprint $my_cart-&gt;getTotal(0.05) . &quot;\\n&quot;;\n// The result is 54.29\n</code></pre>\n<p>Example 3: Automatic Binding of $this</p>\n<pre><code class=\"language-php\">\n$myClosure = function() {\n    echo $this-&gt;property;\n};\n\nclass MyClass\n{\n    public $property;\n\n    public function __construct($propertyValue)\n    {\n        $this-&gt;property = $propertyValue;\n    }\n}\n\n$myInstance = new MyClass('Hello world!');\n$myBoundClosure = $myClosure-&gt;bindTo($myInstance);\n\n$myBoundClosure(); // Shows &quot;Hello world!&quot;\n</code></pre>\n<p>Example 4: An example showing how to use closures to implement a Python-like decorator pattern:</p>\n<pre><code class=\"language-php\">/*\n * My goal was that you should be able to decorate a function with any\n * other function, then call the decorated function directly:\n *\n * Define function:         $foo = function($a, $b, $c, ...) {...}\n * Define decorator:        $decorator = function($func) {...}\n * Decorate it:             $foo = $decorator($foo)\n * Call it:                 $foo($a, $b, $c, ...)\n *\n * This example show an authentication decorator for a service, using a simple\n * mock session and mock service.\n */\n\nsession_start();\n\n/*\n * Define an example decorator. A decorator function should take the form:\n * $decorator = function($func) {\n *     return function() use $func) {\n *         // Do something, then call the decorated function when needed:\n *         $args = func_get_args($func);\n *         call_user_func_array($func, $args);\n *         // Do something else.\n *     };\n * };\n */\n$authorise = function($func) {\n    return function() use ($func) {\n        if ($_SESSION['is_authorised'] == true) {\n            $args = func_get_args($func);\n            call_user_func_array($func, $args);\n        }\n        else {\n            echo &quot;Access Denied&quot;;\n        }\n    };\n};\n/*\n * Define a function to be decorated, in this example a mock service that\n * need to be authorised.\n */\n$service = function($foo) {\n    echo &quot;Service returns: $foo&quot;;\n};\n/*\n * Decorate it. Ensure you replace the origin function reference with the\n * decorated function; ie just $authorise($service) won't work, so do\n * $service = $authorise($service)\n */\n$service = $authorise($service);\n/*\n * Establish mock authorisation, call the service; should get\n * 'Service returns: test 1'.\n */\n$_SESSION['is_authorised'] = true;\n$service('test 1');\n\n/*\n * Remove mock authorisation, call the service; should get 'Access Denied'.\n */\n$_SESSION['is_authorised'] = false;\n$service('test 2');\n</code></pre>\n<h4 id=\"arrow-functions\">Arrow Functions <a class=\"heading-anchor-permalink\" href=\"#arrow-functions\">#</a></h4>\n<ul>\n<li><strong>Both anonymous functions and arrow functions are implemented using the Closure class.</strong></li>\n<li>Arrow functions have the basic form <code>fn (argument_list) =&gt; expr</code>.</li>\n<li>Arrow functions support the same features as anonymous functions, except that using variables from the parent scope is always automatic.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-php\">$z=2;\n\n$arrow_fun=fn($x)=&gt;$x+$z; // inherit parent scope automatically no need to 'use'\n\necho $arrow_fun(5); // 7\n$z=100;\necho &quot;&lt;hr&gt;&quot;;\necho $arrow_fun(5); // 7\n</code></pre>\n<h2 id=\"classes-and-objects%3A\">Classes and Objects: <a class=\"heading-anchor-permalink\" href=\"#classes-and-objects%3A\">#</a></h2>\n<blockquote>\n<p>examples from phpnotesforproffesionals.pdf chapter 26</p>\n</blockquote>\n<p>Here are some important definitions related to objects:</p>\n<ul>\n<li>Classes define how objects behave. Classes do not contain data.</li>\n<li>Objects are instances of classes, which contain data.</li>\n<li>Members are variables that belong to an object.</li>\n<li>Methods are functions that belong to an object, and have access to its members.</li>\n<li>Constructor is a special method that is executed when an object is created.</li>\n<li>PHP treats objects in the same way as references or handles, meaning that each variable contains an object reference rather than a copy of the entire object.</li>\n<li>The pseudo-variable <code>$this</code> is available when a method is called from within an object context. $this is the value of the calling object.</li>\n<li><strong>class member properties</strong> are defined by using at least one modifier (such as Visibility(<code>public,private,protected</code>), <code>Static</code> Keyword and followed by a variable declaration which may include an initialization but Must be a <code>constant</code> value.</li>\n<li>typed properties (<code>int,string,...</code>) Must be initialized before accessing, otherwise an ERROR is thrown.</li>\n</ul>\n<h2 id=\"class-constants\">Class Constants <a class=\"heading-anchor-permalink\" href=\"#class-constants\">#</a></h2>\n<ul>\n<li>It is possible to define constants on a per-class basis remaining the same and unchangeable and can be redefined by a child class except when it defined as <code>final</code>.</li>\n<li><strong>Remember: constants and class constants not like a regular variables so not prefixed with <code>$</code></strong></li>\n<li>The default visibility of class constants is <code>public</code>.</li>\n<li>Class constants can only be defined with the <code>const</code> keyword - the <code>define</code> function cannot be used in this context.</li>\n<li>Outside class, Class constants may be accessed by using the double colon operator (so-called the <strong>scope resolution operator</strong>) on a class, much like static variables. Unlike static variables, however, class constants have their values fixed at <strong>compile time</strong> and cannot be reassigned to (e.g. <code>MathValues::PI = 7</code> would produce a fatal error).</li>\n<li>We can reference class constants internally (inside the class) using the <code>self</code> scope resolutor (which works in both instanced and static implementations). For example:</li>\n</ul>\n<pre><code class=\"language-php\">class Labor {\n/** How long, in hours, does it take to build the item? */\nconst LABOR_UNITS = 0.26; // defualt is public but can 'private','protected'\n/** How much are we paying employees per hour? */\nconst LABOR_COST = 12.75;\n// also we can do this: 'const LABOR_COST=12.75 * 0.26;'\npublic function getLaborCost($number_units) {\n// accessing constant internally using `self`\nreturn (self::LABOR_UNITS * self::LABOR_COST) * $number_units;\n }\n}\n//access class constant outside its class:\necho Labor::LABOR_UNITS; // note no $\n//\n$labor=new Labor();\necho $labor-&gt;getLaborCost(4); // 13.26\n\n</code></pre>\n<h4 id=\"abstract-classes%3A\">Abstract Classes: <a class=\"heading-anchor-permalink\" href=\"#abstract-classes%3A\">#</a></h4>\n<ul>\n<li>An abstract class is a class that cannot be instantiated. Abstract classes can define abstract methods, which are methods without any body, only a definition.</li>\n<li>Any class that contains at least one abstract method must also be abstract.</li>\n<li>When inheriting from an abstract class, all methods marked abstract in the parent’s class declaration must be defined by the child class.</li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-php\">abstract class AbstractClass\n{\n    // Force Extending class to define this method\n    abstract protected function getValue();\n    abstract protected function prefixValue($prefix);\n    // Common method\n    public function printOut() {\n        print $this-&gt;getValue() . &quot;\\n&quot;;\n    }\n}\nclass ConcreteClass1 extends AbstractClass\n{\n    protected function getValue() {\n        return &quot;ConcreteClass1&quot;;\n    }\n    public function prefixValue($prefix) { //note visibility can be changed\n        return &quot;{$prefix}ConcreteClass1&quot;;\n    }\n    /* also you can define optional arguments such\n    public function prefixValue($prefix,$seperator=':'){\n      return &quot;{prefix}{$seperator}ConcreteClass1&quot;;\n    }\n    */\n}\nclass ConcreteClass2 extends AbstractClass\n{\n    public function getValue() {\n        return &quot;ConcreteClass2&quot;;\n    }\n    public function prefixValue($prefix) {\n        return &quot;{$prefix}ConcreteClass2&quot;;\n    }\n}\n\n$class1 = new ConcreteClass1;\n$class1-&gt;printOut();\necho $class1-&gt;prefixValue('FOO_') .&quot;\\n&quot;;\n\n$class2 = new ConcreteClass2;\n$class2-&gt;printOut();\necho $class2-&gt;prefixValue('FOO_') .&quot;\\n&quot;;\n</code></pre>\n<h4 id=\"how-to-distinguish-between-abstract-class-and-interface%3A\">How to Distinguish between Abstract class and Interface: <a class=\"heading-anchor-permalink\" href=\"#how-to-distinguish-between-abstract-class-and-interface%3A\">#</a></h4>\n<ul>\n<li>An Interface is like a protocol. It doesn’t designate the behavior of the object; it designates how your code tells that object to act. Defining an interface defines how your code communicates with any object implementing that interface.</li>\n<li>An interface is always an agreement or a promise. When a class says “I implement interface Y”, it is saying “I promise to have the same public methods that any object with interface Y has”.</li>\n<li>You would have your class implement a particular interface if you were distributing a class to be used by other people.</li>\n</ul>\n<p>On other hand:</p>\n<ul>\n<li>an Abstract Class is like a partially built class. It is much like a document with blanks to fill in. It is the foundation for another object.</li>\n<li>When a class says “I extend abstract class Y”, it is saying “I use some methods or properties already defined in this other class named Y”.</li>\n<li>You would have your class extend an abstract class if you (or someone else) wrote a class that already had some methods written that you want to use in your new class.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-php\">// this is saying that &quot;X&quot; agrees to speak language &quot;Y&quot; with your code.\nclass X implements Y { }\n// this is saying that &quot;X&quot; is going to complete the partial class &quot;Y&quot;.\nclass X extends Y { }\n</code></pre>\n<blockquote>\n<p><strong>For all intents and purposes, if you’re the only user of any of your classes, you don’t need to implement interfaces.</strong></p>\n</blockquote>\n<h4 id=\"summary-of-differences-between-abstract-class-and-interface\">Summary of differences between abstract class and interface <a class=\"heading-anchor-permalink\" href=\"#summary-of-differences-between-abstract-class-and-interface\">#</a></h4>\n<p>From: (<a href=\"https://www.javatpoint.com/php-oops-difference-between-abstract-class-and-interface\">https://www.javatpoint.com/php-oops-difference-between-abstract-class-and-interface</a>)</p>\n<p><strong>Abstract class:</strong></p>\n<ul>\n<li>Abstract class comes under partial abstraction.</li>\n<li>Abstract classes can maintain abstract methods and non abstract methods.</li>\n<li>In abstract classes, we can create the variables/properties.</li>\n<li>In abstract classes, we can use any access specifier.</li>\n<li>By using ‘extends’ keyword we can access the abstract class features from derived class.</li>\n<li>Multiple inheritance is <strong>not possible</strong>.</li>\n</ul>\n<p><strong>Interface:</strong></p>\n<ul>\n<li>Interface comes under fully abstraction.</li>\n<li>Interfaces can maintain only abstract methods.</li>\n<li>In interfaces, we can’t create the variables/properties.</li>\n<li>In interface, we can use only public access specifier.</li>\n<li>By using ‘implement’ keyword we can get interface from derived class.</li>\n<li>By using interfaces multible inheritance is <strong>possible</strong>.</li>\n</ul>\n<p><strong>Important Notes:</strong></p>\n<ul>\n<li>Interfaces can be extended like classes using the <code>extends</code> operator.</li>\n<li>When inheriting from an abstract class, all methods marked abstract in the parent’s class declaration must be defined by the child (or the child itself must also be marked abstract); additionally, <strong>these methods must be defined with the same (or a less restricted) visibility</strong>. For example, if the abstract method is defined as protected, the function implementation must be defined as either protected or public, but not private.</li>\n<li>When abstract classes implement interfaces, they <strong>do not need to implement all methods</strong>. Any method not implemented in the base class must then be implemented by the <strong>concrete class</strong> <em>(a class that we can create an instance of, using the <code>new</code> keyword)</em> that extends it. example: (<a href=\"https://replit.com/@FarisubuntuDropper/InterfaceInheritance-1\">https://replit.com/@FarisubuntuDropper/InterfaceInheritance-1</a>)</li>\n</ul>\n<blockquote>\n<p>In PHP, <strong>polymorphism</strong> means that if B is a descendant of A and a function can accept A as a parameter, then it can also accept B as a parameter.</p>\n</blockquote>\n<p>Try below examples:</p>\n<ul>\n<li>Good Example: (<a href=\"https://replit.com/@FarisubuntuDropper/howabstractinterfaceworktogether#index.php\">https://replit.com/@FarisubuntuDropper/howabstractinterfaceworktogether#index.php</a>)</li>\n<li>Basic interface use: (<a href=\"https://replit.com/@FarisubuntuDropper/interfaceexample1\">https://replit.com/@FarisubuntuDropper/interfaceexample1</a>)</li>\n<li>interface inherit another interface: (<a href=\"https://replit.com/@FarisubuntuDropper/interfaceexample2Extendable#index.php\">https://replit.com/@FarisubuntuDropper/interfaceexample2Extendable#index.php</a>)</li>\n<li>Example #5 Interfaces with constants: (<a href=\"https://replit.com/@FarisubuntuDropper/example3-Variance-compatibility-with-multiple-interfaces#index.php\">https://replit.com/@FarisubuntuDropper/example3-Variance-compatibility-with-multiple-interfaces#index.php</a>)</li>\n<li>Example #6 Interfaces with abstract classes: (<a href=\"https://replit.com/@FarisubuntuDropper/Interfaces-with-abstract-classes\">https://replit.com/@FarisubuntuDropper/Interfaces-with-abstract-classes</a>)</li>\n<li>Example #7 Another good example of implementing an interface (<a href=\"https://replit.com/@FarisubuntuDropper/another-interface-usage\">https://replit.com/@FarisubuntuDropper/another-interface-usage</a>)</li>\n</ul>\n<h2 id=\"traits\">Traits <a class=\"heading-anchor-permalink\" href=\"#traits\">#</a></h2>\n<ul>\n<li>Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce some limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.</li>\n<li>It is not possible to instantiate a Trait on its own like as class.</li>\n<li>Its is an addition to traditional inheritance and enables the application of class members without requiring inheritance.</li>\n</ul>\n<p>Examples:</p>\n<ul>\n<li>Basic Usage: (<a href=\"https://replit.com/@FarisubuntuDropper/Example-1-Trait-example#index.php\">https://replit.com/@FarisubuntuDropper/Example-1-Trait-example#index.php</a>)</li>\n</ul>\n<h2 id=\"constructors-and-destructors\">Constructors and Destructors <a class=\"heading-anchor-permalink\" href=\"#constructors-and-destructors\">#</a></h2>\n<p>(<a href=\"https://www.php.net/manual/en/language.oop5.decon.php\">https://www.php.net/manual/en/language.oop5.decon.php</a>)</p>\n<ul>\n<li>Parent constructors are not called <strong>implicitly</strong> if the child class defines a constructor.</li>\n<li>to run a parent constructor, a call to <code>parent::__construct()</code> within the child constructor is required. If the child does not define a constructor then it may be inherited from the parent class just like a normal class method (if it was not declared as private).</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"language-php\">&lt;?php\nclass Point {\n    protected int $x;\n    protected int $y;\n\n    public function __construct(int $x, int $y = 0) {\n        $this-&gt;x = $x;\n        $this-&gt;y = $y;\n    }\n}\n\n// Pass both parameters.\n\n$p1 = new Point(4, 5);\n/* Pass only the required parameter. $y will take its default\n value of 0.*/\n$p2 = new Point(4);\n// With named parameters (as of PHP 8.0):\n$p3 = new Point(y: 5, x: 4);\n?&gt;\n</code></pre>\n<ul>\n<li>When a constructor argument includes a visibility modifier(<code>public,private,protected</code>), PHP will interpret it as both an object property (<em>promoted property</em>) and a constructor argument, and assign the argument value to the property. For example instead of doing this:</li>\n</ul>\n<pre><code class=\"language-php\">// Instead of this:\n\nclass CustomerDTO\n{\n    public string $name;\n    public string $email;\n    public DateTimeImmutable $birth_date;\n    public function __construct(\n        string $name,\n        string $email,\n        DateTimeImmutable $birth_date\n    ) {\n        $this-&gt;name = $name;\n        $this-&gt;email = $email;\n        $this-&gt;birth_date = $birth_date;\n    }\n}\n\n// You would write this:\n\nclass CustomerDTO\n{\n\n    // __construct parameters you want to be promoted object property should prefixed with visibility keyword.\n    public function __construct(\n        public string $name,\n        public string $email,\n        public DateTimeImmutable $birth_date,\n    ) {}\n}\n\n</code></pre>\n<ul>\n<li><strong>Promoted properties can only be used in constructors</strong>.</li>\n<li>You’re not able to declare a class property and a promoted property with the same name.</li>\n<li>Not all arguments need to be promoted. It is possible to mix and match promoted and not-promoted arguments, in any order.</li>\n</ul>\n<p>Try this example: <a href=\"https://replit.com/@FarisubuntuDropper/abstractclassescarexample#index.php\">https://replit.com/@FarisubuntuDropper/abstractclassescarexample#index.php</a></p>\n<h4 id=\"static-creation-methods%3A\">Static creation methods: <a class=\"heading-anchor-permalink\" href=\"#static-creation-methods%3A\">#</a></h4>\n<ul>\n<li>PHP only supports a single constructor per class. In some cases, however, it may be desirable to allow an object to be constructed in different ways with different inputs. The recommended way to do so is by using <strong>static</strong> methods as constructor wrappers. For Example:</li>\n</ul>\n<pre><code class=\"language-php\">class Product {\n\n    private ?int $id;\n    private ?string $name;\n\n    private function __construct(?int $id = null, ?string $name = null) {\n        $this-&gt;id = $id;\n        $this-&gt;name = $name;\n    }\n\n   public static function fromBasicData(int $id, string $name): static {\n        $new = new static($id, $name);\n        return $new;\n    }\n\n    public static function fromJson(string $json): static {\n        $data = json_decode($json);\n        return new static($data['id'], $data['name']);\n    }\n    public static function fromXml(string $xml): static {\n        // Custom logic here.\n        $data = convert_xml_to_array($xml);\n        $new = new static();\n        $new-&gt;id = $data['id'];\n        $new-&gt;name = $data['name'];\n        return $new;\n    }\n}\n\n/* Below, the three public static methods then demonstrate\ndifferent ways of instantiating the object.*/\n\n/*fromBasicData() takes the exact parameters that are needed,\n then creates the object by calling the constructor and\n  returning the result.*/\n$p1 = Product::fromBasicData(5, 'Widget');\necho $p1-&gt;name  //'Widget'\n/*fromJson() accepts a JSON string and does some pre-processing\n on it itself to convert it into the format desired by the\n  constructor. It then returns the new object.*/\n$p2 = Product::fromJson($some_json_string);\n\n/*fromXml() accepts an XML string, preprocesses it, and then\n creates a bare object. The constructor is still called, but\n  as all of the parameters are optional the method skips\n  them. It then assigns values to the object properties directly\n   before returning the result.*/\n$p3 = Product::fromXml($some_xml_string);\n\n/* Note: in all three cases, the static keyword is translated\n into the name of the class the code is in. In this case, Product.*/\n</code></pre>\n<h4 id=\"destructors%3A\">Destructors: <a class=\"heading-anchor-permalink\" href=\"#destructors%3A\">#</a></h4>\n<ul>\n<li>Like constructors, parent destructors will not be called implicitly by the engine. In order to run a parent destructor, one would have to explicitly call <code>parent::__destruct()</code> in the destructor body. Also like constructors, a child class may inherit the parent’s destructor if it does not implement one itself. For example:</li>\n</ul>\n<pre><code class=\"language-php\">class MyDestructableClass\n{\n    function __construct() {\n        print &quot;In constructor\\n&quot;;\n    }\n    /* The destructor method will be called as soon as there\n     are no other references to a particular object, or in\n      any order during the shutdown sequence.*/\n    function __destruct() {\n        print &quot;Destroying &quot; . __CLASS__ . &quot;\\n&quot;;\n    }\n}\n\n$obj = new MyDestructableClass();\n</code></pre>\n<h2 id=\"object-inheritance\">Object Inheritance <a class=\"heading-anchor-permalink\" href=\"#object-inheritance\">#</a></h2>\n<ul>\n<li>When extending a class, the subclass inherits all of the public and protected methods, properties and constants from the parent class. Unless a class overrides those methods, they will retain their original functionality.</li>\n<li>Private methods of a parent class are not accessible to a child class. As a result, child classes may reimplement a private method themselves without regard for normal inheritance rules.</li>\n<li>It is not allowed to override a read-write property with a readonly property or vice versa. For example:</li>\n</ul>\n<pre><code class=\"language-php\">class A {\n    public int $prop;\n}\nclass B extends A {\n    // Illegal: read-write -&gt; readonly\n    public readonly int $prop;\n}\n</code></pre>\n<h2 id=\"visibility\">Visibility <a class=\"heading-anchor-permalink\" href=\"#visibility\">#</a></h2>\n<ul>\n<li>Class members declared public can be accessed everywhere. Members declared protected can be accessed only within the class itself and by inheriting and parent classes. Members declared as private may only be accessed by the class that defines the member.</li>\n</ul>\n<h4 id=\"property-visibility\">Property Visibility <a class=\"heading-anchor-permalink\" href=\"#property-visibility\">#</a></h4>\n<ul>\n<li><code>private,protected,public</code> …</li>\n</ul>\n<h4 id=\"public-and-private-functions\">Public and private functions <a class=\"heading-anchor-permalink\" href=\"#public-and-private-functions\">#</a></h4>\n<ul>\n<li>Example:</li>\n</ul>\n<pre><code class=\"language-php\">class Student {\n    // constructor should be public\n    public function __construct($first_name, $last_name) {\n        $this-&gt;first_name = $first_name;\n        $this-&gt;last_name = $last_name;\n    }\n    // For external use (accessed through an 'object)\n    public function say_name() {\n        echo &quot;My name is &quot; . $this-&gt;full_name() . &quot;\\n&quot;;\n    }\n    // For internal use\n    private function full_name() {\n        return $this-&gt;first_name . &quot; &quot; . $this-&gt;last_name;\n    }\n}\n$alex = new Student(&quot;Alex&quot;, &quot;Jones&quot;);\n$alex-&gt;say_name();\n// this will not work\n// echo $alex-&gt;full_name();\n</code></pre>\n<h4 id=\"method-visibility%3A\">Method Visibility: <a class=\"heading-anchor-permalink\" href=\"#method-visibility%3A\">#</a></h4>\n<ul>\n<li>Methods declared without any explicit visibility keyword are defined as public.</li>\n</ul>\n<p>See Example: (<a href=\"https://replit.com/@FarisubuntuDropper/php-method-visibility#index.php\">https://replit.com/@FarisubuntuDropper/php-method-visibility#index.php</a>)</p>\n<h4 id=\"constant-visibility%3A\">Constant Visibility: <a class=\"heading-anchor-permalink\" href=\"#constant-visibility%3A\">#</a></h4>\n<ul>\n<li>Constants declared without any explicit visibility keyword are defined as public.</li>\n</ul>\n<p>Example: (<a href=\"https://replit.com/@FarisubuntuDropper/php-Constant-Visibility#index.php\">https://replit.com/@FarisubuntuDropper/php-Constant-Visibility#index.php</a>)</p>\n<h4 id=\"visibility-from-other-objects%3A\">Visibility from other objects: <a class=\"heading-anchor-permalink\" href=\"#visibility-from-other-objects%3A\">#</a></h4>\n<ul>\n<li>Objects of the same type will have access to each others private and protected members even though they are not the same instances.\nExample: (<a href=\"https://replit.com/@FarisubuntuDropper/php-Visibility-from-other-objects#index.php\">https://replit.com/@FarisubuntuDropper/php-Visibility-from-other-objects#index.php</a>)</li>\n</ul>\n<hr>\n<h2 id=\"namespaces%3A\">Namespaces: <a class=\"heading-anchor-permalink\" href=\"#namespaces%3A\">#</a></h2>\n<ul>\n<li>Before, see the basic usage: (<a href=\"https://www.php.net/manual/en/language.namespaces.basics.php\">https://www.php.net/manual/en/language.namespaces.basics.php</a>) [Example: (<a href=\"https://replit.com/@FarisubuntuDropper/php-namespace-basics#index.php\">https://replit.com/@FarisubuntuDropper/php-namespace-basics#index.php</a>)]</li>\n</ul>\n<h4 id=\"overview\">Overview <a class=\"heading-anchor-permalink\" href=\"#overview\">#</a></h4>\n<ul>\n<li>Namespaces are a way of encapsulating items.</li>\n<li>For example: directories serve to group related files, and act as a namespace for the files within them.</li>\n<li>In PHP, namespaces are designed to solve two probelms:\n<ol>\n<li>Name collisions between code you create, and internal PHP classes/functions/constants or third-party classes/functions/constants.</li>\n<li>Ability to alias (or shorten) Extra_Long_Names designed to alleviate the first problem, improving readability of source code.</li>\n</ol>\n</li>\n<li>A namespace declaration can look as follows:</li>\n</ul>\n<pre><code class=\"language-php\">namespace MyProject; // Declare the namespace MyProject\nnamespace MyProject\\Security\\Cryptography; // Declare a nested namespace\nnamespace MyProject { ... } // Declare a namespace with enclosing brackets.\n</code></pre>\n<p><strong>Namespaces Notes:</strong></p>\n<ul>\n<li>Namespace names are case-insensitive.</li>\n<li>The Namespace name PHP, and compound names starting with this name (like PHP\\Classes) are reserved for internal language use and should not be used in the userspace code.</li>\n<li>Fully qualified names (i.e. names starting with a backslash) are not allowed in namespace declarations, because such constructs are interpreted as relative namespace expressions.</li>\n<li><code>namespace</code> statement is defined at first of the php files. But before namespace declaration only three elements allowed. [ex. 2]\n<ol>\n<li><code>declare</code> statement</li>\n<li>spaces</li>\n<li>comments</li>\n</ol>\n</li>\n<li>Unlike any other PHP construct, the same namespace may be defined in multiple files, allowing splitting up of a namespace’s contents across the filesystem.</li>\n<li>It is recommended to only declare a single namespace per file, even though you can declare as many as you like in\na single file.</li>\n<li>Every time you declare a namespace, classes you define after that will belong to that namespace:</li>\n</ul>\n<pre><code class=\"language-php\">namespace MyProject\\Shapes;\nclass Rectangle { ... }\nclass Square { ... }\nclass Circle { ... }\n\n/*A namespace declaration can be used multiple times\n in different files. The example above defined three\n  classes in the MyProject\\Shapes namespace in a single file.\n   Preferably this would be split up into three files,\n   each starting with namespace MyProject\\Shapes;*/\n</code></pre>\n<blockquote>\n<p><strong>see phpnotesforProffesionals.php chapter 27: Namespaces</strong></p>\n</blockquote>\n<p><strong>Namespaces Examples:</strong></p>\n<ol>\n<li>Namespace syntax example: (<a href=\"https://replit.com/@FarisubuntuDropper/php-namespace-1#index.php\">https://replit.com/@FarisubuntuDropper/php-namespace-1#index.php</a>)</li>\n<li>namespace decleration : (<a href=\"https://replit.com/@FarisubuntuDropper/php-namespace-2#index.php\">https://replit.com/@FarisubuntuDropper/php-namespace-2#index.php</a>)</li>\n<li>define constant and explicit constant use: (<a href=\"https://replit.com/@FarisubuntuDropper/php-define-namespace-constant-1\">https://replit.com/@FarisubuntuDropper/php-define-namespace-constant-1</a>)</li>\n<li>Declaring a single namespace with hierarchy: (<a href=\"https://replit.com/@FarisubuntuDropper/Declaring-a-single-namespace-with-hierarchy#\">https://replit.com/@FarisubuntuDropper/Declaring-a-single-namespace-with-hierarchy#</a>)</li>\n<li>Defining multiple namespaces in the same file (<a href=\"https://replit.com/@FarisubuntuDropper/php-Defining-multiple-namespaces-in-the-same-file#index.php\">https://replit.com/@FarisubuntuDropper/php-Defining-multiple-namespaces-in-the-same-file#index.php</a>)</li>\n<li>Namespaces and Multiple files (<a href=\"https://replit.com/@FarisubuntuDropper/php-namespace-in-multiple-files-1#index.php\">https://replit.com/@FarisubuntuDropper/php-namespace-in-multiple-files-1#index.php</a>)</li>\n<li>Declaring sub-namesapce: (<a href=\"https://replit.com/@FarisubuntuDropper/php-Declaring-sub-namespaces#index.php\">https://replit.com/@FarisubuntuDropper/php-Declaring-sub-namespaces#index.php</a>)</li>\n</ol>\n<h2 id=\"exceptions\">Exceptions <a class=\"heading-anchor-permalink\" href=\"#exceptions\">#</a></h2>\n<ul>\n<li>Example:</li>\n</ul>\n<pre><code class=\"language-php\">//  Each try must have at least one corresponding catch or finally block.\ntry {\n  echo 2 / 0;\n} catch (Exception $e) {\n  echo &quot;Caught exception: Division by zero!&quot;;\n}\n\n</code></pre>\n<p>Multiple catch blocks can be used to catch different classes of exceptions:</p>\n<pre><code class=\"language-php\">if (4/2 == 2) {\n  echo &quot;Right!&quot;;\n} else {\n  throw new Exception(&quot;Wrong answer!&quot;);\n}\n</code></pre>\n<h1 id=\"resources-%7B%23identifier-resources%7D\">Resources {#identifier resources} <a class=\"heading-anchor-permalink\" href=\"#resources-%7B%23identifier-resources%7D\">#</a></h1>\n<ul>\n<li><a href=\"https://www.learn-php.org\">https://www.learn-php.org</a></li>\n<li>PHP notes for proffesionals (commented copy inside pdfs folder)</li>\n<li><a href=\"https://www.php.net/manual/en/\">https://www.php.net/manual/en/</a></li>\n</ul>\n",
      "id": 42
    },
    {
      "path": "PHP/php_iterators.md",
      "url": "PHP/php_iterators.html",
      "content": "## PHP Iterators:\n\n- An **iterable** is any value which can be looped through with a `foreach()` loop.\n- The `iterable` keyword can be used as a data type of a `function` argument or as the `return` type of a function. w3schools (https://www.w3schools.com/php/php_iterables.asp)\n\n### PHP - Creating Iterables\n\n- All arrays are iterables, so any array can be used as an argument of a function that requires an iterable.\n\n- **Iterators**: Any object that implements the `Iterator interface` can be used as an argument of a function that requires an iterable.\n\nAn `iterator` contains a list of items and provides methods to loop through them. It keeps a *pointer* to one of the elements in the list. Each item in the list should have a `key` which can be used to find the item.\n\nAn iterator must have these methods:\n\n- *current*() - Returns the element that the pointer is currently pointing to. It can be any data type\n- *key*() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string\n- *next*() Moves the pointer to the next element in the list\n- *rewind*() Moves the pointer to the first element in the list\n- *valid*() If the internal pointer is not pointing to any element (for example, if *next*() was called at the end of the list), this should return `false`. It returns `true` in any other case\n\nExample: Implement the Iterator interface and use it as an iterable:\n\n```php\n<?php\n// Create an Iterator\nclass MyIterator implements Iterator {\n  private $items = [];\n  private $pointer = 0;\n\n  public function __construct($items) {\n    // array_values() makes sure that the keys are numbers\n    $this->items = array_values($items);\n  }\n\n  public function current() {\n    return $this->items[$this->pointer];\n  }\n\n  public function key() {\n    return $this->pointer;\n  }\n\n  public function next() {\n    $this->pointer++;\n  }\n\n  public function rewind() {\n    $this->pointer = 0;\n  }\n\n  public function valid() {\n    // count() indicates how many items are in the list\n    return $this->pointer < count($this->items);\n  }\n}\n\n// A function that uses iterables\nfunction printIterable(iterable $myIterable) {\n  foreach($myIterable as $item) {\n    echo $item;\n  }\n}\n\n// Use the iterator as an iterable\n$iterator = new MyIterator([\"a\", \"b\", \"c\"]);\nprintIterable($iterator);\n?> \n```",
      "html": "<h2 id=\"php-iterators%3A\">PHP Iterators: <a class=\"heading-anchor-permalink\" href=\"#php-iterators%3A\">#</a></h2>\n<ul>\n<li>An <strong>iterable</strong> is any value which can be looped through with a <code>foreach()</code> loop.</li>\n<li>The <code>iterable</code> keyword can be used as a data type of a <code>function</code> argument or as the <code>return</code> type of a function. w3schools (<a href=\"https://www.w3schools.com/php/php_iterables.asp\">https://www.w3schools.com/php/php_iterables.asp</a>)</li>\n</ul>\n<h3 id=\"php---creating-iterables\">PHP - Creating Iterables <a class=\"heading-anchor-permalink\" href=\"#php---creating-iterables\">#</a></h3>\n<ul>\n<li>\n<p>All arrays are iterables, so any array can be used as an argument of a function that requires an iterable.</p>\n</li>\n<li>\n<p><strong>Iterators</strong>: Any object that implements the <code>Iterator interface</code> can be used as an argument of a function that requires an iterable.</p>\n</li>\n</ul>\n<p>An <code>iterator</code> contains a list of items and provides methods to loop through them. It keeps a <em>pointer</em> to one of the elements in the list. Each item in the list should have a <code>key</code> which can be used to find the item.</p>\n<p>An iterator must have these methods:</p>\n<ul>\n<li><em>current</em>() - Returns the element that the pointer is currently pointing to. It can be any data type</li>\n<li><em>key</em>() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string</li>\n<li><em>next</em>() Moves the pointer to the next element in the list</li>\n<li><em>rewind</em>() Moves the pointer to the first element in the list</li>\n<li><em>valid</em>() If the internal pointer is not pointing to any element (for example, if <em>next</em>() was called at the end of the list), this should return <code>false</code>. It returns <code>true</code> in any other case</li>\n</ul>\n<p>Example: Implement the Iterator interface and use it as an iterable:</p>\n<pre><code class=\"language-php\">&lt;?php\n// Create an Iterator\nclass MyIterator implements Iterator {\n  private $items = [];\n  private $pointer = 0;\n\n  public function __construct($items) {\n    // array_values() makes sure that the keys are numbers\n    $this-&gt;items = array_values($items);\n  }\n\n  public function current() {\n    return $this-&gt;items[$this-&gt;pointer];\n  }\n\n  public function key() {\n    return $this-&gt;pointer;\n  }\n\n  public function next() {\n    $this-&gt;pointer++;\n  }\n\n  public function rewind() {\n    $this-&gt;pointer = 0;\n  }\n\n  public function valid() {\n    // count() indicates how many items are in the list\n    return $this-&gt;pointer &lt; count($this-&gt;items);\n  }\n}\n\n// A function that uses iterables\nfunction printIterable(iterable $myIterable) {\n  foreach($myIterable as $item) {\n    echo $item;\n  }\n}\n\n// Use the iterator as an iterable\n$iterator = new MyIterator([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]);\nprintIterable($iterator);\n?&gt; \n</code></pre>\n",
      "id": 43
    },
    {
      "path": "PHP/wget-ultimate-examples.md",
      "url": "PHP/wget-ultimate-examples.html",
      "content": "\nhttps://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/\n\n> wget utility is the best option to download files from internet. wget can pretty much handle all complex download situations including large file downloads\n\n# The Ultimate Wget Download Guide With 15 Awesome Examples\n\n\n![15 Practical Examples to Download Images and Videos from Internet](https://static.thegeekstuff.com/wp-content/uploads/2009/10/15-wget-examples-300x257.png)\n\n**wget** handle all complex download situations including large file downloads, recursive downloads, non-interactive downloads, multiple file downloads etc.,\n\n### 1\\. Download Single File with wget\n\n<div class=\"box\">\nThe following example downloads a single file from internet and stores in the current directory.\n\n$ wget http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\n\nWhile downloading it will show a progress bar with the following information:\n\n*   %age of download completion (for e.g. 31% as shown below)\n*   Total amount of bytes downloaded so far (for e.g. 1,213,592 bytes as shown below)\n*   Current download speed (for e.g. 68.2K/s as shown below)\n*   Remaining time to download (for e.g. eta 34 seconds as shown below)\n\nDownload in progress:\n\n$ wget http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\nSaving to: \\`strx25-0.9.2.1.tar.bz2.1'\n\n31% \\[=================> 1,213,592   68.2K/s  eta 34s\n\nDownload completed:\n\n$ wget http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\nSaving to: \\`strx25-0.9.2.1.tar.bz2'\n\n100%\\[======================>\\] 3,852,374   76.8K/s   in 55s    \n\n2009-09-25 11:15:30 (68.7 KB/s) - \\`strx25-0.9.2.1.tar.bz2' saved \\[3852374/3852374\\]\n\n### 2\\. Download and Store With a Different File name Using wget -O\n\nBy default wget will pick the filename from the last word after last forward slash, which may not be appropriate always.\n\n**Wrong:** Following example will download and store the file with name: download\\_script.php?src\\_id=7701\n\n$ wget http://www.vim.org/scripts/download\\_script.php?src\\_id=7701\n\nEven though the downloaded file is in zip format, it will get stored in the file as shown below.\n\n$ ls\ndownload\\_script.php?src\\_id=7701\n\n**Correct:** To correct this issue, we can specify the output file name using the -O option as:\n\n$ wget -O taglist.zip http://www.vim.org/scripts/download\\_script.php?src\\_id=7701\n\n### 3\\. Specify Download Speed / Download Rate Using wget –limit-rate\n\nWhile executing the wget, by default it will try to occupy full possible bandwidth. This might not be acceptable when you are downloading huge files on production servers. So, to avoid that we can limit the download speed using the –limit-rate as shown below.\n\nIn the following example, the download speed is limited to 200k\n\n$ wget --limit-rate=200k http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\n\n### 4\\. Continue the Incomplete Download Using wget -c\n\nRestart a download which got stopped in the middle using wget -c option as shown below.\n\n$ wget -c http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\n\nThis is very helpful when you have initiated a very big file download which got interrupted in the middle. Instead of starting the whole download again, you can start the download from where it got interrupted using option -c\n\n**Note:** If a download is stopped in middle, when you restart the download again without the option -c, wget will append .1 to the filename automatically as a file with the previous name already exist. If a file with .1 already exist, it will download the file with .2 at the end.\n\n### 5\\. Download in the Background Using wget -b\n\nFor a huge download, put the download in background using wget option -b as shown below.\n\n$ wget -b http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\nContinuing in background, pid 1984.\nOutput will be written to \\`wget-log'.\n\nIt will initiate the download and gives back the shell prompt to you. You can always check the status of the download using tail -f as shown below.\n\n$ tail -f wget-log\nSaving to: \\`strx25-0.9.2.1.tar.bz2.4'\n\n     0K .......... .......... .......... .......... ..........  1% 65.5K 57s\n    50K .......... .......... .......... .......... ..........  2% 85.9K 49s\n   100K .......... .......... .......... .......... ..........  3% 83.3K 47s\n   150K .......... .......... .......... .......... ..........  5% 86.6K 45s\n   200K .......... .......... .......... .......... ..........  6% 33.9K 56s\n   250K .......... .......... .......... .......... ..........  7%  182M 46s\n   300K .......... .......... .......... .......... ..........  9% 57.9K 47s\n\nAlso, make sure to review our previous [multitail article](https://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/) on how to use tail command effectively to view multiple files.\n\n### 6\\. Mask User Agent and Display wget like Browser Using wget –user-agent\n\nSome websites can disallow you to download its page by identifying that the user agent is not a browser. So you can mask the user agent by using –user-agent options and show wget like a browser as shown below.\n\n$ wget --user-agent=\"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092416 Firefox/3.0.3\" URL-TO-DOWNLOAD\n\n### 7\\. Test Download URL Using wget –spider\n\nWhen you are going to do scheduled download, you should check whether download will happen fine or not at scheduled time. To do so, copy the line exactly from the schedule, and then add –spider option to check.\n\n$ wget --spider DOWNLOAD-URL\n\nIf the URL given is correct, it will say\n\n$ wget --spider download-url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified \\[text/html\\]\n**Remote file exists** and could contain further links,\nbut recursion is disabled -- not retrieving.\n\nThis ensures that the downloading will get success at the scheduled time. But when you had give a wrong URL, you will get the following error.\n\n$ wget --spider download-url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response... 404 Not Found\n**Remote file does not exist -- broken link!!!**\n\nYou can use the spider option under following scenarios:\n\n*   Check before scheduling a download.\n*   Monitoring whether a website is available or not at certain intervals.\n*   Check a list of pages from your bookmark, and find out which pages are still exists.\n\n### 8\\. Increase Total Number of Retry Attempts Using wget –tries\n\nIf the internet connection has problem, and if the download file is large there is a chance of failures in the download. By default wget retries 20 times to make the download successful.\n\nIf needed, you can increase retry attempts using –tries option as shown below.\n\n$ wget --tries=75 DOWNLOAD-URL\n\n### 9\\. Download Multiple Files / URLs Using Wget -i\n\nFirst, store all the download files or URLs in a text file as:\n\n$ cat > download-file-list.txt\nURL1\nURL2\nURL3\nURL4\n\nNext, give the download-file-list.txt as argument to wget using -i option as shown below.\n\n$ wget -i download-file-list.txt\n\n### 10\\. Download a Full Website Using wget –mirror\n\nFollowing is the command line which you want to execute when you want to download a full website and made available for local viewing.\n\n$ wget --mirror -p --convert-links -P ./LOCAL-DIR WEBSITE-URL\n\n*   –mirror : turn on options suitable for mirroring.\n*   \\-p : download all files that are necessary to properly display a given HTML page.\n*   –convert-links : after the download, convert the links in document for local viewing.\n*   \\-P ./LOCAL-DIR : save all the files and directories to the specified directory.\n\n### 11\\. Reject Certain File Types while Downloading Using wget –reject\n\nYou have found a website which is useful, but don’t want to download the images you can specify the following.\n\n$ wget --reject=gif WEBSITE-TO-BE-DOWNLOADED\n\n### 12\\. Log messages to a log file instead of stderr Using wget -o\n\nWhen you wanted the log to be redirected to a log file instead of the terminal.\n\n$ wget -o download.log DOWNLOAD-URL\n\n### 13\\. Quit Downloading When it Exceeds Certain Size Using wget -Q\n\nWhen you want to stop download when it crosses 5 MB you can use the following wget command line.\n\n$ wget -Q5m -i FILE-WHICH-HAS-URLS\n\n**Note:** This quota will not get effect when you do a download a single URL. That is irrespective of the quota size everything will get downloaded when you specify a single file. This quota is applicable only for recursive downloads.\n\n### 14\\. Download Only Certain File Types Using wget -r -A\n\nYou can use this under following situations:\n\n*   Download all images from a website\n*   Download all videos from a website\n*   Download all PDF files from a website\n\n$ wget -r -A.pdf http://url-to-webpage-with-pdfs/\n\n### 15\\. FTP Download With wget\n\nYou can use wget to perform FTP download as shown below.\n\nAnonymous FTP download using Wget\n\n$ wget ftp-url\n\nFTP download using wget with username and password authentication.\n\n$ wget --ftp-user=USERNAME --ftp-password=PASSWORD DOWNLOAD-URL",
      "html": "<p><a href=\"https://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/\">https://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/</a></p>\n<blockquote>\n<p>wget utility is the best option to download files from internet. wget can pretty much handle all complex download situations including large file downloads</p>\n</blockquote>\n<h1 id=\"the-ultimate-wget-download-guide-with-15-awesome-examples\">The Ultimate Wget Download Guide With 15 Awesome Examples <a class=\"heading-anchor-permalink\" href=\"#the-ultimate-wget-download-guide-with-15-awesome-examples\">#</a></h1>\n<p><img src=\"https://static.thegeekstuff.com/wp-content/uploads/2009/10/15-wget-examples-300x257.png\" alt=\"15 Practical Examples to Download Images and Videos from Internet\"></p>\n<p><strong>wget</strong> handle all complex download situations including large file downloads, recursive downloads, non-interactive downloads, multiple file downloads etc.,</p>\n<h3 id=\"1.-download-single-file-with-wget\">1. Download Single File with wget <a class=\"heading-anchor-permalink\" href=\"#1.-download-single-file-with-wget\">#</a></h3>\n<div class=\"box\">\nThe following example downloads a single file from internet and stores in the current directory.\n<p>$ wget <a href=\"http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\">http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</a></p>\n<p>While downloading it will show a progress bar with the following information:</p>\n<ul>\n<li>%age of download completion (for e.g. 31% as shown below)</li>\n<li>Total amount of bytes downloaded so far (for e.g. 1,213,592 bytes as shown below)</li>\n<li>Current download speed (for e.g. 68.2K/s as shown below)</li>\n<li>Remaining time to download (for e.g. eta 34 seconds as shown below)</li>\n</ul>\n<p>Download in progress:</p>\n<p>$ wget <a href=\"http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\">http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</a>\nSaving to: `strx25-0.9.2.1.tar.bz2.1’</p>\n<p>31% [=================&gt; 1,213,592   68.2K/s  eta 34s</p>\n<p>Download completed:</p>\n<p>$ wget <a href=\"http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\">http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</a>\nSaving to: `strx25-0.9.2.1.tar.bz2’</p>\n<p>100%[======================&gt;] 3,852,374   76.8K/s   in 55s</p>\n<p>2009-09-25 11:15:30 (68.7 KB/s) - `strx25-0.9.2.1.tar.bz2’ saved [3852374/3852374]</p>\n<h3 id=\"2.-download-and-store-with-a-different-file-name-using-wget--o\">2. Download and Store With a Different File name Using wget -O <a class=\"heading-anchor-permalink\" href=\"#2.-download-and-store-with-a-different-file-name-using-wget--o\">#</a></h3>\n<p>By default wget will pick the filename from the last word after last forward slash, which may not be appropriate always.</p>\n<p><strong>Wrong:</strong> Following example will download and store the file with name: download_script.php?src_id=7701</p>\n<p>$ wget <a href=\"http://www.vim.org/scripts/download_script.php?src_id=7701\">http://www.vim.org/scripts/download_script.php?src_id=7701</a></p>\n<p>Even though the downloaded file is in zip format, it will get stored in the file as shown below.</p>\n<p>$ ls\ndownload_script.php?src_id=7701</p>\n<p><strong>Correct:</strong> To correct this issue, we can specify the output file name using the -O option as:</p>\n<p>$ wget -O taglist.zip <a href=\"http://www.vim.org/scripts/download_script.php?src_id=7701\">http://www.vim.org/scripts/download_script.php?src_id=7701</a></p>\n<h3 id=\"3.-specify-download-speed-%2F-download-rate-using-wget-%E2%80%93limit-rate\">3. Specify Download Speed / Download Rate Using wget –limit-rate <a class=\"heading-anchor-permalink\" href=\"#3.-specify-download-speed-%2F-download-rate-using-wget-%E2%80%93limit-rate\">#</a></h3>\n<p>While executing the wget, by default it will try to occupy full possible bandwidth. This might not be acceptable when you are downloading huge files on production servers. So, to avoid that we can limit the download speed using the –limit-rate as shown below.</p>\n<p>In the following example, the download speed is limited to 200k</p>\n<p>$ wget --limit-rate=200k <a href=\"http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\">http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</a></p>\n<h3 id=\"4.-continue-the-incomplete-download-using-wget--c\">4. Continue the Incomplete Download Using wget -c <a class=\"heading-anchor-permalink\" href=\"#4.-continue-the-incomplete-download-using-wget--c\">#</a></h3>\n<p>Restart a download which got stopped in the middle using wget -c option as shown below.</p>\n<p>$ wget -c <a href=\"http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\">http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</a></p>\n<p>This is very helpful when you have initiated a very big file download which got interrupted in the middle. Instead of starting the whole download again, you can start the download from where it got interrupted using option -c</p>\n<p><strong>Note:</strong> If a download is stopped in middle, when you restart the download again without the option -c, wget will append .1 to the filename automatically as a file with the previous name already exist. If a file with .1 already exist, it will download the file with .2 at the end.</p>\n<h3 id=\"5.-download-in-the-background-using-wget--b\">5. Download in the Background Using wget -b <a class=\"heading-anchor-permalink\" href=\"#5.-download-in-the-background-using-wget--b\">#</a></h3>\n<p>For a huge download, put the download in background using wget option -b as shown below.</p>\n<p>$ wget -b <a href=\"http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\">http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2</a>\nContinuing in background, pid 1984.\nOutput will be written to `wget-log’.</p>\n<p>It will initiate the download and gives back the shell prompt to you. You can always check the status of the download using tail -f as shown below.</p>\n<p>$ tail -f wget-log\nSaving to: `strx25-0.9.2.1.tar.bz2.4’</p>\n<pre><code> 0K .......... .......... .......... .......... ..........  1% 65.5K 57s\n50K .......... .......... .......... .......... ..........  2% 85.9K 49s\n</code></pre>\n<p>100K … … … … …  3% 83.3K 47s\n150K … … … … …  5% 86.6K 45s\n200K … … … … …  6% 33.9K 56s\n250K … … … … …  7%  182M 46s\n300K … … … … …  9% 57.9K 47s</p>\n<p>Also, make sure to review our previous <a href=\"https://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/\">multitail article</a> on how to use tail command effectively to view multiple files.</p>\n<h3 id=\"6.-mask-user-agent-and-display-wget-like-browser-using-wget-%E2%80%93user-agent\">6. Mask User Agent and Display wget like Browser Using wget –user-agent <a class=\"heading-anchor-permalink\" href=\"#6.-mask-user-agent-and-display-wget-like-browser-using-wget-%E2%80%93user-agent\">#</a></h3>\n<p>Some websites can disallow you to download its page by identifying that the user agent is not a browser. So you can mask the user agent by using –user-agent options and show wget like a browser as shown below.</p>\n<p>$ wget --user-agent=“Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092416 Firefox/3.0.3” URL-TO-DOWNLOAD</p>\n<h3 id=\"7.-test-download-url-using-wget-%E2%80%93spider\">7. Test Download URL Using wget –spider <a class=\"heading-anchor-permalink\" href=\"#7.-test-download-url-using-wget-%E2%80%93spider\">#</a></h3>\n<p>When you are going to do scheduled download, you should check whether download will happen fine or not at scheduled time. To do so, copy the line exactly from the schedule, and then add –spider option to check.</p>\n<p>$ wget --spider DOWNLOAD-URL</p>\n<p>If the URL given is correct, it will say</p>\n<p>$ wget --spider download-url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response… 200 OK\nLength: unspecified [text/html]\n<strong>Remote file exists</strong> and could contain further links,\nbut recursion is disabled – not retrieving.</p>\n<p>This ensures that the downloading will get success at the scheduled time. But when you had give a wrong URL, you will get the following error.</p>\n<p>$ wget --spider download-url\nSpider mode enabled. Check if remote file exists.\nHTTP request sent, awaiting response… 404 Not Found\n<strong>Remote file does not exist – broken link!!!</strong></p>\n<p>You can use the spider option under following scenarios:</p>\n<ul>\n<li>Check before scheduling a download.</li>\n<li>Monitoring whether a website is available or not at certain intervals.</li>\n<li>Check a list of pages from your bookmark, and find out which pages are still exists.</li>\n</ul>\n<h3 id=\"8.-increase-total-number-of-retry-attempts-using-wget-%E2%80%93tries\">8. Increase Total Number of Retry Attempts Using wget –tries <a class=\"heading-anchor-permalink\" href=\"#8.-increase-total-number-of-retry-attempts-using-wget-%E2%80%93tries\">#</a></h3>\n<p>If the internet connection has problem, and if the download file is large there is a chance of failures in the download. By default wget retries 20 times to make the download successful.</p>\n<p>If needed, you can increase retry attempts using –tries option as shown below.</p>\n<p>$ wget --tries=75 DOWNLOAD-URL</p>\n<h3 id=\"9.-download-multiple-files-%2F-urls-using-wget--i\">9. Download Multiple Files / URLs Using Wget -i <a class=\"heading-anchor-permalink\" href=\"#9.-download-multiple-files-%2F-urls-using-wget--i\">#</a></h3>\n<p>First, store all the download files or URLs in a text file as:</p>\n<p>$ cat &gt; download-file-list.txt\nURL1\nURL2\nURL3\nURL4</p>\n<p>Next, give the download-file-list.txt as argument to wget using -i option as shown below.</p>\n<p>$ wget -i download-file-list.txt</p>\n<h3 id=\"10.-download-a-full-website-using-wget-%E2%80%93mirror\">10. Download a Full Website Using wget –mirror <a class=\"heading-anchor-permalink\" href=\"#10.-download-a-full-website-using-wget-%E2%80%93mirror\">#</a></h3>\n<p>Following is the command line which you want to execute when you want to download a full website and made available for local viewing.</p>\n<p>$ wget --mirror -p --convert-links -P ./LOCAL-DIR WEBSITE-URL</p>\n<ul>\n<li>–mirror : turn on options suitable for mirroring.</li>\n<li>-p : download all files that are necessary to properly display a given HTML page.</li>\n<li>–convert-links : after the download, convert the links in document for local viewing.</li>\n<li>-P ./LOCAL-DIR : save all the files and directories to the specified directory.</li>\n</ul>\n<h3 id=\"11.-reject-certain-file-types-while-downloading-using-wget-%E2%80%93reject\">11. Reject Certain File Types while Downloading Using wget –reject <a class=\"heading-anchor-permalink\" href=\"#11.-reject-certain-file-types-while-downloading-using-wget-%E2%80%93reject\">#</a></h3>\n<p>You have found a website which is useful, but don’t want to download the images you can specify the following.</p>\n<p>$ wget --reject=gif WEBSITE-TO-BE-DOWNLOADED</p>\n<h3 id=\"12.-log-messages-to-a-log-file-instead-of-stderr-using-wget--o\">12. Log messages to a log file instead of stderr Using wget -o <a class=\"heading-anchor-permalink\" href=\"#12.-log-messages-to-a-log-file-instead-of-stderr-using-wget--o\">#</a></h3>\n<p>When you wanted the log to be redirected to a log file instead of the terminal.</p>\n<p>$ wget -o download.log DOWNLOAD-URL</p>\n<h3 id=\"13.-quit-downloading-when-it-exceeds-certain-size-using-wget--q\">13. Quit Downloading When it Exceeds Certain Size Using wget -Q <a class=\"heading-anchor-permalink\" href=\"#13.-quit-downloading-when-it-exceeds-certain-size-using-wget--q\">#</a></h3>\n<p>When you want to stop download when it crosses 5 MB you can use the following wget command line.</p>\n<p>$ wget -Q5m -i FILE-WHICH-HAS-URLS</p>\n<p><strong>Note:</strong> This quota will not get effect when you do a download a single URL. That is irrespective of the quota size everything will get downloaded when you specify a single file. This quota is applicable only for recursive downloads.</p>\n<h3 id=\"14.-download-only-certain-file-types-using-wget--r--a\">14. Download Only Certain File Types Using wget -r -A <a class=\"heading-anchor-permalink\" href=\"#14.-download-only-certain-file-types-using-wget--r--a\">#</a></h3>\n<p>You can use this under following situations:</p>\n<ul>\n<li>Download all images from a website</li>\n<li>Download all videos from a website</li>\n<li>Download all PDF files from a website</li>\n</ul>\n<p>$ wget -r -A.pdf <a href=\"http://url-to-webpage-with-pdfs/\">http://url-to-webpage-with-pdfs/</a></p>\n<h3 id=\"15.-ftp-download-with-wget\">15. FTP Download With wget <a class=\"heading-anchor-permalink\" href=\"#15.-ftp-download-with-wget\">#</a></h3>\n<p>You can use wget to perform FTP download as shown below.</p>\n<p>Anonymous FTP download using Wget</p>\n<p>$ wget ftp-url</p>\n<p>FTP download using wget with username and password authentication.</p>\n<p>$ wget --ftp-user=USERNAME --ftp-password=PASSWORD DOWNLOAD-URL</p>\n",
      "id": 44
    },
    {
      "path": "Packaging/apt.md",
      "url": "Packaging/apt.html",
      "content": "<style>\nrect{\nborder:1px solid blue;\n\ncolor:brown;\n}\ncode{\n border:1px dashed brown;\n color:green;\n }\n.cledit-section{\ncolor:green;\n}\n</style>\nhttps://itsfoss.com/apt-command-guide/\n\n# Using apt Commands in Linux [Complete Guide] - It's FOSS\n_**Examples so that you can manage packages effectively.**_\n\nWhat is apt?\n------------\n\n[APT](https://wiki.debian.org/Apt) (Advanced Package Tool). You can use it to find and install new packages, upgrade packages, remove the packages etc.\n\n[apt-get][(https://linux.die.net/man/8/apt-get)] is perhaps the most popular tool around APT. But apt is slowly promoted as its alternative. \n\n>I have already explained the [difference between apt and apt-get][(https://itsfoss.com/apt-vs-apt-get-difference/)] in a previous article along with why apt was introduced in the first place, therefore, I will not get into the details again.\n\n### Update package database with apt\n\napt actually works on a database of available packages. If the database is not updated, the system won’t know if there are any newer packages available. \nQ: Why Updating the repository should be the first thing to do in in any Linux system after a fresh install.\nA: because `apt` require a database to manage packages.\n\nUpdating the package database \n\n    sudo apt update\n\nWhen you run this command, you’ll see:\n\n![apt command example with apt update](https://i0.wp.com/itsfoss.com/wp-content/uploads/2017/07/apt-commands-examples.png?ssl=1)\n\napt update will update the package database\n\nYou’ll see three types of lines here, Hit, Get and Ign. Basically these are:\n\n*   Hit: there is no change in package version from the previous version\n*   Ign: the package is being ignored. Either the package is way too recent that it doesn’t even bother to check or there was an error in retrieving the file but error was trivial and thus it is being ignored. Don’t worry, this is not an error.\n*   Get: There is a new version available. It will download the information about the version (not the package itself). You can see that there is download information (size in kb) with the ‘get’ line in the screenshot above.\n\n### Upgrade installed packages with apt\n\n- The most convenient way is to upgrade all the packages that have available updates. You can simply use the command below:\n\n    sudo apt upgrade\n\n- Upgrade all packages at once\n\nAanother way to provide a complete upgrade by using the command below:\n\n    sudo apt full-upgrade\n\nfull-upgrade works the same as upgrade except that <b>if system upgrade needs the removal of a package already installed on the system, it will do that. Whereas, the normal upgrade command won’t do this.</b>\n\n#### What is the difference between apt update and apt upgrade?\n\nThough it sounds like when you do an apt update, will NOT get the latest version of the package. But <b>only updates the database of the packages.</b>\n\n**For example, if you have XYZ package version 1.3 installed, after apt update, the database will be aware that a newer version 1.4 is available.  When you do an apt upgrade after apt update, it upgrades (or updates, whichever term you prefer) the installed packages to the newer version.**\n\n<rect>\nThis is the reason why the fastest and the most convenient way to [update Ubuntu system][(https://itsfoss.com/update-ubuntu/)] by using this command:\n<b>\n    sudo apt update && sudo apt upgrade -y\n</b>\n</rect>\n\n### How to install new packages with apt\n    sudo apt install <package_name>\n\n### How to install multiple packages with apt\n\n- You can install several packages at a time by :\n\n    sudo apt install <pkg_1> <pkg_2> <pkg_3>\n\n#### What if you run apt install on an already installed package?\n\nNo harm is done by using it, unless you don’t want it to be upgraded.\n\n#### How to install packages without upgrading\n\nYou can use the option –no-upgrade in the following manner:\n\n    sudo apt install <pkg_name> --no-upgrade\n\n#### How to only upgrade packages, not install it\n\nTo upgrade a package but don’t want to install it (if it’s not already installed), you can:\n\n    sudo apt install <package_name> --only-upgrade\n\n#### How to install a specific version of an application\n\nBy default, the latest version available in the repository will be installed. \n- If you don’t want to install the latest version, you can specify the version number. You would need to know the exact version number that you want to install.\n<b>Just add =version with the name of the package.</b>\n\n    sudo apt install <package_name>=<version_number>\n\n### How to remove installed packages with apt\n\nEasy as installing them. Just use the command below:\n\n    sudo apt remove <package_name>\n\n**Another way of uninstalling packages is to use purge. The command is used in the following manner:**\n\n    sudo apt purge <package_name>\n\n---\n#### What is the difference between apt remove and apt purge?\n\n*   `apt remove` just removes the binaries of a package. I**t leaves configuration files.**\n*   `apt purge` removes everything related to a package **including the configuration files.**\n\n- If you used `apt remove` to a get rid of a particular software and then install it again, your software will have the same configuration files. **Of course, you will be asked to override the existing configuration files when you install it again.**\n\n- <em>Purge is useful when you have messed up with the configuration of a program. You want to completely erase its traces from the system and perhaps start afresh. \n\n- Usually, `apt remove` is more than enough for uninstalling a package.\n\n### Search for packages\n\nNot my preferred way of searching for packages. But this is useful when you are looking for some specific lib. Just use the following command with desired search terms. It will find all the packages containing your search term.\n\n    apt search <search term>\n\n### See the content of a package\n\n<b>To know more about a package before installing or removing it, you can use the below command:</b>\n\n`apt show <package_name>`\n\nThis will show information \n- dependencies\n- installation \n- download size\n-  different sources the package is available from.\n-  the description of the content of the package among other things.\n\nShow the package information\n\n### List upgradable and installed versions\n\napt command has a new option called list. Using this command, you can see all the packages that have a newer version ready to be upgraded:\n\n`apt list --upgradeable`\n\nList all upgradeable packages\n\nTo see all the installed packages on the system with installed option:\n\n`apt list --installed`\n\nThere is also a third option called –all-versions. It will list all the packages available for your system:\n\n`apt list --all-versions`\n\n### How to clean your system with apt\n\nI have talked about ways of [cleaning Ubuntu system](https://itsfoss.com/free-up-space-ubuntu-linux/) to free up space. Unlike apt-get, you don’t have clean and autoclean commands here. You can still use the autoremove option and free up some diskspace:\n\n`sudo apt autoremove`\n\nThis command removes libs and packages that were installed automatically to satisfy the dependencies of an installed package. If the package is removed, these automatically installed packages, though useless, remains in the system.\n\n![Use aot command to free up space in Ubuntu Linux](https://i1.wp.com/itsfoss.com/wp-content/uploads/2017/07/apt-commands-examples-10.png?ssl=1)\n\nUse autoremove to free up space\n\nI had recently cleaned my system and that is why it shows only a few Kb of files to be removed. Otherwise, you could easily get 100s of Mb of free space with this command.\n\n### Your input\n\nI have deliberately not included apt edit-sources command in this article. It’s because this command option is a work in progress and at this point, it does nothing more than opening the sources.list file in the editor of your choice.\n\nHow do you like this guide for using apt commands in Linux? I hope it was easy to understand apt commands with examples. Your feedback will help in creating more such guides in the near future.",
      "html": "<style>\nrect{\nborder:1px solid blue;\n\ncolor:brown;\n}\ncode{\n border:1px dashed brown;\n color:green;\n }\n.cledit-section{\ncolor:green;\n}\n</style>\n<p><a href=\"https://itsfoss.com/apt-command-guide/\">https://itsfoss.com/apt-command-guide/</a></p>\n<h1 id=\"using-apt-commands-in-linux-%5Bcomplete-guide%5D---it%E2%80%99s-foss\">Using apt Commands in Linux [Complete Guide] - It’s FOSS <a class=\"heading-anchor-permalink\" href=\"#using-apt-commands-in-linux-%5Bcomplete-guide%5D---it%E2%80%99s-foss\">#</a></h1>\n<p><em><strong>Examples so that you can manage packages effectively.</strong></em></p>\n<h2 id=\"what-is-apt%3F\">What is apt? <a class=\"heading-anchor-permalink\" href=\"#what-is-apt%3F\">#</a></h2>\n<p><a href=\"https://wiki.debian.org/Apt\">APT</a> (Advanced Package Tool). You can use it to find and install new packages, upgrade packages, remove the packages etc.</p>\n<p>[apt-get][(<a href=\"https://linux.die.net/man/8/apt-get\">https://linux.die.net/man/8/apt-get</a>)] is perhaps the most popular tool around APT. But apt is slowly promoted as its alternative.</p>\n<blockquote>\n<p>I have already explained the [difference between apt and apt-get][(<a href=\"https://itsfoss.com/apt-vs-apt-get-difference/\">https://itsfoss.com/apt-vs-apt-get-difference/</a>)] in a previous article along with why apt was introduced in the first place, therefore, I will not get into the details again.</p>\n</blockquote>\n<h3 id=\"update-package-database-with-apt\">Update package database with apt <a class=\"heading-anchor-permalink\" href=\"#update-package-database-with-apt\">#</a></h3>\n<p>apt actually works on a database of available packages. If the database is not updated, the system won’t know if there are any newer packages available.\nQ: Why Updating the repository should be the first thing to do in in any Linux system after a fresh install.\nA: because <code>apt</code> require a database to manage packages.</p>\n<p>Updating the package database</p>\n<pre><code>sudo apt update\n</code></pre>\n<p>When you run this command, you’ll see:</p>\n<p><img src=\"https://i0.wp.com/itsfoss.com/wp-content/uploads/2017/07/apt-commands-examples.png?ssl=1\" alt=\"apt command example with apt update\"></p>\n<p>apt update will update the package database</p>\n<p>You’ll see three types of lines here, Hit, Get and Ign. Basically these are:</p>\n<ul>\n<li>Hit: there is no change in package version from the previous version</li>\n<li>Ign: the package is being ignored. Either the package is way too recent that it doesn’t even bother to check or there was an error in retrieving the file but error was trivial and thus it is being ignored. Don’t worry, this is not an error.</li>\n<li>Get: There is a new version available. It will download the information about the version (not the package itself). You can see that there is download information (size in kb) with the ‘get’ line in the screenshot above.</li>\n</ul>\n<h3 id=\"upgrade-installed-packages-with-apt\">Upgrade installed packages with apt <a class=\"heading-anchor-permalink\" href=\"#upgrade-installed-packages-with-apt\">#</a></h3>\n<ul>\n<li>\n<p>The most convenient way is to upgrade all the packages that have available updates. You can simply use the command below:</p>\n<p>sudo apt upgrade</p>\n</li>\n<li>\n<p>Upgrade all packages at once</p>\n</li>\n</ul>\n<p>Aanother way to provide a complete upgrade by using the command below:</p>\n<pre><code>sudo apt full-upgrade\n</code></pre>\n<p>full-upgrade works the same as upgrade except that <b>if system upgrade needs the removal of a package already installed on the system, it will do that. Whereas, the normal upgrade command won’t do this.</b></p>\n<h4 id=\"what-is-the-difference-between-apt-update-and-apt-upgrade%3F\">What is the difference between apt update and apt upgrade? <a class=\"heading-anchor-permalink\" href=\"#what-is-the-difference-between-apt-update-and-apt-upgrade%3F\">#</a></h4>\n<p>Though it sounds like when you do an apt update, will NOT get the latest version of the package. But <b>only updates the database of the packages.</b></p>\n<p><strong>For example, if you have XYZ package version 1.3 installed, after apt update, the database will be aware that a newer version 1.4 is available.  When you do an apt upgrade after apt update, it upgrades (or updates, whichever term you prefer) the installed packages to the newer version.</strong></p>\n<rect>\nThis is the reason why the fastest and the most convenient way to [update Ubuntu system][(https://itsfoss.com/update-ubuntu/)] by using this command:\n<b>\n    sudo apt update && sudo apt upgrade -y\n</b>\n</rect>\n<h3 id=\"how-to-install-new-packages-with-apt\">How to install new packages with apt <a class=\"heading-anchor-permalink\" href=\"#how-to-install-new-packages-with-apt\">#</a></h3>\n<pre><code>sudo apt install &lt;package_name&gt;\n</code></pre>\n<h3 id=\"how-to-install-multiple-packages-with-apt\">How to install multiple packages with apt <a class=\"heading-anchor-permalink\" href=\"#how-to-install-multiple-packages-with-apt\">#</a></h3>\n<ul>\n<li>\n<p>You can install several packages at a time by :</p>\n<p>sudo apt install &lt;pkg_1&gt; &lt;pkg_2&gt; &lt;pkg_3&gt;</p>\n</li>\n</ul>\n<h4 id=\"what-if-you-run-apt-install-on-an-already-installed-package%3F\">What if you run apt install on an already installed package? <a class=\"heading-anchor-permalink\" href=\"#what-if-you-run-apt-install-on-an-already-installed-package%3F\">#</a></h4>\n<p>No harm is done by using it, unless you don’t want it to be upgraded.</p>\n<h4 id=\"how-to-install-packages-without-upgrading\">How to install packages without upgrading <a class=\"heading-anchor-permalink\" href=\"#how-to-install-packages-without-upgrading\">#</a></h4>\n<p>You can use the option –no-upgrade in the following manner:</p>\n<pre><code>sudo apt install &lt;pkg_name&gt; --no-upgrade\n</code></pre>\n<h4 id=\"how-to-only-upgrade-packages%2C-not-install-it\">How to only upgrade packages, not install it <a class=\"heading-anchor-permalink\" href=\"#how-to-only-upgrade-packages%2C-not-install-it\">#</a></h4>\n<p>To upgrade a package but don’t want to install it (if it’s not already installed), you can:</p>\n<pre><code>sudo apt install &lt;package_name&gt; --only-upgrade\n</code></pre>\n<h4 id=\"how-to-install-a-specific-version-of-an-application\">How to install a specific version of an application <a class=\"heading-anchor-permalink\" href=\"#how-to-install-a-specific-version-of-an-application\">#</a></h4>\n<p>By default, the latest version available in the repository will be installed.</p>\n<ul>\n<li>\n<p>If you don’t want to install the latest version, you can specify the version number. You would need to know the exact version number that you want to install.\n<b>Just add =version with the name of the package.</b></p>\n<p>sudo apt install &lt;package_name&gt;=&lt;version_number&gt;</p>\n</li>\n</ul>\n<h3 id=\"how-to-remove-installed-packages-with-apt\">How to remove installed packages with apt <a class=\"heading-anchor-permalink\" href=\"#how-to-remove-installed-packages-with-apt\">#</a></h3>\n<p>Easy as installing them. Just use the command below:</p>\n<pre><code>sudo apt remove &lt;package_name&gt;\n</code></pre>\n<p><strong>Another way of uninstalling packages is to use purge. The command is used in the following manner:</strong></p>\n<pre><code>sudo apt purge &lt;package_name&gt;\n</code></pre>\n<hr>\n<h4 id=\"what-is-the-difference-between-apt-remove-and-apt-purge%3F\">What is the difference between apt remove and apt purge? <a class=\"heading-anchor-permalink\" href=\"#what-is-the-difference-between-apt-remove-and-apt-purge%3F\">#</a></h4>\n<ul>\n<li><code>apt remove</code> just removes the binaries of a package. I<strong>t leaves configuration files.</strong></li>\n<li><code>apt purge</code> removes everything related to a package <strong>including the configuration files.</strong></li>\n</ul>\n<ul>\n<li>\n<p>If you used <code>apt remove</code> to a get rid of a particular software and then install it again, your software will have the same configuration files. <strong>Of course, you will be asked to override the existing configuration files when you install it again.</strong></p>\n</li>\n<li>\n<p><em>Purge is useful when you have messed up with the configuration of a program. You want to completely erase its traces from the system and perhaps start afresh.</p>\n</li>\n<li>\n<p>Usually, <code>apt remove</code> is more than enough for uninstalling a package.</p>\n</li>\n</ul>\n<h3 id=\"search-for-packages\">Search for packages <a class=\"heading-anchor-permalink\" href=\"#search-for-packages\">#</a></h3>\n<p>Not my preferred way of searching for packages. But this is useful when you are looking for some specific lib. Just use the following command with desired search terms. It will find all the packages containing your search term.</p>\n<pre><code>apt search &lt;search term&gt;\n</code></pre>\n<h3 id=\"see-the-content-of-a-package\">See the content of a package <a class=\"heading-anchor-permalink\" href=\"#see-the-content-of-a-package\">#</a></h3>\n<p><b>To know more about a package before installing or removing it, you can use the below command:</b></p>\n<p><code>apt show &lt;package_name&gt;</code></p>\n<p>This will show information</p>\n<ul>\n<li>dependencies</li>\n<li>installation</li>\n<li>download size</li>\n<li>different sources the package is available from.</li>\n<li>the description of the content of the package among other things.</li>\n</ul>\n<p>Show the package information</p>\n<h3 id=\"list-upgradable-and-installed-versions\">List upgradable and installed versions <a class=\"heading-anchor-permalink\" href=\"#list-upgradable-and-installed-versions\">#</a></h3>\n<p>apt command has a new option called list. Using this command, you can see all the packages that have a newer version ready to be upgraded:</p>\n<p><code>apt list --upgradeable</code></p>\n<p>List all upgradeable packages</p>\n<p>To see all the installed packages on the system with installed option:</p>\n<p><code>apt list --installed</code></p>\n<p>There is also a third option called –all-versions. It will list all the packages available for your system:</p>\n<p><code>apt list --all-versions</code></p>\n<h3 id=\"how-to-clean-your-system-with-apt\">How to clean your system with apt <a class=\"heading-anchor-permalink\" href=\"#how-to-clean-your-system-with-apt\">#</a></h3>\n<p>I have talked about ways of <a href=\"https://itsfoss.com/free-up-space-ubuntu-linux/\">cleaning Ubuntu system</a> to free up space. Unlike apt-get, you don’t have clean and autoclean commands here. You can still use the autoremove option and free up some diskspace:</p>\n<p><code>sudo apt autoremove</code></p>\n<p>This command removes libs and packages that were installed automatically to satisfy the dependencies of an installed package. If the package is removed, these automatically installed packages, though useless, remains in the system.</p>\n<p><img src=\"https://i1.wp.com/itsfoss.com/wp-content/uploads/2017/07/apt-commands-examples-10.png?ssl=1\" alt=\"Use aot command to free up space in Ubuntu Linux\"></p>\n<p>Use autoremove to free up space</p>\n<p>I had recently cleaned my system and that is why it shows only a few Kb of files to be removed. Otherwise, you could easily get 100s of Mb of free space with this command.</p>\n<h3 id=\"your-input\">Your input <a class=\"heading-anchor-permalink\" href=\"#your-input\">#</a></h3>\n<p>I have deliberately not included apt edit-sources command in this article. It’s because this command option is a work in progress and at this point, it does nothing more than opening the sources.list file in the editor of your choice.</p>\n<p>How do you like this guide for using apt commands in Linux? I hope it was easy to understand apt commands with examples. Your feedback will help in creating more such guides in the near future.</p>\n",
      "id": 45
    },
    {
      "path": "Packaging/composer.md",
      "url": "Packaging/composer.html",
      "content": "# Composer\n\n## Installing Composer:\n\n```sh\n$ sudo apt-get install php\n\n# Download composer\n$ curl -Ss https://getcomposer.org/installer | php\n\n# move to /usr/local/bin/composer\n$ sudo mv composer.phar /usr/local/bin/composer\n\n# make it exe\n$ chmod +x /usr/local/bin/composer\n\n# check the version of the Composer\n$ composer\n\n```\n\n## adding to PATH:\n\n`export PATH=$PATH:$HOME/.config/composer/vendor/bin`\n\nOr, inside your .bashrc, add :\n\n`export PATH=$PATH:\"$HOME/.config/composer/vendor/bin\"`\n\n\n\n\n\n## Remove unused dependences\n\n`$ composer update`\n\n## Create a project:\n\n```bash\n$ composer init\n```\n\n\n\n",
      "html": "<h1 id=\"composer\">Composer <a class=\"heading-anchor-permalink\" href=\"#composer\">#</a></h1>\n<h2 id=\"installing-composer%3A\">Installing Composer: <a class=\"heading-anchor-permalink\" href=\"#installing-composer%3A\">#</a></h2>\n<pre><code class=\"language-sh\">$ sudo apt-get install php\n\n# Download composer\n$ curl -Ss https://getcomposer.org/installer | php\n\n# move to /usr/local/bin/composer\n$ sudo mv composer.phar /usr/local/bin/composer\n\n# make it exe\n$ chmod +x /usr/local/bin/composer\n\n# check the version of the Composer\n$ composer\n\n</code></pre>\n<h2 id=\"adding-to-path%3A\">adding to PATH: <a class=\"heading-anchor-permalink\" href=\"#adding-to-path%3A\">#</a></h2>\n<p><code>export PATH=$PATH:$HOME/.config/composer/vendor/bin</code></p>\n<p>Or, inside your .bashrc, add :</p>\n<p><code>export PATH=$PATH:&quot;$HOME/.config/composer/vendor/bin&quot;</code></p>\n<h2 id=\"remove-unused-dependences\">Remove unused dependences <a class=\"heading-anchor-permalink\" href=\"#remove-unused-dependences\">#</a></h2>\n<p><code>$ composer update</code></p>\n<h2 id=\"create-a-project%3A\">Create a project: <a class=\"heading-anchor-permalink\" href=\"#create-a-project%3A\">#</a></h2>\n<pre><code class=\"language-bash\">$ composer init\n</code></pre>\n",
      "id": 46
    },
    {
      "path": "ReviewQuestions/strings_quotes.md",
      "url": "ReviewQuestions/strings_quotes.html",
      "content": "from: PHP Notes for pro\n\n### Section 9.4: Strings\n\nQ: Compare between:\n    1. Single Quoted    2. Double Quoted    3. Hero Quoted  4. NewDoc\n    keywords: `{{}}`,`<<< EOF`, `\\'`,`<<< 'EOF'`\n\n### Section 9.5: Callable\n\nSummary: Callables are anything which can be called as a callback.\nThings that can be termed a \"callback\" are as follows:\n\n1. Anonymous functions\n2. Standard PHP functions (note: not language constructs)\n3. Static Classes\n4. non-static Classes (using an alternate syntax)\n5. Specific Object/Class Methods\n6. Objects themselves, as long as the object is found in key 0 of an array\n**Q: Give Example for:**\n- referencing an object as an array element\n- Callbacks can be denoted by callable type hint\n- call_user_func(): if you need to pass arg by references there are two ways(call_user_function_array or variable function)?\n\n### Section 9.6: Resouces\n\nSummary: A resource is a special type of variable that references an external resource, such as a file, socket, stream, document, or connection.\n- give example?\n- What function used for checking the resource type?\n\n## Chapter 11: References\n(https://www.php.net/manual/en/language.references.whatdo.php)\n\nSummary: There are three basic operations performed using references: assigning by reference, passing by reference, and returning by reference.\nQ: give an examples.\n\n",
      "html": "<p>from: PHP Notes for pro</p>\n<h3 id=\"section-9.4%3A-strings\">Section 9.4: Strings <a class=\"heading-anchor-permalink\" href=\"#section-9.4%3A-strings\">#</a></h3>\n<p>Q: Compare between:\n1. Single Quoted    2. Double Quoted    3. Hero Quoted  4. NewDoc\nkeywords: <code>{{}}</code>,<code>&lt;&lt;&lt; EOF</code>, <code>\\'</code>,<code>&lt;&lt;&lt; 'EOF'</code></p>\n<h3 id=\"section-9.5%3A-callable\">Section 9.5: Callable <a class=\"heading-anchor-permalink\" href=\"#section-9.5%3A-callable\">#</a></h3>\n<p>Summary: Callables are anything which can be called as a callback.\nThings that can be termed a “callback” are as follows:</p>\n<ol>\n<li>Anonymous functions</li>\n<li>Standard PHP functions (note: not language constructs)</li>\n<li>Static Classes</li>\n<li>non-static Classes (using an alternate syntax)</li>\n<li>Specific Object/Class Methods</li>\n<li>Objects themselves, as long as the object is found in key 0 of an array\n<strong>Q: Give Example for:</strong></li>\n</ol>\n<ul>\n<li>referencing an object as an array element</li>\n<li>Callbacks can be denoted by callable type hint</li>\n<li>call_user_func(): if you need to pass arg by references there are two ways(call_user_function_array or variable function)?</li>\n</ul>\n<h3 id=\"section-9.6%3A-resouces\">Section 9.6: Resouces <a class=\"heading-anchor-permalink\" href=\"#section-9.6%3A-resouces\">#</a></h3>\n<p>Summary: A resource is a special type of variable that references an external resource, such as a file, socket, stream, document, or connection.</p>\n<ul>\n<li>give example?</li>\n<li>What function used for checking the resource type?</li>\n</ul>\n<h2 id=\"chapter-11%3A-references\">Chapter 11: References <a class=\"heading-anchor-permalink\" href=\"#chapter-11%3A-references\">#</a></h2>\n<p>(<a href=\"https://www.php.net/manual/en/language.references.whatdo.php\">https://www.php.net/manual/en/language.references.whatdo.php</a>)</p>\n<p>Summary: There are three basic operations performed using references: assigning by reference, passing by reference, and returning by reference.\nQ: give an examples.</p>\n",
      "id": 47
    },
    {
      "path": "Symfony/Encore.md",
      "url": "Symfony/Encore.html",
      "content": "2 -Aug-2023\n------------\n\n- Installing **Encore** => `composer require symfony/webpack-encore-bundle`\n- With Encore, think of your app.js file like a standalone JavaScript application: it will require all of the dependencies it needs (e.g. jQuery or React), including any CSS.\n- Encore's job (via Webpack) is simple: to read and follow all of the import statements and create one final app.js (and app.css) that contains everything your app needs. Encore can do a lot more: minify files, pre-process Sass/LESS, support React, Vue.js, etc.\n- Configuring Encore/Webpack ?\n- To build the assets, run the following: `npm run watch`\n- The key part is `addEntry()`?\n-\n\n\n",
      "html": "<h2 id=\"2--aug-2023\">2 -Aug-2023 <a class=\"heading-anchor-permalink\" href=\"#2--aug-2023\">#</a></h2>\n<ul>\n<li>Installing <strong>Encore</strong> =&gt; <code>composer require symfony/webpack-encore-bundle</code></li>\n<li>With Encore, think of your app.js file like a standalone JavaScript application: it will require all of the dependencies it needs (e.g. jQuery or React), including any CSS.</li>\n<li>Encore’s job (via Webpack) is simple: to read and follow all of the import statements and create one final app.js (and app.css) that contains everything your app needs. Encore can do a lot more: minify files, pre-process Sass/LESS, support React, Vue.js, etc.</li>\n<li>Configuring Encore/Webpack ?</li>\n<li>To build the assets, run the following: <code>npm run watch</code></li>\n<li>The key part is <code>addEntry()</code>?</li>\n<li></li>\n</ul>\n",
      "id": 48
    },
    {
      "path": "Symfony/Symfonycasts/Composer.md",
      "url": "Symfony/Symfonycasts/Composer.html",
      "content": "# Composer\n\nResources:\n1. Course: Wonderful World of Composer\n(https://symfonycasts.com/screencast/composer)\n2.\n\n### Chapter - 1: Composer\nTo use just one outside library, you’d need to tackle at least three major issues:\n\n1. First, how do I autoload the PHP classes in the library? *Autoloading is the background machine that makes it possible to reference PHP classes without using `require` or `include` statements*.  When I bring in outside code, I either need to figure out which files to include or how to configure that library’s autoloader.\n2. Second, we need to know if this library depends on any other libraries. And if it does, we need to download and configure.\n3. How should I store the library in my project? for example, use (SVN externals,Git Submodules).\n\nThe answer to these 3 problems is **Composer**.\n\n#### Installation:\nthis will download composer executble (`composer.phar`) file inside current folder:\n```bash\ncurl -s https://getcomposer.org/installer | php\n```\nIf fine, `$ php composer.phar` will list all avaibl composer commands.\n\n- Composer’s main job is to download third-party libraries into a vendor/ directory in your project. To tell Composer which libraries you need, your project needs to have a composer.json\n`$ php composer.phar init`\n\n- Composer is searching against a giant central repository of packages called “Packagist”. for example, enter: `finder` as the package name to search.\n- In the language of Composer, a package is just an individual directory that you want to download into your project.\n-  If a version ends in -dev, it’s a development branch, which may be stable or unstable based on the library. The dev-master version is special, and it always means the latest, bleeding-edge code. If you use a lesser-known package, dev-master may be your only option. Finally, confirm generation and add vendor/ to your .gitignore file if you’re storing your project with git:\n```git\n# .gitignore\n/vendor/\n```\n- package name is something like (<vendor>/<name>) such as 'symfony/finder'.\n- To actually put Composer to work, run `php composer.phar install`. This is the most important command: it reads the composer.json file and downloads all the needed libraries into the vendor directory.\n- To initially install the defined dependencies for your project, you should run the update command: `php composer.phar update`. This will make Composer do two things:\n    - It resolves all dependencies listed in your composer.json file and writes all of the packages and their exact versions to the composer.lock file, locking the project to those specific versions. You should commit the composer.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies (more below). This is the main role of the update command.\n    - It then implicitly runs the install command. This will download the dependencies' files into the vendor directory in your project. (The vendor directory is the conventional location for all third-party code in a project). In our example from above, you would end up with the Monolog source files in vendor/monolog/monolog/. As Monolog has a dependency on psr/log, that package's files can also be found inside vendor/.\n- running install when a composer.lock file is present resolves and installs all dependencies that you listed in composer.json, but Composer uses the exact versions listed in composer.lock to ensure that the package versions are consistent for everyone working on your project\n- Packagist.org is the main Composer repository. A Composer repository is basically a package source: a place where you can get packages from.\n- For libraries that specify autoload information, Composer generates a vendor/autoload.php file. You can include this file and start using the classes that those libraries provide without any extra work:\n```php\nrequire __DIR__ . '/vendor/autoload.php';\n\n$log = new Monolog\\Logger('name');\n$log->pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n$log->warning('Foo');\n```\n-  The only difference between your project and a library is that your project is a package without a name. In order to make that package installable you need to give it a name. You do this by adding the name property in composer.json:\n```json\n{\n    \"name\": \"acme/hello-world\",\n    \"require\": {\n        \"monolog/monolog\": \"1.0.*\"\n    }\n}\n```\n\n\n\n\n### Chapter - 2:\n\n\n",
      "html": "<h1 id=\"composer\">Composer <a class=\"heading-anchor-permalink\" href=\"#composer\">#</a></h1>\n<p>Resources:</p>\n<ol>\n<li>Course: Wonderful World of Composer\n(<a href=\"https://symfonycasts.com/screencast/composer\">https://symfonycasts.com/screencast/composer</a>)</li>\n<li></li>\n</ol>\n<h3 id=\"chapter---1%3A-composer\">Chapter - 1: Composer <a class=\"heading-anchor-permalink\" href=\"#chapter---1%3A-composer\">#</a></h3>\n<p>To use just one outside library, you’d need to tackle at least three major issues:</p>\n<ol>\n<li>First, how do I autoload the PHP classes in the library? <em>Autoloading is the background machine that makes it possible to reference PHP classes without using <code>require</code> or <code>include</code> statements</em>.  When I bring in outside code, I either need to figure out which files to include or how to configure that library’s autoloader.</li>\n<li>Second, we need to know if this library depends on any other libraries. And if it does, we need to download and configure.</li>\n<li>How should I store the library in my project? for example, use (SVN externals,Git Submodules).</li>\n</ol>\n<p>The answer to these 3 problems is <strong>Composer</strong>.</p>\n<h4 id=\"installation%3A\">Installation: <a class=\"heading-anchor-permalink\" href=\"#installation%3A\">#</a></h4>\n<p>this will download composer executble (<code>composer.phar</code>) file inside current folder:</p>\n<pre><code class=\"language-bash\">curl -s https://getcomposer.org/installer | php\n</code></pre>\n<p>If fine, <code>$ php composer.phar</code> will list all avaibl composer commands.</p>\n<ul>\n<li>\n<p>Composer’s main job is to download third-party libraries into a vendor/ directory in your project. To tell Composer which libraries you need, your project needs to have a composer.json\n<code>$ php composer.phar init</code></p>\n</li>\n<li>\n<p>Composer is searching against a giant central repository of packages called “Packagist”. for example, enter: <code>finder</code> as the package name to search.</p>\n</li>\n<li>\n<p>In the language of Composer, a package is just an individual directory that you want to download into your project.</p>\n</li>\n<li>\n<p>If a version ends in -dev, it’s a development branch, which may be stable or unstable based on the library. The dev-master version is special, and it always means the latest, bleeding-edge code. If you use a lesser-known package, dev-master may be your only option. Finally, confirm generation and add vendor/ to your .gitignore file if you’re storing your project with git:</p>\n</li>\n</ul>\n<pre><code class=\"language-git\"># .gitignore\n/vendor/\n</code></pre>\n<ul>\n<li>package name is something like (<vendor>/<name>) such as ‘symfony/finder’.</li>\n<li>To actually put Composer to work, run <code>php composer.phar install</code>. This is the most important command: it reads the composer.json file and downloads all the needed libraries into the vendor directory.</li>\n<li>To initially install the defined dependencies for your project, you should run the update command: <code>php composer.phar update</code>. This will make Composer do two things:\n<ul>\n<li>It resolves all dependencies listed in your composer.json file and writes all of the packages and their exact versions to the composer.lock file, locking the project to those specific versions. You should commit the composer.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies (more below). This is the main role of the update command.</li>\n<li>It then implicitly runs the install command. This will download the dependencies’ files into the vendor directory in your project. (The vendor directory is the conventional location for all third-party code in a project). In our example from above, you would end up with the Monolog source files in vendor/monolog/monolog/. As Monolog has a dependency on psr/log, that package’s files can also be found inside vendor/.</li>\n</ul>\n</li>\n<li>running install when a composer.lock file is present resolves and installs all dependencies that you listed in composer.json, but Composer uses the exact versions listed in composer.lock to ensure that the package versions are consistent for everyone working on your project</li>\n<li><a href=\"http://Packagist.org\">Packagist.org</a> is the main Composer repository. A Composer repository is basically a package source: a place where you can get packages from.</li>\n<li>For libraries that specify autoload information, Composer generates a vendor/autoload.php file. You can include this file and start using the classes that those libraries provide without any extra work:</li>\n</ul>\n<pre><code class=\"language-php\">require __DIR__ . '/vendor/autoload.php';\n\n$log = new Monolog\\Logger('name');\n$log-&gt;pushHandler(new Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING));\n$log-&gt;warning('Foo');\n</code></pre>\n<ul>\n<li>The only difference between your project and a library is that your project is a package without a name. In order to make that package installable you need to give it a name. You do this by adding the name property in composer.json:</li>\n</ul>\n<pre><code class=\"language-json\">{\n    &quot;name&quot;: &quot;acme/hello-world&quot;,\n    &quot;require&quot;: {\n        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;\n    }\n}\n</code></pre>\n<h3 id=\"chapter---2%3A\">Chapter - 2: <a class=\"heading-anchor-permalink\" href=\"#chapter---2%3A\">#</a></h3>\n",
      "id": 49
    },
    {
      "path": "Symfony/Symfonycasts/Dependency Injection and the art of services and containers.md",
      "url": "Symfony/Symfonycasts/Dependency Injection and the art of services and containers.html",
      "content": "# Symfonycasts\n\n## Course: Dependency Injection and the art of services and containers\n(https://symfonycasts.com/screencast/dependency-injection/intro)\n\n### Chapter - 1: Dependency Injection\n\n### Chapter - 2: Services and Dependency Injection:\n\n",
      "html": "<h1 id=\"symfonycasts\">Symfonycasts <a class=\"heading-anchor-permalink\" href=\"#symfonycasts\">#</a></h1>\n<h2 id=\"course%3A-dependency-injection-and-the-art-of-services-and-containers\">Course: Dependency Injection and the art of services and containers <a class=\"heading-anchor-permalink\" href=\"#course%3A-dependency-injection-and-the-art-of-services-and-containers\">#</a></h2>\n<p>(<a href=\"https://symfonycasts.com/screencast/dependency-injection/intro\">https://symfonycasts.com/screencast/dependency-injection/intro</a>)</p>\n<h3 id=\"chapter---1%3A-dependency-injection\">Chapter - 1: Dependency Injection <a class=\"heading-anchor-permalink\" href=\"#chapter---1%3A-dependency-injection\">#</a></h3>\n<h3 id=\"chapter---2%3A-services-and-dependency-injection%3A\">Chapter - 2: Services and Dependency Injection: <a class=\"heading-anchor-permalink\" href=\"#chapter---2%3A-services-and-dependency-injection%3A\">#</a></h3>\n",
      "id": 50
    },
    {
      "path": "Symfony/Symfonycasts/Symfony 6 Fundamentals: Services, Config & Environments.md",
      "url": "Symfony/Symfonycasts/Symfony 6 Fundamentals: Services, Config & Environments.html",
      "content": "# Symfonycasts\n\n## Course: Symfony 6 Fundamentals: Services, Config & Environments\n(https://symfonycasts.com/screencast/symfony-fundamentals/bundles)\n\n### Chapter - 1: Dependency Injection\n\n### Chapter - 2: Services and Dependency Injection:\n\n",
      "html": "<h1 id=\"symfonycasts\">Symfonycasts <a class=\"heading-anchor-permalink\" href=\"#symfonycasts\">#</a></h1>\n<h2 id=\"course%3A-symfony-6-fundamentals%3A-services%2C-config-%26-environments\">Course: Symfony 6 Fundamentals: Services, Config &amp; Environments <a class=\"heading-anchor-permalink\" href=\"#course%3A-symfony-6-fundamentals%3A-services%2C-config-%26-environments\">#</a></h2>\n<p>(<a href=\"https://symfonycasts.com/screencast/symfony-fundamentals/bundles\">https://symfonycasts.com/screencast/symfony-fundamentals/bundles</a>)</p>\n<h3 id=\"chapter---1%3A-dependency-injection\">Chapter - 1: Dependency Injection <a class=\"heading-anchor-permalink\" href=\"#chapter---1%3A-dependency-injection\">#</a></h3>\n<h3 id=\"chapter---2%3A-services-and-dependency-injection%3A\">Chapter - 2: Services and Dependency Injection: <a class=\"heading-anchor-permalink\" href=\"#chapter---2%3A-services-and-dependency-injection%3A\">#</a></h3>\n",
      "id": 51
    },
    {
      "path": "Symfony/chapter5_symfonyCats.md",
      "url": "Symfony/chapter5_symfonyCats.html",
      "content": "# SymfonyCasts\n\n(https://symfonycasts.com/screencast/symfony/flex#play)\n\n## Symfony Flex: Aliases, Packs & Recipes\n\n- **symfony/flex** is `composer` plugin that add more features to composer.\n- head to https://flex.symfony.com to see a gian page full of packages\n- Whenever you install a package, that package may have a recipe. If it does, in addition to downloading the package into the vendor/ directory, Flex will also execute its recipe. Recipes can do things like add new files or even modify a few existing files.\n- bundles are Symfony plugins, which add more features to our app.\n- use `extends` and surround all content with `{% block body %}`.\n- You can also add more blocks. Every block you add is just another potential override point.\n\n> Note: Block name must be unique inside twig file else error.\n\n- As soon as you extend another template, you must surround all of your content in one or more blocks. Otherwise, an error will occur.\n---\n\n### Profiler: Your Debugging Best Friend\n\n- run `composer require debug` to display the debug bar at the bottom of output page.\n- use `dd`(dump and die) or\n- `dump`(dump and live).\n- The difference between require and require-dev isn't too important: all of these packages were downloaded into our app, But as a best practice, if you install a library that's only meant for local development, you should put it into require-dev. The pack did that for us! Thanks pack!\n- You can also use this dump() in Twig.\n- Calling dump() without arguments will print all the available variables only when you call it from inside of a Twig template! If you call this function in a PHP file, it will throw an error:\n\n### Assets, CSS, Images, etc\n\n- Symfony have a cool features to help work with CSS and Javascript **Webpack Encore and Stimulus** => `$ composer require symfony/asset`.\n- put css styles files inside '/public' folder anywhere.\n- you can use `{{asset('styles/app.css')}} (_note no need to use '/'_)\n\n### Generate Urls & bin/console\n\n- To generate a URL inside of twig, use `{{ path('route name')}}`, where route name is the name you associate it using `#[Route('/',name='route_name')]`\n- all following are the same:\n`php bin/console`\n`./bin/console`\n`symfony console`\n- for ` #[Route('/browse/{slug}', name: 'app_browse')]`, this is an example:\n```html\n  <li class=\"d-inline\">\n            <a class=\"btn btn-primary btn-sm\" href=\"{{ path('app_browse', {\n                slug: 'pop'\n            }) }}\">Pop</a>\n        </li>\n        <li class=\"d-inline\">\n            <a class=\"btn btn-primary btn-sm\" href=\"{{ path('app_browse', {\n                slug: 'rock'\n            }) }}\">Rock</a>\n        </li>\n        <li class=\"d-inline\">\n            <a class=\"btn btn-primary btn-sm\" href=\"{{ path('app_browse', {\n                slug: 'heavy-metal'\n            }) }}\">Heavy Metal</a>\n        </li>\n\n```\n### JSON API Endpoint\n- `return new JsonRespose($songs);`\n\n### Smart Routes: GET-only & Validate {Wildcards}\n\n- Restricting Routes to GET or POST Only,use `methods: ['GET']`. Such as:\n` #[Route('/api/songs/{id}', methods: ['GET'])]`\n\n### Restricting Route Wildcards by Regex\n\n- example:  `#[Route('/api/songs/{id<\\d+>}', methods: ['GET'])]`\n\n### Service Objects:\n\n- When you hear service, just think: that's an object that does work!\n- `php bin/console debug:autowiring` => This lists all of the services that exist in our app\n- Is there a service for logging? => `php bin/console debug:autowiring log`\n-  if you want a service, you ask for it by using the type-hint shown in this command. It's called autowiring.\n\n\n### Setting up Webpack Encore\n\n- Webpack is the industry standard tool for packaging, minifying and parsing your frontend CSS, JavaScript, and other files.\n- first check you have node and npm/yarn installed:\n`node -v`\n`yarn --version`\nor\n`npm -v`\n\nThen, install **Encore**:\n`composer require encore:1.14.0` =>this will make 'asset' folder\n\n> If you're using version 2 or higher of symfony/webpack-encore-bundle, be sure to also run: `composer require symfony/stimulus-bundle`\n\nThen `npm install` to install debendencies\n\n- to use \"ago\" formats for dates, see github repo: knptimebundle repo.\n- Always use: `php bin/console debug:autowiring 'package/service name'`\n- To know which configuration keys you can use in package configuration file: `php bin/console debug:config 'package-name'`. and for default values: `... config:dump 'package-name'`\n\n- Container: an array of services ids associated with name.\n    - There are actually many more services in the container, and each service has a unique id in the container.\n    - `php bin/console debug:container`\n    - For a full list, you can run (https://symfony.com/doc/current/service_container.html).\n\n> Creating/Configuring Services in the Container: see (https://symfony.com/doc/current/service_container.html#:~:text=Creating/Configuring%20Services%20in%20the%20Container)\n    keywords:\n    - autowiring\n    - src/services\n    - config/services.yml\n    - getMessage()\n    - array_rand($messeges)\n    - get a list of autowireable type-hints by running: `$ php bin/console debug:autowiring`\n\n-\n\n\n",
      "html": "<h1 id=\"symfonycasts\">SymfonyCasts <a class=\"heading-anchor-permalink\" href=\"#symfonycasts\">#</a></h1>\n<p>(<a href=\"https://symfonycasts.com/screencast/symfony/flex#play\">https://symfonycasts.com/screencast/symfony/flex#play</a>)</p>\n<h2 id=\"symfony-flex%3A-aliases%2C-packs-%26-recipes\">Symfony Flex: Aliases, Packs &amp; Recipes <a class=\"heading-anchor-permalink\" href=\"#symfony-flex%3A-aliases%2C-packs-%26-recipes\">#</a></h2>\n<ul>\n<li><strong>symfony/flex</strong> is <code>composer</code> plugin that add more features to composer.</li>\n<li>head to <a href=\"https://flex.symfony.com\">https://flex.symfony.com</a> to see a gian page full of packages</li>\n<li>Whenever you install a package, that package may have a recipe. If it does, in addition to downloading the package into the vendor/ directory, Flex will also execute its recipe. Recipes can do things like add new files or even modify a few existing files.</li>\n<li>bundles are Symfony plugins, which add more features to our app.</li>\n<li>use <code>extends</code> and surround all content with <code>{% block body %}</code>.</li>\n<li>You can also add more blocks. Every block you add is just another potential override point.</li>\n</ul>\n<blockquote>\n<p>Note: Block name must be unique inside twig file else error.</p>\n</blockquote>\n<ul>\n<li>As soon as you extend another template, you must surround all of your content in one or more blocks. Otherwise, an error will occur.</li>\n</ul>\n<hr>\n<h3 id=\"profiler%3A-your-debugging-best-friend\">Profiler: Your Debugging Best Friend <a class=\"heading-anchor-permalink\" href=\"#profiler%3A-your-debugging-best-friend\">#</a></h3>\n<ul>\n<li>run <code>composer require debug</code> to display the debug bar at the bottom of output page.</li>\n<li>use <code>dd</code>(dump and die) or</li>\n<li><code>dump</code>(dump and live).</li>\n<li>The difference between require and require-dev isn’t too important: all of these packages were downloaded into our app, But as a best practice, if you install a library that’s only meant for local development, you should put it into require-dev. The pack did that for us! Thanks pack!</li>\n<li>You can also use this dump() in Twig.</li>\n<li>Calling dump() without arguments will print all the available variables only when you call it from inside of a Twig template! If you call this function in a PHP file, it will throw an error:</li>\n</ul>\n<h3 id=\"assets%2C-css%2C-images%2C-etc\">Assets, CSS, Images, etc <a class=\"heading-anchor-permalink\" href=\"#assets%2C-css%2C-images%2C-etc\">#</a></h3>\n<ul>\n<li>Symfony have a cool features to help work with CSS and Javascript <strong>Webpack Encore and Stimulus</strong> =&gt; <code>$ composer require symfony/asset</code>.</li>\n<li>put css styles files inside ‘/public’ folder anywhere.</li>\n<li>you can use `{{asset(‘styles/app.css’)}} (<em>note no need to use ‘/’</em>)</li>\n</ul>\n<h3 id=\"generate-urls-%26-bin%2Fconsole\">Generate Urls &amp; bin/console <a class=\"heading-anchor-permalink\" href=\"#generate-urls-%26-bin%2Fconsole\">#</a></h3>\n<ul>\n<li>To generate a URL inside of twig, use <code>{{ path('route name')}}</code>, where route name is the name you associate it using <code>#[Route('/',name='route_name')]</code></li>\n<li>all following are the same:\n<code>php bin/console</code>\n<code>./bin/console</code>\n<code>symfony console</code></li>\n<li>for <code>#[Route('/browse/{slug}', name: 'app_browse')]</code>, this is an example:</li>\n</ul>\n<pre><code class=\"language-html\">  &lt;li class=&quot;d-inline&quot;&gt;\n            &lt;a class=&quot;btn btn-primary btn-sm&quot; href=&quot;{{ path('app_browse', {\n                slug: 'pop'\n            }) }}&quot;&gt;Pop&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=&quot;d-inline&quot;&gt;\n            &lt;a class=&quot;btn btn-primary btn-sm&quot; href=&quot;{{ path('app_browse', {\n                slug: 'rock'\n            }) }}&quot;&gt;Rock&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=&quot;d-inline&quot;&gt;\n            &lt;a class=&quot;btn btn-primary btn-sm&quot; href=&quot;{{ path('app_browse', {\n                slug: 'heavy-metal'\n            }) }}&quot;&gt;Heavy Metal&lt;/a&gt;\n        &lt;/li&gt;\n\n</code></pre>\n<h3 id=\"json-api-endpoint\">JSON API Endpoint <a class=\"heading-anchor-permalink\" href=\"#json-api-endpoint\">#</a></h3>\n<ul>\n<li><code>return new JsonRespose($songs);</code></li>\n</ul>\n<h3 id=\"smart-routes%3A-get-only-%26-validate-%7Bwildcards%7D\">Smart Routes: GET-only &amp; Validate {Wildcards} <a class=\"heading-anchor-permalink\" href=\"#smart-routes%3A-get-only-%26-validate-%7Bwildcards%7D\">#</a></h3>\n<ul>\n<li>Restricting Routes to GET or POST Only,use <code>methods: ['GET']</code>. Such as:\n<code>#[Route('/api/songs/{id}', methods: ['GET'])]</code></li>\n</ul>\n<h3 id=\"restricting-route-wildcards-by-regex\">Restricting Route Wildcards by Regex <a class=\"heading-anchor-permalink\" href=\"#restricting-route-wildcards-by-regex\">#</a></h3>\n<ul>\n<li>example:  <code>#[Route('/api/songs/{id&lt;\\d+&gt;}', methods: ['GET'])]</code></li>\n</ul>\n<h3 id=\"service-objects%3A\">Service Objects: <a class=\"heading-anchor-permalink\" href=\"#service-objects%3A\">#</a></h3>\n<ul>\n<li>When you hear service, just think: that’s an object that does work!</li>\n<li><code>php bin/console debug:autowiring</code> =&gt; This lists all of the services that exist in our app</li>\n<li>Is there a service for logging? =&gt; <code>php bin/console debug:autowiring log</code></li>\n<li>if you want a service, you ask for it by using the type-hint shown in this command. It’s called autowiring.</li>\n</ul>\n<h3 id=\"setting-up-webpack-encore\">Setting up Webpack Encore <a class=\"heading-anchor-permalink\" href=\"#setting-up-webpack-encore\">#</a></h3>\n<ul>\n<li>Webpack is the industry standard tool for packaging, minifying and parsing your frontend CSS, JavaScript, and other files.</li>\n<li>first check you have node and npm/yarn installed:\n<code>node -v</code>\n<code>yarn --version</code>\nor\n<code>npm -v</code></li>\n</ul>\n<p>Then, install <strong>Encore</strong>:\n<code>composer require encore:1.14.0</code> =&gt;this will make ‘asset’ folder</p>\n<blockquote>\n<p>If you’re using version 2 or higher of symfony/webpack-encore-bundle, be sure to also run: <code>composer require symfony/stimulus-bundle</code></p>\n</blockquote>\n<p>Then <code>npm install</code> to install debendencies</p>\n<ul>\n<li>\n<p>to use “ago” formats for dates, see github repo: knptimebundle repo.</p>\n</li>\n<li>\n<p>Always use: <code>php bin/console debug:autowiring 'package/service name'</code></p>\n</li>\n<li>\n<p>To know which configuration keys you can use in package configuration file: <code>php bin/console debug:config 'package-name'</code>. and for default values: <code>... config:dump 'package-name'</code></p>\n</li>\n<li>\n<p>Container: an array of services ids associated with name.</p>\n<ul>\n<li>There are actually many more services in the container, and each service has a unique id in the container.</li>\n<li><code>php bin/console debug:container</code></li>\n<li>For a full list, you can run (<a href=\"https://symfony.com/doc/current/service_container.html\">https://symfony.com/doc/current/service_container.html</a>).</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Creating/Configuring Services in the Container: see (<a href=\"https://symfony.com/doc/current/service_container.html#:~:text=Creating/Configuring%20Services%20in%20the%20Container\">https://symfony.com/doc/current/service_container.html#:~:text=Creating/Configuring Services in the Container</a>)\nkeywords:\n- autowiring\n- src/services\n- config/services.yml\n- getMessage()\n- array_rand($messeges)\n- get a list of autowireable type-hints by running: <code>$ php bin/console debug:autowiring</code></p>\n</blockquote>\n<ul>\n<li></li>\n</ul>\n",
      "id": 52
    },
    {
      "path": "Symfony/symfony_and_http_fundamentals.md",
      "url": "Symfony/symfony_and_http_fundamentals.html",
      "content": "# Symfony and HTTP Fundamentals\n\n**HTTP fundamentals and find out how these are applied throughout Symfony.**\n\n## Requests and Responses in HTTP\n\n- HTTP is the term used to describe this text-based language. The goal of your server is always to understand text requests and return text responses.\n\n#### Step 1\n- The Client Sends a Request:(The request is a text message created by a client (e.g. a browser, a smartphone app, etc) in a special format known as HTTP. The client sends that request to a server, and then waits for the response). In HTTP, it looks like this:\n\n**GET / HTTP/1.1** => the most important, because it contains two important things: 1. the HTTP method/verb (e.g GET) which  defines what the client wants to do with the resource.  and 2. the URI (/)\n\n**Host: xkcd.com**                         --\n**Accept: text/html**                        | => request header\n**User-Agent: Mozilla/5.0 (Macintosh)**      |\n**Content-Lenght: 9**                      --\n\n**a=12&b=10**  => request message body\n\n**HTTP have 9 methods but the most common HTTP methods are:**\nGET: Retrieve the resource from the server (e.g. when visiting a page)\nPOST: Create a resource on the server (e.g. when submitting a form)\nPUT/PATCH: Update the resource on the server (used by APIs)\nDELETE: Delete the resource from the server (used by APIs).\n\n- In addition to the first line, an HTTP request invariably contains other lines of information called **request headers**. The headers can supply a wide range of information such as the host of the resource being requested (Host), the response formats the client accepts (Accept) and the application the client is using to make the request (User-Agent). Many other headers exist and can be found on Wikipedia's [List of HTTP header fields](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields) article.\n\n#### Step 2\n-  The Server Returns a Response: The server prepares the resource and returns it in an HTTP response.\n\n**Translated into HTTP, the response sent back to the browser will look something like this:**\n```http\nHTTP/1.1 200 OK\nDate: Sat, 02 Apr 2011 21:05:05 GMT\nServer: lighttpd/1.4.19\nContent-Type: text/html\n\n<html>\n    <!-- ... HTML for the xkcd comic -->\n</html>\n```\n- first line, the HTTP response status code (200 in this case). Different status codes exist that indicate success, an error or that the client needs to do something (e.g. redirect to another page). Check out the list of [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n- Like the request, an HTTP response contains additional pieces of information known as HTTP headers. The body of the same resource could be returned in multiple different formats like HTML, XML or JSON and the Content-Type header uses Internet Media Types like text/html to tell the client which format is being returned. You can see a [List of common media](https://www.iana.org/assignments/media-types/media-types.xhtml) types from IANA.\n\n---\n\n## Requests, Responses and Web Development\nThis request-response conversation is the fundamental process that drives all communication on the web.\n\n#### Requests and Responses in PHP\n\nExample of how PHP interact with the \"request\" and create a \"response\"\n```php\n# Instead of parsing the raw HTTP request message, PHP prepares superglobal variables that contain all the information from the request.\n$uri = $_SERVER['REQUEST_URI'];\n$foo = $_GET['foo'];\n# instead of returning the HTTP-formatted text response, you can use the PHP header function to create response headers and print out the actual content that will be the content portion of the response message.\nheader('Content-Type: text/html');\necho 'The URI requested is: '.$uri;\necho 'The value of the \"foo\" parameter is: '.$foo;\n```\nPHP will create a true HTTP response and return it to the client:\n```http\nHTTP/1.1 200 OK\nDate: Sat, 03 Apr 2011 02:14:33 GMT\nServer: Apache/2.2.17 (Unix)\nContent-Type: text/html\n\nThe URI requested is: /testing?foo=symfony\nThe value of the \"foo\" parameter is: symfony\n```\n#### Requests and Responses in Symfony\n\n- Symfony provides an alternative to the raw PHP approach via two **classes** that allow you to interact with the HTTP request and response in an easier way.\n\n1. The `Request` (https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/HttpFoundation/Request.php) class is an object-oriented representation of the HTTP request message. With it, you have all the request information at your fingertips:\n```php\nuse Symfony\\Component\\HttpFoundation\\Request;\n$request = Request::createFromGlobals();\n\n// the URI being requested (e.g. /about) minus any query parameters\n$request->getPathInfo();\n\n// retrieves $_GET and $_POST variables respectively\n$request->query->get('id');\n$request->request->get('category', 'default category');\n\n// retrieves $_SERVER variables\n$request->server->get('HTTP_HOST');\n\n// retrieves an instance of UploadedFile identified by \"attachment\"\n$request->files->get('attachment');\n\n// retrieves a $_COOKIE value\n$request->cookies->get('PHPSESSID');\n\n// retrieves an HTTP request header, with normalized, lowercase keys\n$request->headers->get('host');\n$request->headers->get('content-type');\n\n$request->getMethod();    // e.g. GET, POST, PUT, DELETE or HEAD\n$request->getLanguages(); // an array of languages the client accepts\n```\n\n2. The `Response` (https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/HttpFoundation/Response.php) class which is a PHP representation of an HTTP response message to be returned to the client:\n```php\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$response = new Response();\n\n$response->setContent('<html><body><h1>Hello world!</h1></body></html>');\n$response->setStatusCode(Response::HTTP_OK);\n\n// sets a HTTP response header\n$response->headers->set('Content-Type', 'text/html');\n\n// prints the HTTP headers followed by the content\n$response->send();\n```\n\n> The Request and Response classes are part of a standalone component called **symfony/http-foundation** (https://symfony.com/doc/current/components/http_foundation.html) that you can use in any PHP project. This also contains classes for handling sessions, file uploads and more.\n\n## The Journey from the Request to the Response\n\nThe real work comes in writing the code that interprets the request information and creates the response and your application probably does many things, like sending emails, handling form submissions, saving things to a database, rendering HTML pages and protecting content with security. Symfony was created to help you with these problems.\n\n### The Front Controller\n\nWhat if you wanted to change `blog.php` to `news.php` without breaking all of your links?\nA much better solution is to use a **front controller**: a single PHP file that handles every request coming into your application. For example:\n\n/index.php\t        executes index.php\n/index.php/contact\texecutes index.php\n/index.php/blog\t    executes index.php\n\n> By using rewrite rules in your web server configuration, the index.php won't be needed and you will have beautiful, clean URLs (e.g. /show).\n\nNow, every request is handled exactly the same way. Instead of individual URLs executing different PHP files, the front controller is always executed, and the routing of different URLs to different parts of your application is done internally.\n\nA small front controller might look like this:\n\n```php\n// index.php\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n$path = $request->getPathInfo(); // the URI path being requested\n\nif (in_array($path, ['', '/'])) {\n    $response = new Response('Welcome to the homepage.');\n} elseif ('/contact' === $path) {\n    $response = new Response('Contact us');\n} else {\n    $response = new Response('Page not found.', Response::HTTP_NOT_FOUND);\n}\n$response->send();\n\n```\n\nBut this is still a lot of repeated work, Symfony can help once again.\n\n## The Symfony Application Flow\n\nA Symfony framework application also uses a front-controller file. But inside, Symfony is responsible for handling each incoming request and figuring out what to do:\n\n<img src=\"https://symfony.com/doc/current/introduction/http_fundamentals.html#step-2-the-server-returns-a-response\" />\n\n- Incoming requests are interpreted by the [Routing component](https://symfony.com/doc/current/routing.html) and passed to PHP functions that return Response objects.\n\n## Summary: The Request-Response Flow\nHere's what we've learned so far:\n\n- A client (e.g. a browser) sends an HTTP request;\n- Each request executes the same, single file (called a \"front controller\");\n- The front controller boots Symfony and passes the request information;\n- Internally, Symfony uses routes and controllers to create the Response for the page (we'll learn about these soon!);\n- Symfony turns your Response object into the text headers and content (i.e. the HTTP response), which are sent back to the client.\n",
      "html": "<h1 id=\"symfony-and-http-fundamentals\">Symfony and HTTP Fundamentals <a class=\"heading-anchor-permalink\" href=\"#symfony-and-http-fundamentals\">#</a></h1>\n<p><strong>HTTP fundamentals and find out how these are applied throughout Symfony.</strong></p>\n<h2 id=\"requests-and-responses-in-http\">Requests and Responses in HTTP <a class=\"heading-anchor-permalink\" href=\"#requests-and-responses-in-http\">#</a></h2>\n<ul>\n<li>HTTP is the term used to describe this text-based language. The goal of your server is always to understand text requests and return text responses.</li>\n</ul>\n<h4 id=\"step-1\">Step 1 <a class=\"heading-anchor-permalink\" href=\"#step-1\">#</a></h4>\n<ul>\n<li>The Client Sends a Request:(The request is a text message created by a client (e.g. a browser, a smartphone app, etc) in a special format known as HTTP. The client sends that request to a server, and then waits for the response). In HTTP, it looks like this:</li>\n</ul>\n<p><strong>GET / HTTP/1.1</strong> =&gt; the most important, because it contains two important things: 1. the HTTP method/verb (e.g GET) which  defines what the client wants to do with the resource.  and 2. the URI (/)</p>\n<p><strong>Host: <a href=\"http://xkcd.com\">xkcd.com</a></strong>                         –\n<strong>Accept: text/html</strong>                        | =&gt; request header\n<strong>User-Agent: Mozilla/5.0 (Macintosh)</strong>      |\n<strong>Content-Lenght: 9</strong>                      –</p>\n<p><strong>a=12&amp;b=10</strong>  =&gt; request message body</p>\n<p><strong>HTTP have 9 methods but the most common HTTP methods are:</strong>\nGET: Retrieve the resource from the server (e.g. when visiting a page)\nPOST: Create a resource on the server (e.g. when submitting a form)\nPUT/PATCH: Update the resource on the server (used by APIs)\nDELETE: Delete the resource from the server (used by APIs).</p>\n<ul>\n<li>In addition to the first line, an HTTP request invariably contains other lines of information called <strong>request headers</strong>. The headers can supply a wide range of information such as the host of the resource being requested (Host), the response formats the client accepts (Accept) and the application the client is using to make the request (User-Agent). Many other headers exist and can be found on Wikipedia’s <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\">List of HTTP header fields</a> article.</li>\n</ul>\n<h4 id=\"step-2\">Step 2 <a class=\"heading-anchor-permalink\" href=\"#step-2\">#</a></h4>\n<ul>\n<li>The Server Returns a Response: The server prepares the resource and returns it in an HTTP response.</li>\n</ul>\n<p><strong>Translated into HTTP, the response sent back to the browser will look something like this:</strong></p>\n<pre><code class=\"language-http\">HTTP/1.1 200 OK\nDate: Sat, 02 Apr 2011 21:05:05 GMT\nServer: lighttpd/1.4.19\nContent-Type: text/html\n\n&lt;html&gt;\n    &lt;!-- ... HTML for the xkcd comic --&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>\n<p>first line, the HTTP response status code (200 in this case). Different status codes exist that indicate success, an error or that the client needs to do something (e.g. redirect to another page). Check out the list of <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">HTTP status codes</a></p>\n</li>\n<li>\n<p>Like the request, an HTTP response contains additional pieces of information known as HTTP headers. The body of the same resource could be returned in multiple different formats like HTML, XML or JSON and the Content-Type header uses Internet Media Types like text/html to tell the client which format is being returned. You can see a <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">List of common media</a> types from IANA.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"requests%2C-responses-and-web-development\">Requests, Responses and Web Development <a class=\"heading-anchor-permalink\" href=\"#requests%2C-responses-and-web-development\">#</a></h2>\n<p>This request-response conversation is the fundamental process that drives all communication on the web.</p>\n<h4 id=\"requests-and-responses-in-php\">Requests and Responses in PHP <a class=\"heading-anchor-permalink\" href=\"#requests-and-responses-in-php\">#</a></h4>\n<p>Example of how PHP interact with the “request” and create a “response”</p>\n<pre><code class=\"language-php\"># Instead of parsing the raw HTTP request message, PHP prepares superglobal variables that contain all the information from the request.\n$uri = $_SERVER['REQUEST_URI'];\n$foo = $_GET['foo'];\n# instead of returning the HTTP-formatted text response, you can use the PHP header function to create response headers and print out the actual content that will be the content portion of the response message.\nheader('Content-Type: text/html');\necho 'The URI requested is: '.$uri;\necho 'The value of the &quot;foo&quot; parameter is: '.$foo;\n</code></pre>\n<p>PHP will create a true HTTP response and return it to the client:</p>\n<pre><code class=\"language-http\">HTTP/1.1 200 OK\nDate: Sat, 03 Apr 2011 02:14:33 GMT\nServer: Apache/2.2.17 (Unix)\nContent-Type: text/html\n\nThe URI requested is: /testing?foo=symfony\nThe value of the &quot;foo&quot; parameter is: symfony\n</code></pre>\n<h4 id=\"requests-and-responses-in-symfony\">Requests and Responses in Symfony <a class=\"heading-anchor-permalink\" href=\"#requests-and-responses-in-symfony\">#</a></h4>\n<ul>\n<li>Symfony provides an alternative to the raw PHP approach via two <strong>classes</strong> that allow you to interact with the HTTP request and response in an easier way.</li>\n</ul>\n<ol>\n<li>The <code>Request</code> (<a href=\"https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/HttpFoundation/Request.php\">https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/HttpFoundation/Request.php</a>) class is an object-oriented representation of the HTTP request message. With it, you have all the request information at your fingertips:</li>\n</ol>\n<pre><code class=\"language-php\">use Symfony\\Component\\HttpFoundation\\Request;\n$request = Request::createFromGlobals();\n\n// the URI being requested (e.g. /about) minus any query parameters\n$request-&gt;getPathInfo();\n\n// retrieves $_GET and $_POST variables respectively\n$request-&gt;query-&gt;get('id');\n$request-&gt;request-&gt;get('category', 'default category');\n\n// retrieves $_SERVER variables\n$request-&gt;server-&gt;get('HTTP_HOST');\n\n// retrieves an instance of UploadedFile identified by &quot;attachment&quot;\n$request-&gt;files-&gt;get('attachment');\n\n// retrieves a $_COOKIE value\n$request-&gt;cookies-&gt;get('PHPSESSID');\n\n// retrieves an HTTP request header, with normalized, lowercase keys\n$request-&gt;headers-&gt;get('host');\n$request-&gt;headers-&gt;get('content-type');\n\n$request-&gt;getMethod();    // e.g. GET, POST, PUT, DELETE or HEAD\n$request-&gt;getLanguages(); // an array of languages the client accepts\n</code></pre>\n<ol start=\"2\">\n<li>The <code>Response</code> (<a href=\"https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/HttpFoundation/Response.php\">https://github.com/symfony/symfony/blob/6.3/src/Symfony/Component/HttpFoundation/Response.php</a>) class which is a PHP representation of an HTTP response message to be returned to the client:</li>\n</ol>\n<pre><code class=\"language-php\">use Symfony\\Component\\HttpFoundation\\Response;\n\n$response = new Response();\n\n$response-&gt;setContent('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello world!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;');\n$response-&gt;setStatusCode(Response::HTTP_OK);\n\n// sets a HTTP response header\n$response-&gt;headers-&gt;set('Content-Type', 'text/html');\n\n// prints the HTTP headers followed by the content\n$response-&gt;send();\n</code></pre>\n<blockquote>\n<p>The Request and Response classes are part of a standalone component called <strong>symfony/http-foundation</strong> (<a href=\"https://symfony.com/doc/current/components/http_foundation.html\">https://symfony.com/doc/current/components/http_foundation.html</a>) that you can use in any PHP project. This also contains classes for handling sessions, file uploads and more.</p>\n</blockquote>\n<h2 id=\"the-journey-from-the-request-to-the-response\">The Journey from the Request to the Response <a class=\"heading-anchor-permalink\" href=\"#the-journey-from-the-request-to-the-response\">#</a></h2>\n<p>The real work comes in writing the code that interprets the request information and creates the response and your application probably does many things, like sending emails, handling form submissions, saving things to a database, rendering HTML pages and protecting content with security. Symfony was created to help you with these problems.</p>\n<h3 id=\"the-front-controller\">The Front Controller <a class=\"heading-anchor-permalink\" href=\"#the-front-controller\">#</a></h3>\n<p>What if you wanted to change <code>blog.php</code> to <code>news.php</code> without breaking all of your links?\nA much better solution is to use a <strong>front controller</strong>: a single PHP file that handles every request coming into your application. For example:</p>\n<p>/index.php\t        executes index.php\n/index.php/contact\texecutes index.php\n/index.php/blog\t    executes index.php</p>\n<blockquote>\n<p>By using rewrite rules in your web server configuration, the index.php won’t be needed and you will have beautiful, clean URLs (e.g. /show).</p>\n</blockquote>\n<p>Now, every request is handled exactly the same way. Instead of individual URLs executing different PHP files, the front controller is always executed, and the routing of different URLs to different parts of your application is done internally.</p>\n<p>A small front controller might look like this:</p>\n<pre><code class=\"language-php\">// index.php\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n$path = $request-&gt;getPathInfo(); // the URI path being requested\n\nif (in_array($path, ['', '/'])) {\n    $response = new Response('Welcome to the homepage.');\n} elseif ('/contact' === $path) {\n    $response = new Response('Contact us');\n} else {\n    $response = new Response('Page not found.', Response::HTTP_NOT_FOUND);\n}\n$response-&gt;send();\n\n</code></pre>\n<p>But this is still a lot of repeated work, Symfony can help once again.</p>\n<h2 id=\"the-symfony-application-flow\">The Symfony Application Flow <a class=\"heading-anchor-permalink\" href=\"#the-symfony-application-flow\">#</a></h2>\n<p>A Symfony framework application also uses a front-controller file. But inside, Symfony is responsible for handling each incoming request and figuring out what to do:</p>\n<img src=\"https://symfony.com/doc/current/introduction/http_fundamentals.html#step-2-the-server-returns-a-response\" />\n<ul>\n<li>Incoming requests are interpreted by the <a href=\"https://symfony.com/doc/current/routing.html\">Routing component</a> and passed to PHP functions that return Response objects.</li>\n</ul>\n<h2 id=\"summary%3A-the-request-response-flow\">Summary: The Request-Response Flow <a class=\"heading-anchor-permalink\" href=\"#summary%3A-the-request-response-flow\">#</a></h2>\n<p>Here’s what we’ve learned so far:</p>\n<ul>\n<li>A client (e.g. a browser) sends an HTTP request;</li>\n<li>Each request executes the same, single file (called a “front controller”);</li>\n<li>The front controller boots Symfony and passes the request information;</li>\n<li>Internally, Symfony uses routes and controllers to create the Response for the page (we’ll learn about these soon!);</li>\n<li>Symfony turns your Response object into the text headers and content (i.e. the HTTP response), which are sent back to the client.</li>\n</ul>\n",
      "id": 53
    },
    {
      "path": "Symfony/symfony_basics.md",
      "url": "Symfony/symfony_basics.html",
      "content": "# Symfony\n\n## Installation:\n\n`wget https://get.symfony.com/cli/installer -O - | bash`\nOr:\n`curl -sS https://get.symfony.com/cli/installer | bash`\nThen:\nUse it as a local file:\n  `/home/faris/.symfony5/bin/symfony`\n\nOr add the following line to your shell configuration file:\n  `export PATH=\"$HOME/.symfony5/bin:$PATH\"`\n\nOr install it globally on your system:\n  `mv /home/faris/.symfony5/bin/symfony /usr/local/bin/symfony`\n\nThen start a new shell and run 'symfony'\n---\nTo check if your computer meets all requirements. Open your console terminal and run this command:\n`$ symfony check:requirements`\n\n> Before going on, take a basic information about Symfony and HTTP fundamentals (symfony_and_http_fundamentals.md)\n\n## Creating Symfony Applications\n\n-  run any of these commands to create a new Symfony application:\n```bash\n# run this if you building a traditional web application\n$ symfony new my_project_directory --version=\"6.3.*\" --webapp\n```\n\n- If you're not using the Symfony binary, run these commands to create the new Symfony application using Composer:\n```bash\n$ composer create-project symfony/skeleton:\"6.3.*\" my_project_directory\n$ cd my_project_directory\n$ composer require webapp\n```\n\n## Setting up an Existing Symfony Project\n\n```bash\n# Clone the project\n$ cd projects/\n$ git clone ...\n# make Composer install the dependencies into vender/\n$ cd my-project/\n$ composer install\n# It may be useful to run this command which displays information about the project: \n$ php bin/console about\n\n```\n## Packages in Symfony\n\n- In symfony, **packages** called **bundles**\n- Packages usually require some setup before using them (editing some file to enable the bundle, creating some file to add some initial config,etc).\n- Symfony Flex is a Composer plugin that is installed by default when creating a new Symfony application and which automates the most common tasks of Symfony applications.\n- Symfony Flex uses Composer commands (require,update,remove) but provide advanced features.\n- Lots of Symfony packages/bundles define \"recipes\", which are a set of automated instructions to install and enable packages into Symfony applications.\n- Symfony **packs** are Composer metapackages that include packages or/and bundles.\n- A good security practice is to execute this command regularly to be able to update or replace compromised dependencies as soon as possible:\n`$ symfony check:security`\n- By default, the command that creates new Symfony applications uses the latest stable version. If you want to use an LTS version (published every 2 years), add the --version option:\n```shell\nsymfony new my_project_directory --version=lts # recent LTS version\nsymfony new my_project_directory --version=next # use the next symfony version to be released(still in dev)\nsymfony new my_project_directory --version=\"5.4.*\" # select an exact specific Symfony version\n```\n\n## Symfony local web server:\n- It's a part of the symfony binary\n- The Symfony server is started once per project, so you may end up with several instances (each of them listening to a different port). This is the common workflow to serve a Symfony project:\n```bash\n$ cd my-project/\n# start the server in the background\n$ symfony server:start -d\n\n# continue working and running other commands\n\n# show the latest log messages\n$ symfony server:log\n```\n\n## Setting up the Local Proxy\n- Local domains are possible thanks to a local proxy provided by the Symfony server. To configure:\n 1. Open the proxy settings of your operating system and set the following URL as the value of the Automatic Proxy Configuration: http://127.0.0.1:7080/proxy.pac.\n 2. Now run this command to start the proxy:\n  `$ symfony proxy:start`\n\n## Defining the Local Domain\n\nBy default, Symfony proposes .wip (for Work in Progress) for the local domains. You can define a local domain for your project as follows:\n```bash\n$ cd my-project/\n$ symfony proxy:domain:attach my-domain\n```\nNow, you can now browse https://my-domain.wip to access your local project with the new custom domain. Browse the http://127.0.0.1:7080 URL to get the full list of local project directories, their custom domains, and port numbers.\n---\n\n## Create your First Page in Symfony\n\n> Do you prefer video tutorials? [Check out the Harmonious Development](https://symfonycasts.com/screencast/symfony/setup) with Symfony screencast series.\n\nCreating a new page - whether it's an HTML page or a JSON endpoint - is a two steps:\n- Create a controller and a method: This is a function where you build the page and ultimately return a Response object. You'll learn more about controllers in their own section, including how to return JSON responses;\n- Create a route: In config/routes.yaml, the route defines the URL to your page (path) and what controller to call. You'll learn more about routing in its own section, including how to make variable URLs.\n\n#### Example: Create a (http://localhost:8000/lucky/number) page:\n\n```php\n<?php\n// src/Controller/LuckyController.php\n\nnamespace App\\Controller;\n// use it to create a Symfony Response object\nuse Symfony\\Component\\HttpFoundation\\Response;\n// use it to create a create a route (public url /lucky/number)\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n\nclass LuckyController{\n // associate this controller function with a public url\n #[Route('/lucky/number')] // note 1\n public function number(): Response{\n  $number = random_int(0,100);\n\n  return new Response(\n   '<html><body><h1>Lucky number: '. $number . '</h1></body></html>'\n  );\n }\n\n/* Note 1\n- php attributes is a metadata for code\n- no ';' at the end\n*/\n/* Note: try it out bu goiong to => http://localhost:8000/lucky/number\n*/\n}\n```\n## The bin/console Command\n- A debugging tool inside: the bin/console command. Try this to see a list of commands that can give you debugging info,help generate code, generate database migrations and a lot more. Remeber: as you install more packages, you'll see more commands.\n`$ php bin/console`\n- To get a list of all of the routes in your system, use the debug:router command:\n`$ php bin/console debug:router`\n\n## Rendering a template:\nIf you're returning HTML from your controller, you'll probably want to render a template. Fortunately, Symfony comes with `Twig`: a templating language that's minimal, powerful and actually quite fun.\n\nInstall the `twig` package with:\n`$ composer require twig`\n\n1. add code to import `AbstractController`:\n\n```php\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n```\n\n2. Make sure the controller class (LuckyController) extends `AbstractController` class.\n3. Use the handy `render()` method to render a template. Pass it a number variable so you can use it in `Twig`:\n```php\nclass LuckyController extends AbstractController{\n #[Route('/lucky/number')]\n    public function number(): Response\n    {\n        $number = random_int(0, 100);\n        return $this->render('lucky/number.html.twig', [\n            'number' => $number,\n        ]);\n    }\n}\n```\n4. create templates/luck directory with a new number.html.twig file inside:\n```twig\n{# templates/lucky/number.html.twig #}\n<h1>Your lucky number is {{ number }}</h1>\n```\n\n#### The Symfony Demo Application\n\n- fully-functional app\n- great learing tool for newcomers and its code contains tons of comments and helpful notes.\n- Run this command to create a new project based on the Symfony Demo application:\n`$ symfony new --demo my_project`\nIf dosn't work, update symfony\n`$ symfony self-update`\n- If you use `composer`:\n\n```bash\n# you can create a new project based on the Symfony Demo project...\n$ composer create-project symfony/symfony-demo my_project\n\n# ...or you can clone the code repository and install its dependencies\n$ git clone https://github.com/symfony/demo.git my_project\n$ cd my_project/\n$ composer install\n```\n- Use the built-in web server to run it:\n`$ cd my_project`\n`$ php app/console server:run`\n\n\n\n- Read the Symfon Official Book at: (https://symfony.com/doc/6.2/the-fast-track/en/2-project.html)\n",
      "html": "<h1 id=\"symfony\">Symfony <a class=\"heading-anchor-permalink\" href=\"#symfony\">#</a></h1>\n<h2 id=\"installation%3A\">Installation: <a class=\"heading-anchor-permalink\" href=\"#installation%3A\">#</a></h2>\n<p><code>wget https://get.symfony.com/cli/installer -O - | bash</code>\nOr:\n<code>curl -sS https://get.symfony.com/cli/installer | bash</code>\nThen:\nUse it as a local file:\n<code>/home/faris/.symfony5/bin/symfony</code></p>\n<p>Or add the following line to your shell configuration file:\n<code>export PATH=&quot;$HOME/.symfony5/bin:$PATH&quot;</code></p>\n<p>Or install it globally on your system:\n<code>mv /home/faris/.symfony5/bin/symfony /usr/local/bin/symfony</code></p>\n<h2 id=\"then-start-a-new-shell-and-run-%E2%80%98symfony%E2%80%99\">Then start a new shell and run ‘symfony’ <a class=\"heading-anchor-permalink\" href=\"#then-start-a-new-shell-and-run-%E2%80%98symfony%E2%80%99\">#</a></h2>\n<p>To check if your computer meets all requirements. Open your console terminal and run this command:\n<code>$ symfony check:requirements</code></p>\n<blockquote>\n<p>Before going on, take a basic information about Symfony and HTTP fundamentals (symfony_and_http_fundamentals.md)</p>\n</blockquote>\n<h2 id=\"creating-symfony-applications\">Creating Symfony Applications <a class=\"heading-anchor-permalink\" href=\"#creating-symfony-applications\">#</a></h2>\n<ul>\n<li>run any of these commands to create a new Symfony application:</li>\n</ul>\n<pre><code class=\"language-bash\"># run this if you building a traditional web application\n$ symfony new my_project_directory --version=&quot;6.3.*&quot; --webapp\n</code></pre>\n<ul>\n<li>If you’re not using the Symfony binary, run these commands to create the new Symfony application using Composer:</li>\n</ul>\n<pre><code class=\"language-bash\">$ composer create-project symfony/skeleton:&quot;6.3.*&quot; my_project_directory\n$ cd my_project_directory\n$ composer require webapp\n</code></pre>\n<h2 id=\"setting-up-an-existing-symfony-project\">Setting up an Existing Symfony Project <a class=\"heading-anchor-permalink\" href=\"#setting-up-an-existing-symfony-project\">#</a></h2>\n<pre><code class=\"language-bash\"># Clone the project\n$ cd projects/\n$ git clone ...\n# make Composer install the dependencies into vender/\n$ cd my-project/\n$ composer install\n# It may be useful to run this command which displays information about the project: \n$ php bin/console about\n\n</code></pre>\n<h2 id=\"packages-in-symfony\">Packages in Symfony <a class=\"heading-anchor-permalink\" href=\"#packages-in-symfony\">#</a></h2>\n<ul>\n<li>In symfony, <strong>packages</strong> called <strong>bundles</strong></li>\n<li>Packages usually require some setup before using them (editing some file to enable the bundle, creating some file to add some initial config,etc).</li>\n<li>Symfony Flex is a Composer plugin that is installed by default when creating a new Symfony application and which automates the most common tasks of Symfony applications.</li>\n<li>Symfony Flex uses Composer commands (require,update,remove) but provide advanced features.</li>\n<li>Lots of Symfony packages/bundles define “recipes”, which are a set of automated instructions to install and enable packages into Symfony applications.</li>\n<li>Symfony <strong>packs</strong> are Composer metapackages that include packages or/and bundles.</li>\n<li>A good security practice is to execute this command regularly to be able to update or replace compromised dependencies as soon as possible:\n<code>$ symfony check:security</code></li>\n<li>By default, the command that creates new Symfony applications uses the latest stable version. If you want to use an LTS version (published every 2 years), add the --version option:</li>\n</ul>\n<pre><code class=\"language-shell\">symfony new my_project_directory --version=lts # recent LTS version\nsymfony new my_project_directory --version=next # use the next symfony version to be released(still in dev)\nsymfony new my_project_directory --version=&quot;5.4.*&quot; # select an exact specific Symfony version\n</code></pre>\n<h2 id=\"symfony-local-web-server%3A\">Symfony local web server: <a class=\"heading-anchor-permalink\" href=\"#symfony-local-web-server%3A\">#</a></h2>\n<ul>\n<li>It’s a part of the symfony binary</li>\n<li>The Symfony server is started once per project, so you may end up with several instances (each of them listening to a different port). This is the common workflow to serve a Symfony project:</li>\n</ul>\n<pre><code class=\"language-bash\">$ cd my-project/\n# start the server in the background\n$ symfony server:start -d\n\n# continue working and running other commands\n\n# show the latest log messages\n$ symfony server:log\n</code></pre>\n<h2 id=\"setting-up-the-local-proxy\">Setting up the Local Proxy <a class=\"heading-anchor-permalink\" href=\"#setting-up-the-local-proxy\">#</a></h2>\n<ul>\n<li>Local domains are possible thanks to a local proxy provided by the Symfony server. To configure:</li>\n</ul>\n<ol>\n<li>Open the proxy settings of your operating system and set the following URL as the value of the Automatic Proxy Configuration: <a href=\"http://127.0.0.1:7080/proxy.pac\">http://127.0.0.1:7080/proxy.pac</a>.</li>\n<li>Now run this command to start the proxy:\n<code>$ symfony proxy:start</code></li>\n</ol>\n<h2 id=\"defining-the-local-domain\">Defining the Local Domain <a class=\"heading-anchor-permalink\" href=\"#defining-the-local-domain\">#</a></h2>\n<p>By default, Symfony proposes .wip (for Work in Progress) for the local domains. You can define a local domain for your project as follows:</p>\n<pre><code class=\"language-bash\">$ cd my-project/\n$ symfony proxy:domain:attach my-domain\n</code></pre>\n<h2 id=\"now%2C-you-can-now-browse-https%3A%2F%2Fmy-domain.wip-to-access-your-local-project-with-the-new-custom-domain.-browse-the-http%3A%2F%2F127.0.0.1%3A7080-url-to-get-the-full-list-of-local-project-directories%2C-their-custom-domains%2C-and-port-numbers.\">Now, you can now browse <a href=\"https://my-domain.wip\">https://my-domain.wip</a> to access your local project with the new custom domain. Browse the <a href=\"http://127.0.0.1:7080\">http://127.0.0.1:7080</a> URL to get the full list of local project directories, their custom domains, and port numbers. <a class=\"heading-anchor-permalink\" href=\"#now%2C-you-can-now-browse-https%3A%2F%2Fmy-domain.wip-to-access-your-local-project-with-the-new-custom-domain.-browse-the-http%3A%2F%2F127.0.0.1%3A7080-url-to-get-the-full-list-of-local-project-directories%2C-their-custom-domains%2C-and-port-numbers.\">#</a></h2>\n<h2 id=\"create-your-first-page-in-symfony\">Create your First Page in Symfony <a class=\"heading-anchor-permalink\" href=\"#create-your-first-page-in-symfony\">#</a></h2>\n<blockquote>\n<p>Do you prefer video tutorials? <a href=\"https://symfonycasts.com/screencast/symfony/setup\">Check out the Harmonious Development</a> with Symfony screencast series.</p>\n</blockquote>\n<p>Creating a new page - whether it’s an HTML page or a JSON endpoint - is a two steps:</p>\n<ul>\n<li>Create a controller and a method: This is a function where you build the page and ultimately return a Response object. You’ll learn more about controllers in their own section, including how to return JSON responses;</li>\n<li>Create a route: In config/routes.yaml, the route defines the URL to your page (path) and what controller to call. You’ll learn more about routing in its own section, including how to make variable URLs.</li>\n</ul>\n<h4 id=\"example%3A-create-a-(http%3A%2F%2Flocalhost%3A8000%2Flucky%2Fnumber)-page%3A\">Example: Create a (<a href=\"http://localhost:8000/lucky/number\">http://localhost:8000/lucky/number</a>) page: <a class=\"heading-anchor-permalink\" href=\"#example%3A-create-a-(http%3A%2F%2Flocalhost%3A8000%2Flucky%2Fnumber)-page%3A\">#</a></h4>\n<pre><code class=\"language-php\">&lt;?php\n// src/Controller/LuckyController.php\n\nnamespace App\\Controller;\n// use it to create a Symfony Response object\nuse Symfony\\Component\\HttpFoundation\\Response;\n// use it to create a create a route (public url /lucky/number)\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n\nclass LuckyController{\n // associate this controller function with a public url\n #[Route('/lucky/number')] // note 1\n public function number(): Response{\n  $number = random_int(0,100);\n\n  return new Response(\n   '&lt;html&gt;&lt;body&gt;&lt;h1&gt;Lucky number: '. $number . '&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'\n  );\n }\n\n/* Note 1\n- php attributes is a metadata for code\n- no ';' at the end\n*/\n/* Note: try it out bu goiong to =&gt; http://localhost:8000/lucky/number\n*/\n}\n</code></pre>\n<h2 id=\"the-bin%2Fconsole-command\">The bin/console Command <a class=\"heading-anchor-permalink\" href=\"#the-bin%2Fconsole-command\">#</a></h2>\n<ul>\n<li>A debugging tool inside: the bin/console command. Try this to see a list of commands that can give you debugging info,help generate code, generate database migrations and a lot more. Remeber: as you install more packages, you’ll see more commands.\n<code>$ php bin/console</code></li>\n<li>To get a list of all of the routes in your system, use the debug:router command:\n<code>$ php bin/console debug:router</code></li>\n</ul>\n<h2 id=\"rendering-a-template%3A\">Rendering a template: <a class=\"heading-anchor-permalink\" href=\"#rendering-a-template%3A\">#</a></h2>\n<p>If you’re returning HTML from your controller, you’ll probably want to render a template. Fortunately, Symfony comes with <code>Twig</code>: a templating language that’s minimal, powerful and actually quite fun.</p>\n<p>Install the <code>twig</code> package with:\n<code>$ composer require twig</code></p>\n<ol>\n<li>add code to import <code>AbstractController</code>:</li>\n</ol>\n<pre><code class=\"language-php\">use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n</code></pre>\n<ol start=\"2\">\n<li>Make sure the controller class (LuckyController) extends <code>AbstractController</code> class.</li>\n<li>Use the handy <code>render()</code> method to render a template. Pass it a number variable so you can use it in <code>Twig</code>:</li>\n</ol>\n<pre><code class=\"language-php\">class LuckyController extends AbstractController{\n #[Route('/lucky/number')]\n    public function number(): Response\n    {\n        $number = random_int(0, 100);\n        return $this-&gt;render('lucky/number.html.twig', [\n            'number' =&gt; $number,\n        ]);\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>create templates/luck directory with a new number.html.twig file inside:</li>\n</ol>\n<pre><code class=\"language-twig\">{# templates/lucky/number.html.twig #}\n&lt;h1&gt;Your lucky number is {{ number }}&lt;/h1&gt;\n</code></pre>\n<h4 id=\"the-symfony-demo-application\">The Symfony Demo Application <a class=\"heading-anchor-permalink\" href=\"#the-symfony-demo-application\">#</a></h4>\n<ul>\n<li>fully-functional app</li>\n<li>great learing tool for newcomers and its code contains tons of comments and helpful notes.</li>\n<li>Run this command to create a new project based on the Symfony Demo application:\n<code>$ symfony new --demo my_project</code>\nIf dosn’t work, update symfony\n<code>$ symfony self-update</code></li>\n<li>If you use <code>composer</code>:</li>\n</ul>\n<pre><code class=\"language-bash\"># you can create a new project based on the Symfony Demo project...\n$ composer create-project symfony/symfony-demo my_project\n\n# ...or you can clone the code repository and install its dependencies\n$ git clone https://github.com/symfony/demo.git my_project\n$ cd my_project/\n$ composer install\n</code></pre>\n<ul>\n<li>\n<p>Use the built-in web server to run it:\n<code>$ cd my_project</code>\n<code>$ php app/console server:run</code></p>\n</li>\n<li>\n<p>Read the Symfon Official Book at: (<a href=\"https://symfony.com/doc/6.2/the-fast-track/en/2-project.html\">https://symfony.com/doc/6.2/the-fast-track/en/2-project.html</a>)</p>\n</li>\n</ul>\n",
      "id": 54
    },
    {
      "path": "Symfony/twig_basics.md",
      "url": "Symfony/twig_basics.html",
      "content": "<!-- Primary source: https://twig.symfony.com  -->\n\n## What makes Twig better than PHP as a template engine?\n\n- Concise: The PHP language is verbose and becomes ridiculously verbose when it comes to output escaping:\n```php\n<?php echo $var ?>\n<?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?>\n```\nIn comparison, Twig has a very concise syntax, which make templates more readable:\n```twig\n{{ var }}\n{{ var|escape }}\n{{ var|e }}         {# shortcut to escape a variable #}\n```\n- Template oriented syntax Twig has shortcuts for common patterns, like having a default text displayed when you iterate over an empty array:\n\n```twig\n{% for user in users %}\n    * {{ user.name }}\n{% else %}\n    No users have been found.\n{% endfor %}\n```\n\n- Full Featured: Twig supports everything you need to build powerful templates with ease: multiple inheritance, blocks, automatic output-escaping, and much more:\n\n```twig\n{% extends \"layout.html\" %}\n\n{% block content %}\n    Content of the page...\n{% endblock %}\n```\n- Extensibility: Twig is flexible enough for all your needs, even the most complex ones. Thanks to an open architecture, you can implement your own language constructs (tags, filters, functions, and even operators) to create your very own DSL.\n\n- Secure: When it comes to security, Twig has some unique features:\n\nAutomatic output escaping: To be on the safe side, you can enable automatic output escaping globally or for a block of code:\n\n```twig\n{% autoescape \"html\" %}\n    {{ var }}\n    {{ var|raw }}     {# var won't be escaped #}\n    {{ var|escape }}  {# var won't be doubled-escaped #}\n{% endautoescape %}\n```\n---\n\n## Twig Templating Language\n\nTwig syntax is based on these three constructs:\n\n- {{ ... }}, used to display the content of a variable or the result of evaluating an expression;\n- {% ... %}, used to run some logic, such as a conditional or a loop;\n- {# ... #}, used to add comments to the template (unlike HTML comments, these comments are not included in the rendered page).\n\n---\n\n- You can't run PHP code inside Twig templates.\n- Twig provides utilities to run some logic in the templates. For example, filters modify content before being rendered\n\n- Twig has several configuration options to define things like the format used to display numbers and dates, the template caching, etc. Read the [Twig configuration reference](https://symfony.com/doc/current/reference/configuration/twig.html) to learn about them.\n\n## Creating Templates\n\n- First, you need to create a new file in the templates/ directory to store the template contents:\n```twig\n{# templates/user/notifications.html.twig #}\n<h1>Hello {{ user_first_name }}!</h1>\n<p>You have {{ notifications|length }} new notifications.</p>\n```\n\n- Then, create a controller that renders this template and passes to it the needed variables:\n\n```php\n// src/Controller/UserController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass UserController extends AbstractController\n{\n    // ...\n\n    public function notifications(): Response\n    {\n        // get the user information and notifications somehow\n        $userFirstName = '...';\n        $userNotifications = ['...', '...'];\n\n        // the template path is the relative file path from `templates/`\n        return $this->render('user/notifications.html.twig', [\n            // this array defines the variables passed to the template,\n            // where the key is the variable name and the value is the variable value\n            // (Twig recommends using snake_case variable names: 'foo_bar' instead of 'fooBar')\n            'user_first_name' => $userFirstName,\n            'notifications' => $userNotifications,\n        ]);\n    }\n}\n```\n\n- Symfony recommends the following for template names:\n    - Use snake case for filenames and directories (e.g. blog_posts.html.twig, admin/default_theme/blog/index.html.twig, etc.);\n    - Define two extensions for filenames (e.g. index.html.twig or blog_posts.xml.twig)\n\n## Template Variables\n\nConsider the following template:\n\n```twig\n<p>{{ user.name }} added this comment on {{ comment.publishedAt|date }}</p>\n```\n\nThe `user.name` notation means that you want to display some information (name) stored in a variable (user). Is user an array or an object? Is name a property or a method? In Twig this doesn't matter.\n\nWhen using the `foo.bar` notation, Twig tries to get the value of the variable in the following order:\n\n$foo['bar'] (array and element);\n$foo->bar (object and public property);\n$foo->bar() (object and public method);\n$foo->getBar() (object and getter method);\n$foo->isBar() (object and isser method);\n$foo->hasBar() (object and hasser method);\n\nIf none of the above exists, use null (or throw a Twig\\Error\\RuntimeError exception if the strict_variables option is enabled).\n\n## Linking to Pages\n\nInstead of writing the link URLs by hand, use the path() function to generate URLs based on the routing configuration.\n\nLater, if you want to modify the URL of a particular page, all you'll need to do is change the routing configuration: the templates will automatically generate the new URL.\n\nConsider the following routing configuration:\n\n```yaml\n# config/routes.yaml\nblog_index:\n    path:       /\n    controller: App\\Controller\\BlogController::index\n\nblog_post:\n    path:       /article/{slug}\n    controller: App\\Controller\\BlogController::show\n```\n\nUse the path() Twig function to link to these pages and pass the route name as the first argument and the route parameters as the optional second argument:\n\n```twig\n<a href=\"{{ path('blog_index') }}\">Homepage</a>\n\n{# ... #}\n\n{% for post in blog_posts %}\n    <h1>\n        <a href=\"{{ path('blog_post', {slug: post.slug}) }}\">{{ post.title }}</a>\n    </h1>\n\n    <p>{{ post.excerpt }}</p>\n{% endfor %}\n```\nThe path() function generates relative URLs. If you need to generate absolute URLs, use the `url()` function with the same syntax `<a href=\"{{ url('blog_index') }}\"> ... </a>`\n\n## Linking to CSS, JavaScript and Image Assets\n\n\n\n",
      "html": "<!-- Primary source: https://twig.symfony.com  -->\n<h2 id=\"what-makes-twig-better-than-php-as-a-template-engine%3F\">What makes Twig better than PHP as a template engine? <a class=\"heading-anchor-permalink\" href=\"#what-makes-twig-better-than-php-as-a-template-engine%3F\">#</a></h2>\n<ul>\n<li>Concise: The PHP language is verbose and becomes ridiculously verbose when it comes to output escaping:</li>\n</ul>\n<pre><code class=\"language-php\">&lt;?php echo $var ?&gt;\n&lt;?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?&gt;\n</code></pre>\n<p>In comparison, Twig has a very concise syntax, which make templates more readable:</p>\n<pre><code class=\"language-twig\">{{ var }}\n{{ var|escape }}\n{{ var|e }}         {# shortcut to escape a variable #}\n</code></pre>\n<ul>\n<li>Template oriented syntax Twig has shortcuts for common patterns, like having a default text displayed when you iterate over an empty array:</li>\n</ul>\n<pre><code class=\"language-twig\">{% for user in users %}\n    * {{ user.name }}\n{% else %}\n    No users have been found.\n{% endfor %}\n</code></pre>\n<ul>\n<li>Full Featured: Twig supports everything you need to build powerful templates with ease: multiple inheritance, blocks, automatic output-escaping, and much more:</li>\n</ul>\n<pre><code class=\"language-twig\">{% extends &quot;layout.html&quot; %}\n\n{% block content %}\n    Content of the page...\n{% endblock %}\n</code></pre>\n<ul>\n<li>\n<p>Extensibility: Twig is flexible enough for all your needs, even the most complex ones. Thanks to an open architecture, you can implement your own language constructs (tags, filters, functions, and even operators) to create your very own DSL.</p>\n</li>\n<li>\n<p>Secure: When it comes to security, Twig has some unique features:</p>\n</li>\n</ul>\n<p>Automatic output escaping: To be on the safe side, you can enable automatic output escaping globally or for a block of code:</p>\n<pre><code class=\"language-twig\">{% autoescape &quot;html&quot; %}\n    {{ var }}\n    {{ var|raw }}     {# var won't be escaped #}\n    {{ var|escape }}  {# var won't be doubled-escaped #}\n{% endautoescape %}\n</code></pre>\n<hr>\n<h2 id=\"twig-templating-language\">Twig Templating Language <a class=\"heading-anchor-permalink\" href=\"#twig-templating-language\">#</a></h2>\n<p>Twig syntax is based on these three constructs:</p>\n<ul>\n<li>{{ … }}, used to display the content of a variable or the result of evaluating an expression;</li>\n<li>{% … %}, used to run some logic, such as a conditional or a loop;</li>\n<li>{# … #}, used to add comments to the template (unlike HTML comments, these comments are not included in the rendered page).</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>You can’t run PHP code inside Twig templates.</p>\n</li>\n<li>\n<p>Twig provides utilities to run some logic in the templates. For example, filters modify content before being rendered</p>\n</li>\n<li>\n<p>Twig has several configuration options to define things like the format used to display numbers and dates, the template caching, etc. Read the <a href=\"https://symfony.com/doc/current/reference/configuration/twig.html\">Twig configuration reference</a> to learn about them.</p>\n</li>\n</ul>\n<h2 id=\"creating-templates\">Creating Templates <a class=\"heading-anchor-permalink\" href=\"#creating-templates\">#</a></h2>\n<ul>\n<li>First, you need to create a new file in the templates/ directory to store the template contents:</li>\n</ul>\n<pre><code class=\"language-twig\">{# templates/user/notifications.html.twig #}\n&lt;h1&gt;Hello {{ user_first_name }}!&lt;/h1&gt;\n&lt;p&gt;You have {{ notifications|length }} new notifications.&lt;/p&gt;\n</code></pre>\n<ul>\n<li>Then, create a controller that renders this template and passes to it the needed variables:</li>\n</ul>\n<pre><code class=\"language-php\">// src/Controller/UserController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass UserController extends AbstractController\n{\n    // ...\n\n    public function notifications(): Response\n    {\n        // get the user information and notifications somehow\n        $userFirstName = '...';\n        $userNotifications = ['...', '...'];\n\n        // the template path is the relative file path from `templates/`\n        return $this-&gt;render('user/notifications.html.twig', [\n            // this array defines the variables passed to the template,\n            // where the key is the variable name and the value is the variable value\n            // (Twig recommends using snake_case variable names: 'foo_bar' instead of 'fooBar')\n            'user_first_name' =&gt; $userFirstName,\n            'notifications' =&gt; $userNotifications,\n        ]);\n    }\n}\n</code></pre>\n<ul>\n<li>Symfony recommends the following for template names:\n<ul>\n<li>Use snake case for filenames and directories (e.g. blog_posts.html.twig, admin/default_theme/blog/index.html.twig, etc.);</li>\n<li>Define two extensions for filenames (e.g. index.html.twig or blog_posts.xml.twig)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"template-variables\">Template Variables <a class=\"heading-anchor-permalink\" href=\"#template-variables\">#</a></h2>\n<p>Consider the following template:</p>\n<pre><code class=\"language-twig\">&lt;p&gt;{{ user.name }} added this comment on {{ comment.publishedAt|date }}&lt;/p&gt;\n</code></pre>\n<p>The <code>user.name</code> notation means that you want to display some information (name) stored in a variable (user). Is user an array or an object? Is name a property or a method? In Twig this doesn’t matter.</p>\n<p>When using the <code>foo.bar</code> notation, Twig tries to get the value of the variable in the following order:</p>\n<p>$foo[‘bar’] (array and element);\n$foo-&gt;bar (object and public property);\n$foo-&gt;bar() (object and public method);\n$foo-&gt;getBar() (object and getter method);\n$foo-&gt;isBar() (object and isser method);\n$foo-&gt;hasBar() (object and hasser method);</p>\n<p>If none of the above exists, use null (or throw a Twig\\Error\\RuntimeError exception if the strict_variables option is enabled).</p>\n<h2 id=\"linking-to-pages\">Linking to Pages <a class=\"heading-anchor-permalink\" href=\"#linking-to-pages\">#</a></h2>\n<p>Instead of writing the link URLs by hand, use the path() function to generate URLs based on the routing configuration.</p>\n<p>Later, if you want to modify the URL of a particular page, all you’ll need to do is change the routing configuration: the templates will automatically generate the new URL.</p>\n<p>Consider the following routing configuration:</p>\n<pre><code class=\"language-yaml\"># config/routes.yaml\nblog_index:\n    path:       /\n    controller: App\\Controller\\BlogController::index\n\nblog_post:\n    path:       /article/{slug}\n    controller: App\\Controller\\BlogController::show\n</code></pre>\n<p>Use the path() Twig function to link to these pages and pass the route name as the first argument and the route parameters as the optional second argument:</p>\n<pre><code class=\"language-twig\">&lt;a href=&quot;{{ path('blog_index') }}&quot;&gt;Homepage&lt;/a&gt;\n\n{# ... #}\n\n{% for post in blog_posts %}\n    &lt;h1&gt;\n        &lt;a href=&quot;{{ path('blog_post', {slug: post.slug}) }}&quot;&gt;{{ post.title }}&lt;/a&gt;\n    &lt;/h1&gt;\n\n    &lt;p&gt;{{ post.excerpt }}&lt;/p&gt;\n{% endfor %}\n</code></pre>\n<p>The path() function generates relative URLs. If you need to generate absolute URLs, use the <code>url()</code> function with the same syntax <code>&lt;a href=&quot;{{ url('blog_index') }}&quot;&gt; ... &lt;/a&gt;</code></p>\n<h2 id=\"linking-to-css%2C-javascript-and-image-assets\">Linking to CSS, JavaScript and Image Assets <a class=\"heading-anchor-permalink\" href=\"#linking-to-css%2C-javascript-and-image-assets\">#</a></h2>\n",
      "id": 55
    },
    {
      "path": "Symfony/twig_cheatsheet.md",
      "url": "Symfony/twig_cheatsheet.html",
      "content": "# TWIG CHEAT SHEET\n\n<!-- TOC -->\n\n*   [TWIG CHEAT SHEET](#twig-cheat-sheet)\n    *   [Web Synopsis](#web-synopsis)\n    *   [Attributes](#attributes)\n    *   [Setting Variables](#setting-variables)\n    *   [Filters](#filters)\n    *   [Functions](#functions)\n    *   [Named Arguments](#named-arguments)\n    *   [Control Flow Structure](#control-flow-structure)\n    *   [Comments](#comments)\n    *   [Include](#include)\n    *   [Extends](#extends)\n    *   [Template Inheritance](#template-inheritance)\n    *   [Manual Escaping](#manual-escaping)\n    *   [Macros (add in if you think it is relevant)](#macros-add-in-if-you-think-it-is-relevant)\n\n<!-- /TOC -->\n\n// source: (https://raw.githubusercontent.com/okeeffed/cheat-sheets/master/twig-cheat-sheet.md)\n\nEnsure you have a highlighter tool.\n\n## Web Synopsis\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Webpage</title>\n    </head>\n    <body>\n        <ul id=\"navigation\">\n        {% for item in navigation %}\n            <li><a href=\"{{ item.href }}\">{{ item.caption }}</a></li>\n        {% endfor %}\n        </ul>\n\n        <h1>My Webpage</h1>\n        {{ a_variable }}\n    </body>\n</html>\n```\n\n## Attributes\n\nThe application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it.\n\nYou can use a dot (.) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array), or the so-called \"subscript\" syntax ([]):\n\n```\n{{ foo.bar }}\n{{ foo['bar'] }}\n```\n\nWhen the attribute contains special characters (like - that would be interpreted as the minus operator), use the attribute function instead to access the variable attribute:\n\n```\n{# equivalent to the non-working foo.data-foo #}\n{{ attribute(foo, 'data-foo') }}\n```\n\n## Setting Variables\n\n```\n{% set foo = 'foo' %}\n{% set foo = [1, 2] %}\n{% set foo = {'foo': 'bar'} %}\n```\n\n## Filters\n\nVariables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.\n\nThe following example removes all HTML tags from the name and title-cases it:\n\n```\n{{ name|striptags|title }}\n```\n\nFilters that accept arguments have parentheses around the arguments. This example will join a list by commas:\n\n```\n{{ list|join(', ') }}\n```\n\nTo apply a filter on a section of code, wrap it in the filter tag:\n\n```\n{% filter upper %}\n    This text becomes uppercase\n{% endfilter %}\n```\n\nGo to the filters page to learn more about built-in filters.\n\nhttp://twig.sensiolabs.org/doc/filters/index.html\n\n## Functions\n\nFunctions can be called to generate content. Functions are called by their name followed by parentheses (()) and may have arguments.\n\nFor instance, the range function returns a list containing an arithmetic progression of integers:\n\n```\n{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n```\n\nhttp://twig.sensiolabs.org/doc/functions/index.html\n\n## Named Arguments\n\nNew in version 1.12: Support for named arguments was added in Twig 1.12.\n\n```\n{% for i in range(low=1, high=10, step=2) %}\n    {{ i }},\n{% endfor %}\n```\n\nUsing named arguments makes your templates more explicit about the meaning of the values you pass as arguments:\n\n```\n{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n\n{# versus #}\n\n{{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}\n```\n\nNamed arguments also allow you to skip some arguments for which you don't want to change the default value:\n\n```\n{# the first argument is the date format, which defaults to the global date format if null is passed #}\n{{ \"now\"|date(null, \"Europe/Paris\") }}\n\n{# or skip the format value by using a named argument for the time zone #}\n{{ \"now\"|date(timezone=\"Europe/Paris\") }}\n```\n\nYou can also use both positional and named arguments in one call, in which case positional arguments must always come before named arguments:\n\n```\n{{ \"now\"|date('d/m/Y H:i', timezone=\"Europe/Paris\") }}\n```\n\n## Control Flow Structure\n\nA control structure refers to all those things that control the flow of a program - conditionals (i.e. if/elseif/else), for-loops, as well as things like blocks. Control structures appear inside {% ... %} blocks.\n\nFor example, to display a list of users provided in a variable called users, use the for tag:\n\n```html\n<h1>Members</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username|e }}</li>\n    {% endfor %}\n</ul>\n\nThe if tag can be used to test an expression:\n\n{% if users|length > 0 %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username|e }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\nhttp://twig.sensiolabs.org/doc/tags/index.html\n\n## Comments\n\nTo comment-out part of a line in a template, use the comment syntax {# ... #}. This is useful for debugging or to add information for other template designers or yourself:\n\n```\n{# note: disabled template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n```\n\n## Include\n\nIncludes a partial file\n\n```\n{% include 'partials/head.twig' %}\n\n{% for box in boxes %}\n    {{ include('render_box.html') }}\n{% endfor %}\n```\n\n## Extends\n\nUse extends to include the layout and then use the block headers to import the required content.\n\n```\n{% extends \"master.twig\" %}\n\n{% block header %}\n  {% include 'partials/header.twig' with {\n    'title': artist.title\n  } %}\n{% endblock %}\n```\n\n## Template Inheritance\n\nThe most powerful part of Twig is template inheritance. Template inheritance allows you to build a base \"skeleton\" template that contains all the common elements of your site and defines blocks that child templates can override.\n\nSounds complicated but it is very basic. It's easier to understand it by starting with an example.\n\nLet's define a base template, base.html, which defines a simple HTML skeleton document that you might use for a simple two-column page:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <link rel=\"stylesheet\" href=\"style.css\" />\n            <title>{% block title %}{% endblock %} - My Webpage</title>\n        {% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">{% block content %}{% endblock %}</div>\n        <div id=\"footer\">\n            {% block footer %}\n                &copy; Copyright 2011 by <a href=\"http://domain.invalid/\">you</a>.\n            {% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nIn this example, the block tags define four blocks that child templates can fill in. All the block tag does is to tell the template engine that a child template may override those portions of the template.\n\nA child template might look like this:\n\n```html\n{% extends \"base.html\" %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    <style type=\"text/css\">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">\n        Welcome to my awesome homepage.\n    </p>\n{% endblock %}\n```\n\nThe extends tag is the key here. It tells the template engine that this template \"extends\" another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.\n\nNote that since the child template doesn't define the footer block, the value from the parent template is used instead.\n\nIt's possible to render the contents of the parent block by using the parent function. This gives back the results of the parent block:\n\n```html\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ parent() }}\n{% endblock %}\n```\n\n## Manual Escaping\n\nWorking with Manual Escaping\nIf manual escaping is enabled, it is your responsibility to escape variables if needed. What to escape? Any variable you don't trust.\n\nEscaping works by piping the variable through the escape or e filter:\n\n```\n{{ user.username|e }}\n```\n\nBy default, the escape filter uses the html strategy, but depending on the escaping context, you might want to explicitly use any other available strategies:\n\n```\n{{ user.username|e('js') }}\n{{ user.username|e('css') }}\n{{ user.username|e('url') }}\n{{ user.username|e('html_attr') }}\n```\n\nWorking with Automatic Escaping\n\nWhether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the autoescape tag:\n\n```\n{% autoescape %}\n    Everything will be automatically escaped in this block (using the HTML strategy)\n{% endautoescape %}\n\nBy default, auto-escaping uses the html escaping strategy. If you output variables in other contexts, you need to explicitly escape them with the appropriate escaping strategy:\n\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block (using the JS strategy)\n{% endautoescape %}\n```\n\n## Macros (add in if you think it is relevant)\n",
      "html": "<h1 id=\"twig-cheat-sheet\">TWIG CHEAT SHEET <a class=\"heading-anchor-permalink\" href=\"#twig-cheat-sheet\">#</a></h1>\n<!-- TOC -->\n<ul>\n<li><a href=\"#twig-cheat-sheet\">TWIG CHEAT SHEET</a>\n<ul>\n<li><a href=\"#web-synopsis\">Web Synopsis</a></li>\n<li><a href=\"#attributes\">Attributes</a></li>\n<li><a href=\"#setting-variables\">Setting Variables</a></li>\n<li><a href=\"#filters\">Filters</a></li>\n<li><a href=\"#functions\">Functions</a></li>\n<li><a href=\"#named-arguments\">Named Arguments</a></li>\n<li><a href=\"#control-flow-structure\">Control Flow Structure</a></li>\n<li><a href=\"#comments\">Comments</a></li>\n<li><a href=\"#include\">Include</a></li>\n<li><a href=\"#extends\">Extends</a></li>\n<li><a href=\"#template-inheritance\">Template Inheritance</a></li>\n<li><a href=\"#manual-escaping\">Manual Escaping</a></li>\n<li><a href=\"#macros-add-in-if-you-think-it-is-relevant\">Macros (add in if you think it is relevant)</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>// source: (<a href=\"https://raw.githubusercontent.com/okeeffed/cheat-sheets/master/twig-cheat-sheet.md\">https://raw.githubusercontent.com/okeeffed/cheat-sheets/master/twig-cheat-sheet.md</a>)</p>\n<p>Ensure you have a highlighter tool.</p>\n<h2 id=\"web-synopsis\">Web Synopsis <a class=\"heading-anchor-permalink\" href=\"#web-synopsis\">#</a></h2>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul id=&quot;navigation&quot;&gt;\n        {% for item in navigation %}\n            &lt;li&gt;&lt;a href=&quot;{{ item.href }}&quot;&gt;{{ item.caption }}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n        &lt;/ul&gt;\n\n        &lt;h1&gt;My Webpage&lt;/h1&gt;\n        {{ a_variable }}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"attributes\">Attributes <a class=\"heading-anchor-permalink\" href=\"#attributes\">#</a></h2>\n<p>The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it.</p>\n<p>You can use a dot (.) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array), or the so-called “subscript” syntax ([]):</p>\n<pre><code>{{ foo.bar }}\n{{ foo['bar'] }}\n</code></pre>\n<p>When the attribute contains special characters (like - that would be interpreted as the minus operator), use the attribute function instead to access the variable attribute:</p>\n<pre><code>{# equivalent to the non-working foo.data-foo #}\n{{ attribute(foo, 'data-foo') }}\n</code></pre>\n<h2 id=\"setting-variables\">Setting Variables <a class=\"heading-anchor-permalink\" href=\"#setting-variables\">#</a></h2>\n<pre><code>{% set foo = 'foo' %}\n{% set foo = [1, 2] %}\n{% set foo = {'foo': 'bar'} %}\n</code></pre>\n<h2 id=\"filters\">Filters <a class=\"heading-anchor-permalink\" href=\"#filters\">#</a></h2>\n<p>Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</p>\n<p>The following example removes all HTML tags from the name and title-cases it:</p>\n<pre><code>{{ name|striptags|title }}\n</code></pre>\n<p>Filters that accept arguments have parentheses around the arguments. This example will join a list by commas:</p>\n<pre><code>{{ list|join(', ') }}\n</code></pre>\n<p>To apply a filter on a section of code, wrap it in the filter tag:</p>\n<pre><code>{% filter upper %}\n    This text becomes uppercase\n{% endfilter %}\n</code></pre>\n<p>Go to the filters page to learn more about built-in filters.</p>\n<p><a href=\"http://twig.sensiolabs.org/doc/filters/index.html\">http://twig.sensiolabs.org/doc/filters/index.html</a></p>\n<h2 id=\"functions\">Functions <a class=\"heading-anchor-permalink\" href=\"#functions\">#</a></h2>\n<p>Functions can be called to generate content. Functions are called by their name followed by parentheses (()) and may have arguments.</p>\n<p>For instance, the range function returns a list containing an arithmetic progression of integers:</p>\n<pre><code>{% for i in range(0, 3) %}\n    {{ i }},\n{% endfor %}\n</code></pre>\n<p><a href=\"http://twig.sensiolabs.org/doc/functions/index.html\">http://twig.sensiolabs.org/doc/functions/index.html</a></p>\n<h2 id=\"named-arguments\">Named Arguments <a class=\"heading-anchor-permalink\" href=\"#named-arguments\">#</a></h2>\n<p>New in version 1.12: Support for named arguments was added in Twig 1.12.</p>\n<pre><code>{% for i in range(low=1, high=10, step=2) %}\n    {{ i }},\n{% endfor %}\n</code></pre>\n<p>Using named arguments makes your templates more explicit about the meaning of the values you pass as arguments:</p>\n<pre><code>{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}\n\n{# versus #}\n\n{{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}\n</code></pre>\n<p>Named arguments also allow you to skip some arguments for which you don’t want to change the default value:</p>\n<pre><code>{# the first argument is the date format, which defaults to the global date format if null is passed #}\n{{ &quot;now&quot;|date(null, &quot;Europe/Paris&quot;) }}\n\n{# or skip the format value by using a named argument for the time zone #}\n{{ &quot;now&quot;|date(timezone=&quot;Europe/Paris&quot;) }}\n</code></pre>\n<p>You can also use both positional and named arguments in one call, in which case positional arguments must always come before named arguments:</p>\n<pre><code>{{ &quot;now&quot;|date('d/m/Y H:i', timezone=&quot;Europe/Paris&quot;) }}\n</code></pre>\n<h2 id=\"control-flow-structure\">Control Flow Structure <a class=\"heading-anchor-permalink\" href=\"#control-flow-structure\">#</a></h2>\n<p>A control structure refers to all those things that control the flow of a program - conditionals (i.e. if/elseif/else), for-loops, as well as things like blocks. Control structures appear inside {% … %} blocks.</p>\n<p>For example, to display a list of users provided in a variable called users, use the for tag:</p>\n<pre><code class=\"language-html\">&lt;h1&gt;Members&lt;/h1&gt;\n&lt;ul&gt;\n    {% for user in users %}\n        &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n\nThe if tag can be used to test an expression:\n\n{% if users|length &gt; 0 %}\n    &lt;ul&gt;\n        {% for user in users %}\n            &lt;li&gt;{{ user.username|e }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endif %}\n</code></pre>\n<p><a href=\"http://twig.sensiolabs.org/doc/tags/index.html\">http://twig.sensiolabs.org/doc/tags/index.html</a></p>\n<h2 id=\"comments\">Comments <a class=\"heading-anchor-permalink\" href=\"#comments\">#</a></h2>\n<p>To comment-out part of a line in a template, use the comment syntax {# … #}. This is useful for debugging or to add information for other template designers or yourself:</p>\n<pre><code>{# note: disabled template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n</code></pre>\n<h2 id=\"include\">Include <a class=\"heading-anchor-permalink\" href=\"#include\">#</a></h2>\n<p>Includes a partial file</p>\n<pre><code>{% include 'partials/head.twig' %}\n\n{% for box in boxes %}\n    {{ include('render_box.html') }}\n{% endfor %}\n</code></pre>\n<h2 id=\"extends\">Extends <a class=\"heading-anchor-permalink\" href=\"#extends\">#</a></h2>\n<p>Use extends to include the layout and then use the block headers to import the required content.</p>\n<pre><code>{% extends &quot;master.twig&quot; %}\n\n{% block header %}\n  {% include 'partials/header.twig' with {\n    'title': artist.title\n  } %}\n{% endblock %}\n</code></pre>\n<h2 id=\"template-inheritance\">Template Inheritance <a class=\"heading-anchor-permalink\" href=\"#template-inheritance\">#</a></h2>\n<p>The most powerful part of Twig is template inheritance. Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines blocks that child templates can override.</p>\n<p>Sounds complicated but it is very basic. It’s easier to understand it by starting with an example.</p>\n<p>Let’s define a base template, base.html, which defines a simple HTML skeleton document that you might use for a simple two-column page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {% block head %}\n            &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;\n            &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n        {% endblock %}\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;content&quot;&gt;{% block content %}{% endblock %}&lt;/div&gt;\n        &lt;div id=&quot;footer&quot;&gt;\n            {% block footer %}\n                &amp;copy; Copyright 2011 by &lt;a href=&quot;http://domain.invalid/&quot;&gt;you&lt;/a&gt;.\n            {% endblock %}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>In this example, the block tags define four blocks that child templates can fill in. All the block tag does is to tell the template engine that a child template may override those portions of the template.</p>\n<p>A child template might look like this:</p>\n<pre><code class=\"language-html\">{% extends &quot;base.html&quot; %}\n\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ parent() }}\n    &lt;style type=&quot;text/css&quot;&gt;\n        .important { color: #336699; }\n    &lt;/style&gt;\n{% endblock %}\n{% block content %}\n    &lt;h1&gt;Index&lt;/h1&gt;\n    &lt;p class=&quot;important&quot;&gt;\n        Welcome to my awesome homepage.\n    &lt;/p&gt;\n{% endblock %}\n</code></pre>\n<p>The extends tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</p>\n<p>Note that since the child template doesn’t define the footer block, the value from the parent template is used instead.</p>\n<p>It’s possible to render the contents of the parent block by using the parent function. This gives back the results of the parent block:</p>\n<pre><code class=\"language-html\">{% block sidebar %}\n    &lt;h3&gt;Table Of Contents&lt;/h3&gt;\n    ...\n    {{ parent() }}\n{% endblock %}\n</code></pre>\n<h2 id=\"manual-escaping\">Manual Escaping <a class=\"heading-anchor-permalink\" href=\"#manual-escaping\">#</a></h2>\n<p>Working with Manual Escaping\nIf manual escaping is enabled, it is your responsibility to escape variables if needed. What to escape? Any variable you don’t trust.</p>\n<p>Escaping works by piping the variable through the escape or e filter:</p>\n<pre><code>{{ user.username|e }}\n</code></pre>\n<p>By default, the escape filter uses the html strategy, but depending on the escaping context, you might want to explicitly use any other available strategies:</p>\n<pre><code>{{ user.username|e('js') }}\n{{ user.username|e('css') }}\n{{ user.username|e('url') }}\n{{ user.username|e('html_attr') }}\n</code></pre>\n<p>Working with Automatic Escaping</p>\n<p>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the autoescape tag:</p>\n<pre><code>{% autoescape %}\n    Everything will be automatically escaped in this block (using the HTML strategy)\n{% endautoescape %}\n\nBy default, auto-escaping uses the html escaping strategy. If you output variables in other contexts, you need to explicitly escape them with the appropriate escaping strategy:\n\n{% autoescape 'js' %}\n    Everything will be automatically escaped in this block (using the JS strategy)\n{% endautoescape %}\n</code></pre>\n<h2 id=\"macros-(add-in-if-you-think-it-is-relevant)\">Macros (add in if you think it is relevant) <a class=\"heading-anchor-permalink\" href=\"#macros-(add-in-if-you-think-it-is-relevant)\">#</a></h2>\n",
      "id": 56
    },
    {
      "path": "javascript/js_cheatsheet.md",
      "url": "javascript/js_cheatsheet.html",
      "content": "\n### Basics➤\n#### On page script\n```js\n<script type=\"text/javascript\">  ...\n</script>\n```\n#### Include external JS file\n```js\n<script src=\"filename.js\"></script>\n```\n#### Delay - 1 second timeout\n```js\nsetTimeout(function () {}, 1000);\n```\n#### Functions - _regular function._\n```js\nfunction addNumbers(a, b) {\n    return a + b; ;\n}\nx = addNumbers(1, 2);\n```\n#### Functions - _Arrow function._(ES6/ES2015)\n```js\n// from regular function:\nconst myFunction = function() {//...}\n// To arrow function:\nconst myFunction = () => {//...}\n// If the function body contains just a single statement, \n// you can omit the brackets:\nconst myFunction = () => doSomething();\nParameters are passed in the parentheses:\nconst myFunction = (param1, param2) => doSomething(param1, param2)\n// If you have one (and just one) parameter,  you can omit\n// the parentheses completely:\nconst myFunction = param => doSomething(param);\n// Implicit return:\n/* Arrow functions allow you to have an implicit return: values \n are returned without having to use the return keyword. It \n works when there is a one-line statement in the function\n body: */\nconst myFunction = () => 'test'\nmyFunction() //'test'\n/* Another example, when returning an object, remember to wrap\n the curly brackets in parentheses to avoid it being considered\n the wrapping function body brackets: */\nconst myFunction = () => ({ value: 'test' })\nmyFunction() //{value: 'test'}\n```\n##### `this` in _arrow functions_:\n\n`this` in `arrow functions` behave very differently compared\nto `regular functions`:\n\n- When defined as a method of an object, in a regular function this refers to the object, so you can do:\n```js\nconst car = {\n\tmodel: 'Fiesta',\n\tmanufacturer: 'Ford',\n\tfullName: function() {\n\treturn `${this.manufacturer} ${this.model}`\n }\n}\n```\n- calling The `car.fullName()` will return `\"Ford Fiesta\"`.\n- The `this` scope with arrow functions is inherited from the execution context. - An arrow function does not bind `this` at all, so its value will be looked up in the call stack, so in `this` code `car.fullName() will not work, and will return the string `\"undefined undefined\"`:\n```js\nconst car = {\n\tmodel: 'Fiesta',\n\tmanufacturer: 'Ford',\n\tfullName: () => {\n\treturn `${this.manufacturer} ${this.model}`\n }\n}\n```\n- Due to this, arrow functions are not suited as object methods.\n- `Arrow functions` cannot be used as `constructors` either, when instantiating an `object` will raise a `TypeError`. This is where `regular functions` should be used instead, when `dynamic context` is not\nneeded.\n- This is also a problem when handling events. `DOM Event listeners` set element, and if you rely on `this`to be the target in an `event handler`, a `regular function` is necessary:\n```js\nconst link = document.querySelector('#link');\nlink.addEventListener('click', () => {\n// this === window\n})\nconst link = document.querySelector('#link')\nlink.addEventListener('click', function() {\n// this === link\n})\n```\n#### Edit DOM element\n```js\ndocument.getElementById(\"elementID\")\n\t.innerHTML = \"Hello World!\";\n```\n#### Output\n```js\nconsole.log(a);  // write to the browser console\ndocument.write(a);   // write to the HTML\nalert(a);       // output in an alert box\nconfirm(\"Really?\");  /* yes/no dialog, returns true/false depending\n on user click.*/\nprompt(\"Your age?\",\"0\");  /* input dialog. Second argument is the\n initial value*/\n```\n#### Comments\n```js\n/* Multi line\n   comment */\n// One line\n```\n#### If - Else\n```js\nif ((age >= 14) && (age < 19)) {// logical\n\t\t\t\t\t\t\t// condition\n    status = \"Eligible.\"; /* executed if \n    condition is true*/\n} else {                // else block is \n\t\t\t\t\t\t// optional\n status = \"Not eligible.\"; /* executed if \n condition is false*/\n}\n```\n#### Switch Statement\n```js\nswitch (new Date().getDay()) { // input is current day\n    case 6:                  // if (day == 6)\n        text = \"Saturday\";          \n        break;\n    case 0:                // if (day == 0)\n        text = \"Sunday\";\n        break;\n    default:              // else...\n        text = \"Whatever\";\n}\n```\n## Loops↶\n\n#### For Loop\n```js\nfor (var i = 0; i < 10; i++) {\n    document.write(i + \": \" + i*3 + \"<br />\");\n}\nvar sum = 0;\nfor (var i = 0; i < a.length; i++) {\n    sum + = a[i];\n}            // parsing an array\nhtml = \"\";\nfor (var i of custOrder) {\n    html += \"<li>\" + i + \"</li>\";\n}\n```\n#### While Loop\n```js\nvar i = 1;         // initialize\nwhile (i < 100) {  // enters the cycle if statement is true\n    i *= 2;                     // increment to avoid infinite loop\n    document.write(i + \", \");   // output\n}\n```\n#### Do While Loop\n```js\nvar i = 1;                      // initialize\ndo {                            // enters cycle at least once\n    i *= 2;                     // increment to avoid infinite loop\n    document.write(i + \", \");   // output\n} while (i < 100)               // repeats cycle if statement is true at the end\n```\n#### Break\n```js\nfor (var i = 0; i < 10; i++) {\n   if (i == 5) { break; } // stops and exits the cycle\n   document.write(i + \", \"); // last output number is 4\n}\n```\n#### Continue\n```js\nfor (var i = 0; i < 10; i++) {\nif (i == 5) { continue; }// skips the rest of the cycle\n    document.write(i + \", \");       // skips 5\n}\n```\n\n## Data Typesℜ\n```js\nvar age = 18;                           // number \nvar name = \"Jane\";                      // string\nvar name = {first:\"Jane\", last:\"Doe\"};  // object\nvar truth = false;                      // boolean\nvar sheets = [\"HTML\",\"CSS\",\"JS\"];       // array\nvar a; typeof a;                        // undefined\nvar a = null;                           // value null\n```\n#### Objects\n\n```js\nvar student = {                 // object name\n    firstName:\"Jane\",           // list of properties and values\n    lastName:\"Doe\",\n    age:18,\n    height:170,\n    fullName : function() {     // object function\n       return this.firstName + \" \" + this.lastName;\n    }\n}; \nstudent.age = 19;           // setting value\nstudent[age]++;             // incrementing\nname = student.fullName();  // call object function\n```\n##### Dates📆\n```js\nWed Feb 19 2020 15:55:59 GMT+0300 (Arabian Standard Time)\nvar d = new Date();\n1582116959653 miliseconds passed since 1970\nNumber(d) \nDate(\"2017-06-23\");  // date declaration\nDate(\"2017\");        // is set to Jan 01\nDate(\"2017-06-23T12:00:00-09:45\");  \n// date - time YYYY-MM-DDTHH:MM:SSZ\nDate(\"June 23 2017\");   // long date format\nDate(\"Jun 23 2017 07:45:00 GMT+0100 (Tokyo Time)\"); // time zone\n```\n#### Get Times\n```js\nvar d = new Date();\na = d.getDay();     // getting the weekday\ngetDate();          // day as a number (1-31)\ngetDay();           // weekday as a number (0-6)\ngetFullYear();      // four digit year (yyyy)\ngetHours();         // hour (0-23)\ngetMilliseconds();  // milliseconds (0-999)\ngetMinutes();       // minutes (0-59)\ngetMonth();         // month (0-11)\ngetSeconds();       // seconds (0-59)\ngetTime();        // milliseconds since 1970\n```\n##### Setting part of a date\n```js\nvar d = new Date();\nd.setDate(d.getDate() + 7); // adds a week to a date\nsetDate();          // day as a number (1-31)\nsetFullYear();      // year (optionally month and day)\nsetHours();         // hour (0-23)\nsetMilliseconds();  // milliseconds (0-999)\nsetMinutes();       // minutes (0-59)\nsetMonth();         // month (0-11)\nsetSeconds();       // seconds (0-59)\nsetTime();          // milliseconds since 1970)\n```\n## Variablesx\n```js\nvar a;                          // variable\nvar b = \"init\";                 // string\nvar c = \"Hi\" + \" \" + \"Joe\";     // = \"Hi Joe\"\nvar d = 1 + 2 + \"3\";            // = \"33\"\nvar e = [2,3,5,8];              // array\nvar f = false;                  // boolean\nvar g = /()/;                   // RegEx\nvar h = function(){};           // function object\nconst PI = 3.14; /* constant, has block scope, same as let. does\n not provide immutability, just makes sure that the reference \n can't be changed.*/\nvar a = 1, b = 2, c = a + b;    // one line\nlet z = 'zzz';                  // block scope local variable\n```\n#### Strict mode\n```js\n\"use strict\";   // Use strict mode to write secure code\nx = 1;          // Throws an error because variable is not declared\n```\n#### Values\n```js\nfalse, true                     // boolean\n18, 3.14, 0b10011, 0xF6, NaN    // number\n\"flower\", 'John'                // string\nundefined, null , Infinity      // special\n```\n#### Operators\n```js\na = b + c - d;      // addition, substraction\na = b * (c / d);    // multiplication, division\nx = 100 % 48;       // modulo. 100 / 48 remainder = 4\na++; b--;     // postfix increment and decrement\n```\n#### Bitwise operators\n<table class=\"tableStyle1\">\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>AND&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &amp; 1 (0101 &amp; 0001)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">1 (1)</span></td>\n</tr>\n<tr>\n<td>|</td>\n<td>OR&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 | 1 (0101 | 0001)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">5 (101)</span></td>\n</tr>\n<tr>\n<td>~</td>\n<td>NOT&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;~ 5 (~0101)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">10 (1010)</span></td>\n</tr>\n<tr>\n<td>^</td>\n<td>XOR&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 ^ 1 (0101 ^ 0001)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">4 (100)</span></td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>left shift&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &lt;&lt; 1 (0101 &lt;&lt; 1)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">10 (1010)</span></td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>right shift&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &gt;&gt; 1 (0101 &gt;&gt; 1)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">2 (10)</span></td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>zero fill right shift&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &gt;&gt;&gt; 1 (0101 &gt;&gt;&gt; 1)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">2 (10)</span></td>\n</tr>\n</tbody>\n</table>\n\n#### Arithmetic\n```js\na * (b + c)         // grouping\nperson.age          // member\nperson[age]         // member\n!(a == b)           // logical not\na != b              // not equal\ntypeof a            // type (number, object, function...)\nx << 2  x >> 3      // minary shifting\na = b               // assignment\na == b              // equals\na != b              // unequal\na === b             // strict equal\na !== b             // strict unequal\na < b   a > b       // less and greater than\na <= b  a >= b      // less or equal, greater or eq\na += b              // a = a + b (works with - * %...)\na && b              // logical and\na || b              // logical or\n```\n\n### Strings⊗\n```js\nvar abc = \"abcdefghijklmnopqrstuvwxyz\";\nvar esc = 'I don\\'t \\n know';   // \\n new line\nvar len = abc.length;           // string length\nabc.indexOf(\"lmno\");    // find substring, -1 if doesn't contain \nabc.lastIndexOf(\"lmno\");        // last occurance\nabc.slice(3, 6); /* cuts out \"def\", negative values count from \n\t\t\t\t\tbehind*/\nabc.replace(\"abc\",\"123\");/* find and replace, takes regular \n\t\t\t\t\t\t\texpressions*/\nabc.toUpperCase();              // convert to upper case\nabc.toLowerCase();              // convert to lower case\nabc.concat(\" \", str2);          // abc + \" \" + str2\nabc.charAt(2);                  // character at index: \"c\"\nabc[2];                   // unsafe, abc[2] = \"C\" doesn't work\nabc.charCodeAt(2);       // character code at index: \"c\" -> 99\nabc.split(\",\");   // splitting a string on commas gives an array\nabc.split(\"\");                  // splitting on characters\n128.toString(16);  // number to hex(16), octal (8) or binary (2)\n```\n\n### Numbers and Math∑\n```js\nvar pi = 3.141;\npi.toFixed(0);          // returns 3\npi.toFixed(2);          // returns 3.14 - for working with money\npi.toPrecision(2)       // returns 3.1\npi.valueOf();           // returns number\nNumber(true);           // converts to number\nNumber(new Date())      // number of milliseconds since 1970\nparseInt(\"3 months\");   // returns the first number: 3\nparseFloat(\"3.5 days\"); // returns 3.5\nNumber.MAX_VALUE        // largest possible JS number\nNumber.MIN_VALUE        // smallest possible JS number\nNumber.NEGATIVE_INFINITY// -Infinity\nNumber.POSITIVE_INFINITY// Infinity\n```\n#### Math.\n```js\nvar pi = Math.PI;       // 3.141592653589793\nMath.round(4.4);        // = 4 - rounded\nMath.round(4.5);        // = 5\nMath.pow(2,8);          // = 256 - 2 to the power of 8\nMath.sqrt(49);          // = 7 - square root \nMath.abs(-3.14);        // = 3.14 - absolute, positive value\nMath.ceil(3.14);        // = 4 - rounded up\nMath.floor(3.99);       // = 3 - rounded down\nMath.sin(0);            // = 0 - sine\nMath.cos(Math.PI);      // OTHERS: tan,atan,asin,acos,\nMath.min(0, 3, -2, 2);  // = -2 - the lowest value\nMath.max(0, 3, -2, 2);  // = 3 - the highest value\nMath.log(1);            // = 0 natural logarithm \nMath.exp(1);            // = 2.7182pow(E,x)\nMath.random();          // random number between 0 and 1\nMath.floor(Math.random() * 5) + 1;// random integer, from 1 to 5\n```\n#### Constants like Math.PI:\n```js\nE, PI, SQRT2, SQRT1_2, LN2, LN10, LOG2E, Log10E\n```\n\n### Events🕖\n```js\n<button onclick=\"myFunction();\">\n   Click here\n</button>\n```\n\n#### Mouse\n\n```js\nonclick, oncontextmenu, ondblclick,\nonmousedown, onmouseenter, onmouseleave,\nonmousemove, onmouseover, onmouseout, onmouseup\n```\n\n#### Keyboard\n```js\nonkeydown, onkeypress, onkeyup\n```\n#### Frame\n```js\nonabort, onbeforeunload, onerror, onhashchange, \nonload, onpageshow, onpagehide, onresize, onscroll,\nonunload\n```\n#### Form\n```js\nonblur, onchange, onfocus, onfocusin,onfocusout,\noninput, oninvalid, onreset,onsearch, onselect, onsubmit\n```\n#### Drag\n```js\nondrag, ondragend, ondragenter, ondragleave, ondragover,\nondragstart, ondrop\n```\n#### Clipboard\n```js\noncopy, oncut, onpaste\n```\n#### Media\n```js\nonabort, oncanplay, oncanplaythrough, \nondurationchange, onended, onerror, onloadeddata,\nonloadedmetadata, onloadstart, onpause, onplay,onplaying,\nonprogress, onratechange,onseeked, onseeking, onstalled, \nonsuspend, ontimeupdate, onvolumechange, onwaiting\n```\n#### Animation\n```js\nanimationend, animationiteration, animationstart\n```\n#### Miscellaneous\n```js\ntransitionend, onmessage, onmousewheel, ononline,\nonoffline, onpopstate, onshow, onstorage, ontoggle,\nonwheel, ontouchcancel, ontouchend, ontouchmove, \nontouchstart.\n```\n### Global Functions()\n```js\neval();   // executes a string as if it was script code\nString(23);// return string from number\n(23).toString(); // return string from number\nNumber(\"23\");    // return number from string\ndecodeURI(enc);  // decode URI. Result: \"my page.asp\"\nencodeURI(uri);  // encode URI. Result: \"my%page.asp\"\ndecodeURIComponent(enc);// decode a URI component\nencodeURIComponent(uri);// encode a URI component\nisFinite();     // is variable a finite, legal number\nisNaN();        // is variable an illegal number\nparseFloat(); // returns floating point number of string\nparseInt();   // parses a string and returns an integer\n```\n## Arrays≡\n```js\nvar dogs = [\"Bulldog\", \"Beagle\", \"Labrador\"]; \nvar dogs = new Array(\"Bulldog\", \"Beagle\",\n\t\t\t \"Labrador\"); \t // declaration\nalert(dogs[1]); /* access value at index, first item\n being [0]*/\ndogs[0] = \"Bull Terier\";    // change the first item\nfor (var i = 0; i < dogs.length; i++) { /* parsing with \n\t\t\t\t\t\t\t\t\t\tarray.length*/\n    console.log(dogs[i]);\n```\n#### Methods\n```js\ndogs.toString();      /* convert to string: results \n\t\t\t\t\t\t\"Bulldog,Beagle,Labrador\"*/\ndogs.join(\" * \");// join: \"Bulldog * Beagle * Labrador\"\ndogs.pop();              // remove last element\ndogs.push(\"Chihuahua\");  // add new element to the end\ndogs[dogs.length] = \"Chihuahua\"; // the same as push\ndogs.shift();        // remove first element\ndogs.unshift(\"Chihuahua\"); /* add new element to \nthe beginning*/\ndelete dogs[0];/* change element to undefined (not\n recommended)\ndogs.splice(2, 0, \"Pug\", \"Boxer\");/* add elements \n(where, how many to remove, element list)*/\nvar animals = dogs.concat(cats,birds);/* join two arrays\n (dogs followed by cats and birds)*/\ndogs.slice(1,4); // elements from [1] to [4-1]\ndogs.sort();    // sort string alphabetically\ndogs.reverse();   // sort string in descending order\nx.sort(function(a, b){\nreturn a - b});// numeric sort\nx.sort(function(a, b){\nreturn b - a});// numeric descending sort\nhighest = x[0]; /* first item in sorted array is the\n lowest (or highest) value*/\nx.sort(function(a, b){\nreturn 0.5 - Math.random()});/* random order sort*/\n```\n\n## Regular Expressions\n```js\nvar a = str.search(/CheatSheet/i);\n```\n#### Modifiers\n\n**i :** _perform case-insensitive matching_\n**g :** _perform a global match_\n**m :** _perform multiline matching_\n\n#### Patterns\n<div class=\"descriptionListing\">\n<div><span id=\"selectableSpan50\" onclick=\"selectText(&quot;selectableSpan50&quot;)\">\\</span> <em>Escape character</em></div>\n\t<div><span id=\"selectableSpan51\" onclick=\"selectText(&quot;selectableSpan51&quot;)\">\\d </span><em>find a digit </em></div>\n<div><span id=\"selectableSpan52\" onclick=\"selectText(&quot;selectableSpan52&quot;)\">\\s </span><em>find a whitespace character </em></div>\n\t<div><span id=\"selectableSpan53\" onclick=\"selectText(&quot;selectableSpan53&quot;)\">\\b </span><em>find match at beginning or end of a word </em></div>\n\t<div><span id=\"selectableSpan54\" onclick=\"selectText(&quot;selectableSpan54&quot;)\">n+ </span><em>contains at least one n </em></div>\n<div><span id=\"selectableSpan55\" onclick=\"selectText(&quot;selectableSpan55&quot;)\">n* </span><em>contains zero or more occurrences of n </em></div>\n<div><span id=\"selectableSpan56\" onclick=\"selectText(&quot;selectableSpan56&quot;)\">n? </span><em>contains zero or one occurrences of n </em></div>\n\t<div><span id=\"selectableSpan57\" onclick=\"selectText(&quot;selectableSpan57&quot;)\">^</span> <em>Start of string</em></div>\n\t<div><span id=\"selectableSpan58\" onclick=\"selectText(&quot;selectableSpan58&quot;)\">$</span> <em>End of string</em></div>\n\t<div><span id=\"selectableSpan59\" onclick=\"selectText(&quot;selectableSpan59&quot;)\">\\uxxxx </span><em>find the Unicode character </em></div>\n\t<div><span id=\"selectableSpan60\" onclick=\"selectText(&quot;selectableSpan60&quot;)\">.</span> <em>Any single character</em></div>\n\t<div><span id=\"selectableSpan61\" onclick=\"selectText(&quot;selectableSpan61&quot;)\">(a|b)</span> <em>a or b</em></div>\n\t<div><span id=\"selectableSpan62\" onclick=\"selectText(&quot;selectableSpan62&quot;)\">(...)</span> <em>Group section</em></div>\n\t<div><span id=\"selectableSpan63\" onclick=\"selectText(&quot;selectableSpan63&quot;)\">[abc]</span> <em>In range (a, b or c)</em></div>\n\t<div><span id=\"selectableSpan64\" onclick=\"selectText(&quot;selectableSpan64&quot;)\">[0-9]</span> <em>any of the digits between the brackets</em></div>\n\t<div><span id=\"selectableSpan65\" onclick=\"selectText(&quot;selectableSpan65&quot;)\">[^abc]</span> <em>Not in range</em></div>\n\t<div><span id=\"selectableSpan66\" onclick=\"selectText(&quot;selectableSpan66&quot;)\">\\s</span> <em>White space</em></div>\n\t<div><span id=\"selectableSpan67\" onclick=\"selectText(&quot;selectableSpan67&quot;)\">a?</span> <em>Zero or one of a</em></div>\n\t<div><span id=\"selectableSpan68\" onclick=\"selectText(&quot;selectableSpan68&quot;)\">a*</span> <em>Zero or more of a</em></div>\n\t<div><span id=\"selectableSpan69\" onclick=\"selectText(&quot;selectableSpan69&quot;)\">a*?</span> <em>Zero or more, ungreedy</em></div>\n\t<div><span id=\"selectableSpan70\" onclick=\"selectText(&quot;selectableSpan70&quot;)\">a+</span> <em>One or more of a</em></div>\n\t<div><span id=\"selectableSpan71\" onclick=\"selectText(&quot;selectableSpan71&quot;)\">a+?</span> <em>One or more, ungreedy</em></div>\n\t<div><span id=\"selectableSpan72\" onclick=\"selectText(&quot;selectableSpan72&quot;)\">a{2}</span> <em>Exactly 2 of a</em></div>\n\t<div><span id=\"selectableSpan73\" onclick=\"selectText(&quot;selectableSpan73&quot;)\">a{2,}</span> <em>2 or more of a</em></div>\n\t<div><span id=\"selectableSpan74\" onclick=\"selectText(&quot;selectableSpan74&quot;)\">a{,5}</span> <em>Up to 5 of a</em></div>\n\t<div><span id=\"selectableSpan75\" onclick=\"selectText(&quot;selectableSpan75&quot;)\">a{2,5}</span> <em>2 to 5 of a</em></div>\n\t<div><span id=\"selectableSpan76\" onclick=\"selectText(&quot;selectableSpan76&quot;)\">a{2,5}?</span> <em>2 to 5 of a, ungreedy</em></div>\n\t<div><span id=\"selectableSpan77\" onclick=\"selectText(&quot;selectableSpan77&quot;)\">[:punct:]</span> <em>Any punctu­ation symbol</em></div>\n\t<div><span id=\"selectableSpan78\" onclick=\"selectText(&quot;selectableSpan78&quot;)\">[:space:]</span> <em>Any space character</em></div>\n\t<div><span id=\"selectableSpan79\" onclick=\"selectText(&quot;selectableSpan79&quot;)\">[:blank:]</span> <em>Space or tab</em></div>\n</div>\n\n---\n// to be added: \n- working with objects and arrays using `Rest` and `Spread`.\n- ",
      "html": "<h3 id=\"basics%E2%9E%A4\">Basics➤ <a class=\"heading-anchor-permalink\" href=\"#basics%E2%9E%A4\">#</a></h3>\n<h4 id=\"on-page-script\">On page script <a class=\"heading-anchor-permalink\" href=\"#on-page-script\">#</a></h4>\n<pre><code class=\"language-js\">&lt;script type=&quot;text/javascript&quot;&gt;  ...\n&lt;/script&gt;\n</code></pre>\n<h4 id=\"include-external-js-file\">Include external JS file <a class=\"heading-anchor-permalink\" href=\"#include-external-js-file\">#</a></h4>\n<pre><code class=\"language-js\">&lt;script src=&quot;filename.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h4 id=\"delay---1-second-timeout\">Delay - 1 second timeout <a class=\"heading-anchor-permalink\" href=\"#delay---1-second-timeout\">#</a></h4>\n<pre><code class=\"language-js\">setTimeout(function () {}, 1000);\n</code></pre>\n<h4 id=\"functions---regular-function.\">Functions - <em>regular function.</em> <a class=\"heading-anchor-permalink\" href=\"#functions---regular-function.\">#</a></h4>\n<pre><code class=\"language-js\">function addNumbers(a, b) {\n    return a + b; ;\n}\nx = addNumbers(1, 2);\n</code></pre>\n<h4 id=\"functions---arrow-function.(es6%2Fes2015)\">Functions - <em>Arrow function.</em>(ES6/ES2015) <a class=\"heading-anchor-permalink\" href=\"#functions---arrow-function.(es6%2Fes2015)\">#</a></h4>\n<pre><code class=\"language-js\">// from regular function:\nconst myFunction = function() {//...}\n// To arrow function:\nconst myFunction = () =&gt; {//...}\n// If the function body contains just a single statement, \n// you can omit the brackets:\nconst myFunction = () =&gt; doSomething();\nParameters are passed in the parentheses:\nconst myFunction = (param1, param2) =&gt; doSomething(param1, param2)\n// If you have one (and just one) parameter,  you can omit\n// the parentheses completely:\nconst myFunction = param =&gt; doSomething(param);\n// Implicit return:\n/* Arrow functions allow you to have an implicit return: values \n are returned without having to use the return keyword. It \n works when there is a one-line statement in the function\n body: */\nconst myFunction = () =&gt; 'test'\nmyFunction() //'test'\n/* Another example, when returning an object, remember to wrap\n the curly brackets in parentheses to avoid it being considered\n the wrapping function body brackets: */\nconst myFunction = () =&gt; ({ value: 'test' })\nmyFunction() //{value: 'test'}\n</code></pre>\n<h5 id=\"this-in-arrow-functions%3A\"><code>this</code> in <em>arrow functions</em>: <a class=\"heading-anchor-permalink\" href=\"#this-in-arrow-functions%3A\">#</a></h5>\n<p><code>this</code> in <code>arrow functions</code> behave very differently compared\nto <code>regular functions</code>:</p>\n<ul>\n<li>When defined as a method of an object, in a regular function this refers to the object, so you can do:</li>\n</ul>\n<pre><code class=\"language-js\">const car = {\n\tmodel: 'Fiesta',\n\tmanufacturer: 'Ford',\n\tfullName: function() {\n\treturn `${this.manufacturer} ${this.model}`\n }\n}\n</code></pre>\n<ul>\n<li>calling The <code>car.fullName()</code> will return <code>&quot;Ford Fiesta&quot;</code>.</li>\n<li>The <code>this</code> scope with arrow functions is inherited from the execution context. - An arrow function does not bind <code>this</code> at all, so its value will be looked up in the call stack, so in <code>this</code> code <code>car.fullName() will not work, and will return the string</code>“undefined undefined”`:</li>\n</ul>\n<pre><code class=\"language-js\">const car = {\n\tmodel: 'Fiesta',\n\tmanufacturer: 'Ford',\n\tfullName: () =&gt; {\n\treturn `${this.manufacturer} ${this.model}`\n }\n}\n</code></pre>\n<ul>\n<li>Due to this, arrow functions are not suited as object methods.</li>\n<li><code>Arrow functions</code> cannot be used as <code>constructors</code> either, when instantiating an <code>object</code> will raise a <code>TypeError</code>. This is where <code>regular functions</code> should be used instead, when <code>dynamic context</code> is not\nneeded.</li>\n<li>This is also a problem when handling events. <code>DOM Event listeners</code> set element, and if you rely on <code>this</code>to be the target in an <code>event handler</code>, a <code>regular function</code> is necessary:</li>\n</ul>\n<pre><code class=\"language-js\">const link = document.querySelector('#link');\nlink.addEventListener('click', () =&gt; {\n// this === window\n})\nconst link = document.querySelector('#link')\nlink.addEventListener('click', function() {\n// this === link\n})\n</code></pre>\n<h4 id=\"edit-dom-element\">Edit DOM element <a class=\"heading-anchor-permalink\" href=\"#edit-dom-element\">#</a></h4>\n<pre><code class=\"language-js\">document.getElementById(&quot;elementID&quot;)\n\t.innerHTML = &quot;Hello World!&quot;;\n</code></pre>\n<h4 id=\"output\">Output <a class=\"heading-anchor-permalink\" href=\"#output\">#</a></h4>\n<pre><code class=\"language-js\">console.log(a);  // write to the browser console\ndocument.write(a);   // write to the HTML\nalert(a);       // output in an alert box\nconfirm(&quot;Really?&quot;);  /* yes/no dialog, returns true/false depending\n on user click.*/\nprompt(&quot;Your age?&quot;,&quot;0&quot;);  /* input dialog. Second argument is the\n initial value*/\n</code></pre>\n<h4 id=\"comments\">Comments <a class=\"heading-anchor-permalink\" href=\"#comments\">#</a></h4>\n<pre><code class=\"language-js\">/* Multi line\n   comment */\n// One line\n</code></pre>\n<h4 id=\"if---else\">If - Else <a class=\"heading-anchor-permalink\" href=\"#if---else\">#</a></h4>\n<pre><code class=\"language-js\">if ((age &gt;= 14) &amp;&amp; (age &lt; 19)) {// logical\n\t\t\t\t\t\t\t// condition\n    status = &quot;Eligible.&quot;; /* executed if \n    condition is true*/\n} else {                // else block is \n\t\t\t\t\t\t// optional\n status = &quot;Not eligible.&quot;; /* executed if \n condition is false*/\n}\n</code></pre>\n<h4 id=\"switch-statement\">Switch Statement <a class=\"heading-anchor-permalink\" href=\"#switch-statement\">#</a></h4>\n<pre><code class=\"language-js\">switch (new Date().getDay()) { // input is current day\n    case 6:                  // if (day == 6)\n        text = &quot;Saturday&quot;;          \n        break;\n    case 0:                // if (day == 0)\n        text = &quot;Sunday&quot;;\n        break;\n    default:              // else...\n        text = &quot;Whatever&quot;;\n}\n</code></pre>\n<h2 id=\"loops%E2%86%B6\">Loops↶ <a class=\"heading-anchor-permalink\" href=\"#loops%E2%86%B6\">#</a></h2>\n<h4 id=\"for-loop\">For Loop <a class=\"heading-anchor-permalink\" href=\"#for-loop\">#</a></h4>\n<pre><code class=\"language-js\">for (var i = 0; i &lt; 10; i++) {\n    document.write(i + &quot;: &quot; + i*3 + &quot;&lt;br /&gt;&quot;);\n}\nvar sum = 0;\nfor (var i = 0; i &lt; a.length; i++) {\n    sum + = a[i];\n}            // parsing an array\nhtml = &quot;&quot;;\nfor (var i of custOrder) {\n    html += &quot;&lt;li&gt;&quot; + i + &quot;&lt;/li&gt;&quot;;\n}\n</code></pre>\n<h4 id=\"while-loop\">While Loop <a class=\"heading-anchor-permalink\" href=\"#while-loop\">#</a></h4>\n<pre><code class=\"language-js\">var i = 1;         // initialize\nwhile (i &lt; 100) {  // enters the cycle if statement is true\n    i *= 2;                     // increment to avoid infinite loop\n    document.write(i + &quot;, &quot;);   // output\n}\n</code></pre>\n<h4 id=\"do-while-loop\">Do While Loop <a class=\"heading-anchor-permalink\" href=\"#do-while-loop\">#</a></h4>\n<pre><code class=\"language-js\">var i = 1;                      // initialize\ndo {                            // enters cycle at least once\n    i *= 2;                     // increment to avoid infinite loop\n    document.write(i + &quot;, &quot;);   // output\n} while (i &lt; 100)               // repeats cycle if statement is true at the end\n</code></pre>\n<h4 id=\"break\">Break <a class=\"heading-anchor-permalink\" href=\"#break\">#</a></h4>\n<pre><code class=\"language-js\">for (var i = 0; i &lt; 10; i++) {\n   if (i == 5) { break; } // stops and exits the cycle\n   document.write(i + &quot;, &quot;); // last output number is 4\n}\n</code></pre>\n<h4 id=\"continue\">Continue <a class=\"heading-anchor-permalink\" href=\"#continue\">#</a></h4>\n<pre><code class=\"language-js\">for (var i = 0; i &lt; 10; i++) {\nif (i == 5) { continue; }// skips the rest of the cycle\n    document.write(i + &quot;, &quot;);       // skips 5\n}\n</code></pre>\n<h2 id=\"data-types%E2%84%9C\">Data Typesℜ <a class=\"heading-anchor-permalink\" href=\"#data-types%E2%84%9C\">#</a></h2>\n<pre><code class=\"language-js\">var age = 18;                           // number \nvar name = &quot;Jane&quot;;                      // string\nvar name = {first:&quot;Jane&quot;, last:&quot;Doe&quot;};  // object\nvar truth = false;                      // boolean\nvar sheets = [&quot;HTML&quot;,&quot;CSS&quot;,&quot;JS&quot;];       // array\nvar a; typeof a;                        // undefined\nvar a = null;                           // value null\n</code></pre>\n<h4 id=\"objects\">Objects <a class=\"heading-anchor-permalink\" href=\"#objects\">#</a></h4>\n<pre><code class=\"language-js\">var student = {                 // object name\n    firstName:&quot;Jane&quot;,           // list of properties and values\n    lastName:&quot;Doe&quot;,\n    age:18,\n    height:170,\n    fullName : function() {     // object function\n       return this.firstName + &quot; &quot; + this.lastName;\n    }\n}; \nstudent.age = 19;           // setting value\nstudent[age]++;             // incrementing\nname = student.fullName();  // call object function\n</code></pre>\n<h5 id=\"dates%F0%9F%93%86\">Dates📆 <a class=\"heading-anchor-permalink\" href=\"#dates%F0%9F%93%86\">#</a></h5>\n<pre><code class=\"language-js\">Wed Feb 19 2020 15:55:59 GMT+0300 (Arabian Standard Time)\nvar d = new Date();\n1582116959653 miliseconds passed since 1970\nNumber(d) \nDate(&quot;2017-06-23&quot;);  // date declaration\nDate(&quot;2017&quot;);        // is set to Jan 01\nDate(&quot;2017-06-23T12:00:00-09:45&quot;);  \n// date - time YYYY-MM-DDTHH:MM:SSZ\nDate(&quot;June 23 2017&quot;);   // long date format\nDate(&quot;Jun 23 2017 07:45:00 GMT+0100 (Tokyo Time)&quot;); // time zone\n</code></pre>\n<h4 id=\"get-times\">Get Times <a class=\"heading-anchor-permalink\" href=\"#get-times\">#</a></h4>\n<pre><code class=\"language-js\">var d = new Date();\na = d.getDay();     // getting the weekday\ngetDate();          // day as a number (1-31)\ngetDay();           // weekday as a number (0-6)\ngetFullYear();      // four digit year (yyyy)\ngetHours();         // hour (0-23)\ngetMilliseconds();  // milliseconds (0-999)\ngetMinutes();       // minutes (0-59)\ngetMonth();         // month (0-11)\ngetSeconds();       // seconds (0-59)\ngetTime();        // milliseconds since 1970\n</code></pre>\n<h5 id=\"setting-part-of-a-date\">Setting part of a date <a class=\"heading-anchor-permalink\" href=\"#setting-part-of-a-date\">#</a></h5>\n<pre><code class=\"language-js\">var d = new Date();\nd.setDate(d.getDate() + 7); // adds a week to a date\nsetDate();          // day as a number (1-31)\nsetFullYear();      // year (optionally month and day)\nsetHours();         // hour (0-23)\nsetMilliseconds();  // milliseconds (0-999)\nsetMinutes();       // minutes (0-59)\nsetMonth();         // month (0-11)\nsetSeconds();       // seconds (0-59)\nsetTime();          // milliseconds since 1970)\n</code></pre>\n<h2 id=\"variablesx\">Variablesx <a class=\"heading-anchor-permalink\" href=\"#variablesx\">#</a></h2>\n<pre><code class=\"language-js\">var a;                          // variable\nvar b = &quot;init&quot;;                 // string\nvar c = &quot;Hi&quot; + &quot; &quot; + &quot;Joe&quot;;     // = &quot;Hi Joe&quot;\nvar d = 1 + 2 + &quot;3&quot;;            // = &quot;33&quot;\nvar e = [2,3,5,8];              // array\nvar f = false;                  // boolean\nvar g = /()/;                   // RegEx\nvar h = function(){};           // function object\nconst PI = 3.14; /* constant, has block scope, same as let. does\n not provide immutability, just makes sure that the reference \n can't be changed.*/\nvar a = 1, b = 2, c = a + b;    // one line\nlet z = 'zzz';                  // block scope local variable\n</code></pre>\n<h4 id=\"strict-mode\">Strict mode <a class=\"heading-anchor-permalink\" href=\"#strict-mode\">#</a></h4>\n<pre><code class=\"language-js\">&quot;use strict&quot;;   // Use strict mode to write secure code\nx = 1;          // Throws an error because variable is not declared\n</code></pre>\n<h4 id=\"values\">Values <a class=\"heading-anchor-permalink\" href=\"#values\">#</a></h4>\n<pre><code class=\"language-js\">false, true                     // boolean\n18, 3.14, 0b10011, 0xF6, NaN    // number\n&quot;flower&quot;, 'John'                // string\nundefined, null , Infinity      // special\n</code></pre>\n<h4 id=\"operators\">Operators <a class=\"heading-anchor-permalink\" href=\"#operators\">#</a></h4>\n<pre><code class=\"language-js\">a = b + c - d;      // addition, substraction\na = b * (c / d);    // multiplication, division\nx = 100 % 48;       // modulo. 100 / 48 remainder = 4\na++; b--;     // postfix increment and decrement\n</code></pre>\n<h4 id=\"bitwise-operators\">Bitwise operators <a class=\"heading-anchor-permalink\" href=\"#bitwise-operators\">#</a></h4>\n<table class=\"tableStyle1\">\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>AND&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &amp; 1 (0101 &amp; 0001)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">1 (1)</span></td>\n</tr>\n<tr>\n<td>|</td>\n<td>OR&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 | 1 (0101 | 0001)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">5 (101)</span></td>\n</tr>\n<tr>\n<td>~</td>\n<td>NOT&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;~ 5 (~0101)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">10 (1010)</span></td>\n</tr>\n<tr>\n<td>^</td>\n<td>XOR&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 ^ 1 (0101 ^ 0001)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">4 (100)</span></td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>left shift&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &lt;&lt; 1 (0101 &lt;&lt; 1)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">10 (1010)</span></td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>right shift&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &gt;&gt; 1 (0101 &gt;&gt; 1)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">2 (10)</span></td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>zero fill right shift&nbsp;</td>\n<td><span style=\"color:#00b418\" class=\"jsComment\">&nbsp;5 &gt;&gt;&gt; 1 (0101 &gt;&gt;&gt; 1)</span></td><td><span style=\"color:#00b418\" class=\"jsComment\">2 (10)</span></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"arithmetic\">Arithmetic <a class=\"heading-anchor-permalink\" href=\"#arithmetic\">#</a></h4>\n<pre><code class=\"language-js\">a * (b + c)         // grouping\nperson.age          // member\nperson[age]         // member\n!(a == b)           // logical not\na != b              // not equal\ntypeof a            // type (number, object, function...)\nx &lt;&lt; 2  x &gt;&gt; 3      // minary shifting\na = b               // assignment\na == b              // equals\na != b              // unequal\na === b             // strict equal\na !== b             // strict unequal\na &lt; b   a &gt; b       // less and greater than\na &lt;= b  a &gt;= b      // less or equal, greater or eq\na += b              // a = a + b (works with - * %...)\na &amp;&amp; b              // logical and\na || b              // logical or\n</code></pre>\n<h3 id=\"strings%E2%8A%97\">Strings⊗ <a class=\"heading-anchor-permalink\" href=\"#strings%E2%8A%97\">#</a></h3>\n<pre><code class=\"language-js\">var abc = &quot;abcdefghijklmnopqrstuvwxyz&quot;;\nvar esc = 'I don\\'t \\n know';   // \\n new line\nvar len = abc.length;           // string length\nabc.indexOf(&quot;lmno&quot;);    // find substring, -1 if doesn't contain \nabc.lastIndexOf(&quot;lmno&quot;);        // last occurance\nabc.slice(3, 6); /* cuts out &quot;def&quot;, negative values count from \n\t\t\t\t\tbehind*/\nabc.replace(&quot;abc&quot;,&quot;123&quot;);/* find and replace, takes regular \n\t\t\t\t\t\t\texpressions*/\nabc.toUpperCase();              // convert to upper case\nabc.toLowerCase();              // convert to lower case\nabc.concat(&quot; &quot;, str2);          // abc + &quot; &quot; + str2\nabc.charAt(2);                  // character at index: &quot;c&quot;\nabc[2];                   // unsafe, abc[2] = &quot;C&quot; doesn't work\nabc.charCodeAt(2);       // character code at index: &quot;c&quot; -&gt; 99\nabc.split(&quot;,&quot;);   // splitting a string on commas gives an array\nabc.split(&quot;&quot;);                  // splitting on characters\n128.toString(16);  // number to hex(16), octal (8) or binary (2)\n</code></pre>\n<h3 id=\"numbers-and-math%E2%88%91\">Numbers and Math∑ <a class=\"heading-anchor-permalink\" href=\"#numbers-and-math%E2%88%91\">#</a></h3>\n<pre><code class=\"language-js\">var pi = 3.141;\npi.toFixed(0);          // returns 3\npi.toFixed(2);          // returns 3.14 - for working with money\npi.toPrecision(2)       // returns 3.1\npi.valueOf();           // returns number\nNumber(true);           // converts to number\nNumber(new Date())      // number of milliseconds since 1970\nparseInt(&quot;3 months&quot;);   // returns the first number: 3\nparseFloat(&quot;3.5 days&quot;); // returns 3.5\nNumber.MAX_VALUE        // largest possible JS number\nNumber.MIN_VALUE        // smallest possible JS number\nNumber.NEGATIVE_INFINITY// -Infinity\nNumber.POSITIVE_INFINITY// Infinity\n</code></pre>\n<h4 id=\"math.\">Math. <a class=\"heading-anchor-permalink\" href=\"#math.\">#</a></h4>\n<pre><code class=\"language-js\">var pi = Math.PI;       // 3.141592653589793\nMath.round(4.4);        // = 4 - rounded\nMath.round(4.5);        // = 5\nMath.pow(2,8);          // = 256 - 2 to the power of 8\nMath.sqrt(49);          // = 7 - square root \nMath.abs(-3.14);        // = 3.14 - absolute, positive value\nMath.ceil(3.14);        // = 4 - rounded up\nMath.floor(3.99);       // = 3 - rounded down\nMath.sin(0);            // = 0 - sine\nMath.cos(Math.PI);      // OTHERS: tan,atan,asin,acos,\nMath.min(0, 3, -2, 2);  // = -2 - the lowest value\nMath.max(0, 3, -2, 2);  // = 3 - the highest value\nMath.log(1);            // = 0 natural logarithm \nMath.exp(1);            // = 2.7182pow(E,x)\nMath.random();          // random number between 0 and 1\nMath.floor(Math.random() * 5) + 1;// random integer, from 1 to 5\n</code></pre>\n<h4 id=\"constants-like-math.pi%3A\">Constants like Math.PI: <a class=\"heading-anchor-permalink\" href=\"#constants-like-math.pi%3A\">#</a></h4>\n<pre><code class=\"language-js\">E, PI, SQRT2, SQRT1_2, LN2, LN10, LOG2E, Log10E\n</code></pre>\n<h3 id=\"events%F0%9F%95%96\">Events🕖 <a class=\"heading-anchor-permalink\" href=\"#events%F0%9F%95%96\">#</a></h3>\n<pre><code class=\"language-js\">&lt;button onclick=&quot;myFunction();&quot;&gt;\n   Click here\n&lt;/button&gt;\n</code></pre>\n<h4 id=\"mouse\">Mouse <a class=\"heading-anchor-permalink\" href=\"#mouse\">#</a></h4>\n<pre><code class=\"language-js\">onclick, oncontextmenu, ondblclick,\nonmousedown, onmouseenter, onmouseleave,\nonmousemove, onmouseover, onmouseout, onmouseup\n</code></pre>\n<h4 id=\"keyboard\">Keyboard <a class=\"heading-anchor-permalink\" href=\"#keyboard\">#</a></h4>\n<pre><code class=\"language-js\">onkeydown, onkeypress, onkeyup\n</code></pre>\n<h4 id=\"frame\">Frame <a class=\"heading-anchor-permalink\" href=\"#frame\">#</a></h4>\n<pre><code class=\"language-js\">onabort, onbeforeunload, onerror, onhashchange, \nonload, onpageshow, onpagehide, onresize, onscroll,\nonunload\n</code></pre>\n<h4 id=\"form\">Form <a class=\"heading-anchor-permalink\" href=\"#form\">#</a></h4>\n<pre><code class=\"language-js\">onblur, onchange, onfocus, onfocusin,onfocusout,\noninput, oninvalid, onreset,onsearch, onselect, onsubmit\n</code></pre>\n<h4 id=\"drag\">Drag <a class=\"heading-anchor-permalink\" href=\"#drag\">#</a></h4>\n<pre><code class=\"language-js\">ondrag, ondragend, ondragenter, ondragleave, ondragover,\nondragstart, ondrop\n</code></pre>\n<h4 id=\"clipboard\">Clipboard <a class=\"heading-anchor-permalink\" href=\"#clipboard\">#</a></h4>\n<pre><code class=\"language-js\">oncopy, oncut, onpaste\n</code></pre>\n<h4 id=\"media\">Media <a class=\"heading-anchor-permalink\" href=\"#media\">#</a></h4>\n<pre><code class=\"language-js\">onabort, oncanplay, oncanplaythrough, \nondurationchange, onended, onerror, onloadeddata,\nonloadedmetadata, onloadstart, onpause, onplay,onplaying,\nonprogress, onratechange,onseeked, onseeking, onstalled, \nonsuspend, ontimeupdate, onvolumechange, onwaiting\n</code></pre>\n<h4 id=\"animation\">Animation <a class=\"heading-anchor-permalink\" href=\"#animation\">#</a></h4>\n<pre><code class=\"language-js\">animationend, animationiteration, animationstart\n</code></pre>\n<h4 id=\"miscellaneous\">Miscellaneous <a class=\"heading-anchor-permalink\" href=\"#miscellaneous\">#</a></h4>\n<pre><code class=\"language-js\">transitionend, onmessage, onmousewheel, ononline,\nonoffline, onpopstate, onshow, onstorage, ontoggle,\nonwheel, ontouchcancel, ontouchend, ontouchmove, \nontouchstart.\n</code></pre>\n<h3 id=\"global-functions()\">Global Functions() <a class=\"heading-anchor-permalink\" href=\"#global-functions()\">#</a></h3>\n<pre><code class=\"language-js\">eval();   // executes a string as if it was script code\nString(23);// return string from number\n(23).toString(); // return string from number\nNumber(&quot;23&quot;);    // return number from string\ndecodeURI(enc);  // decode URI. Result: &quot;my page.asp&quot;\nencodeURI(uri);  // encode URI. Result: &quot;my%page.asp&quot;\ndecodeURIComponent(enc);// decode a URI component\nencodeURIComponent(uri);// encode a URI component\nisFinite();     // is variable a finite, legal number\nisNaN();        // is variable an illegal number\nparseFloat(); // returns floating point number of string\nparseInt();   // parses a string and returns an integer\n</code></pre>\n<h2 id=\"arrays%E2%89%A1\">Arrays≡ <a class=\"heading-anchor-permalink\" href=\"#arrays%E2%89%A1\">#</a></h2>\n<pre><code class=\"language-js\">var dogs = [&quot;Bulldog&quot;, &quot;Beagle&quot;, &quot;Labrador&quot;]; \nvar dogs = new Array(&quot;Bulldog&quot;, &quot;Beagle&quot;,\n\t\t\t &quot;Labrador&quot;); \t // declaration\nalert(dogs[1]); /* access value at index, first item\n being [0]*/\ndogs[0] = &quot;Bull Terier&quot;;    // change the first item\nfor (var i = 0; i &lt; dogs.length; i++) { /* parsing with \n\t\t\t\t\t\t\t\t\t\tarray.length*/\n    console.log(dogs[i]);\n</code></pre>\n<h4 id=\"methods\">Methods <a class=\"heading-anchor-permalink\" href=\"#methods\">#</a></h4>\n<pre><code class=\"language-js\">dogs.toString();      /* convert to string: results \n\t\t\t\t\t\t&quot;Bulldog,Beagle,Labrador&quot;*/\ndogs.join(&quot; * &quot;);// join: &quot;Bulldog * Beagle * Labrador&quot;\ndogs.pop();              // remove last element\ndogs.push(&quot;Chihuahua&quot;);  // add new element to the end\ndogs[dogs.length] = &quot;Chihuahua&quot;; // the same as push\ndogs.shift();        // remove first element\ndogs.unshift(&quot;Chihuahua&quot;); /* add new element to \nthe beginning*/\ndelete dogs[0];/* change element to undefined (not\n recommended)\ndogs.splice(2, 0, &quot;Pug&quot;, &quot;Boxer&quot;);/* add elements \n(where, how many to remove, element list)*/\nvar animals = dogs.concat(cats,birds);/* join two arrays\n (dogs followed by cats and birds)*/\ndogs.slice(1,4); // elements from [1] to [4-1]\ndogs.sort();    // sort string alphabetically\ndogs.reverse();   // sort string in descending order\nx.sort(function(a, b){\nreturn a - b});// numeric sort\nx.sort(function(a, b){\nreturn b - a});// numeric descending sort\nhighest = x[0]; /* first item in sorted array is the\n lowest (or highest) value*/\nx.sort(function(a, b){\nreturn 0.5 - Math.random()});/* random order sort*/\n</code></pre>\n<h2 id=\"regular-expressions\">Regular Expressions <a class=\"heading-anchor-permalink\" href=\"#regular-expressions\">#</a></h2>\n<pre><code class=\"language-js\">var a = str.search(/CheatSheet/i);\n</code></pre>\n<h4 id=\"modifiers\">Modifiers <a class=\"heading-anchor-permalink\" href=\"#modifiers\">#</a></h4>\n<p><strong>i :</strong> <em>perform case-insensitive matching</em>\n<strong>g :</strong> <em>perform a global match</em>\n<strong>m :</strong> <em>perform multiline matching</em></p>\n<h4 id=\"patterns\">Patterns <a class=\"heading-anchor-permalink\" href=\"#patterns\">#</a></h4>\n<div class=\"descriptionListing\">\n<div><span id=\"selectableSpan50\" onclick=\"selectText(&quot;selectableSpan50&quot;)\">\\</span> <em>Escape character</em></div>\n\t<div><span id=\"selectableSpan51\" onclick=\"selectText(&quot;selectableSpan51&quot;)\">\\d </span><em>find a digit </em></div>\n<div><span id=\"selectableSpan52\" onclick=\"selectText(&quot;selectableSpan52&quot;)\">\\s </span><em>find a whitespace character </em></div>\n\t<div><span id=\"selectableSpan53\" onclick=\"selectText(&quot;selectableSpan53&quot;)\">\\b </span><em>find match at beginning or end of a word </em></div>\n\t<div><span id=\"selectableSpan54\" onclick=\"selectText(&quot;selectableSpan54&quot;)\">n+ </span><em>contains at least one n </em></div>\n<div><span id=\"selectableSpan55\" onclick=\"selectText(&quot;selectableSpan55&quot;)\">n* </span><em>contains zero or more occurrences of n </em></div>\n<div><span id=\"selectableSpan56\" onclick=\"selectText(&quot;selectableSpan56&quot;)\">n? </span><em>contains zero or one occurrences of n </em></div>\n\t<div><span id=\"selectableSpan57\" onclick=\"selectText(&quot;selectableSpan57&quot;)\">^</span> <em>Start of string</em></div>\n\t<div><span id=\"selectableSpan58\" onclick=\"selectText(&quot;selectableSpan58&quot;)\">$</span> <em>End of string</em></div>\n\t<div><span id=\"selectableSpan59\" onclick=\"selectText(&quot;selectableSpan59&quot;)\">\\uxxxx </span><em>find the Unicode character </em></div>\n\t<div><span id=\"selectableSpan60\" onclick=\"selectText(&quot;selectableSpan60&quot;)\">.</span> <em>Any single character</em></div>\n\t<div><span id=\"selectableSpan61\" onclick=\"selectText(&quot;selectableSpan61&quot;)\">(a|b)</span> <em>a or b</em></div>\n\t<div><span id=\"selectableSpan62\" onclick=\"selectText(&quot;selectableSpan62&quot;)\">(...)</span> <em>Group section</em></div>\n\t<div><span id=\"selectableSpan63\" onclick=\"selectText(&quot;selectableSpan63&quot;)\">[abc]</span> <em>In range (a, b or c)</em></div>\n\t<div><span id=\"selectableSpan64\" onclick=\"selectText(&quot;selectableSpan64&quot;)\">[0-9]</span> <em>any of the digits between the brackets</em></div>\n\t<div><span id=\"selectableSpan65\" onclick=\"selectText(&quot;selectableSpan65&quot;)\">[^abc]</span> <em>Not in range</em></div>\n\t<div><span id=\"selectableSpan66\" onclick=\"selectText(&quot;selectableSpan66&quot;)\">\\s</span> <em>White space</em></div>\n\t<div><span id=\"selectableSpan67\" onclick=\"selectText(&quot;selectableSpan67&quot;)\">a?</span> <em>Zero or one of a</em></div>\n\t<div><span id=\"selectableSpan68\" onclick=\"selectText(&quot;selectableSpan68&quot;)\">a*</span> <em>Zero or more of a</em></div>\n\t<div><span id=\"selectableSpan69\" onclick=\"selectText(&quot;selectableSpan69&quot;)\">a*?</span> <em>Zero or more, ungreedy</em></div>\n\t<div><span id=\"selectableSpan70\" onclick=\"selectText(&quot;selectableSpan70&quot;)\">a+</span> <em>One or more of a</em></div>\n\t<div><span id=\"selectableSpan71\" onclick=\"selectText(&quot;selectableSpan71&quot;)\">a+?</span> <em>One or more, ungreedy</em></div>\n\t<div><span id=\"selectableSpan72\" onclick=\"selectText(&quot;selectableSpan72&quot;)\">a{2}</span> <em>Exactly 2 of a</em></div>\n\t<div><span id=\"selectableSpan73\" onclick=\"selectText(&quot;selectableSpan73&quot;)\">a{2,}</span> <em>2 or more of a</em></div>\n\t<div><span id=\"selectableSpan74\" onclick=\"selectText(&quot;selectableSpan74&quot;)\">a{,5}</span> <em>Up to 5 of a</em></div>\n\t<div><span id=\"selectableSpan75\" onclick=\"selectText(&quot;selectableSpan75&quot;)\">a{2,5}</span> <em>2 to 5 of a</em></div>\n\t<div><span id=\"selectableSpan76\" onclick=\"selectText(&quot;selectableSpan76&quot;)\">a{2,5}?</span> <em>2 to 5 of a, ungreedy</em></div>\n\t<div><span id=\"selectableSpan77\" onclick=\"selectText(&quot;selectableSpan77&quot;)\">[:punct:]</span> <em>Any punctu­ation symbol</em></div>\n\t<div><span id=\"selectableSpan78\" onclick=\"selectText(&quot;selectableSpan78&quot;)\">[:space:]</span> <em>Any space character</em></div>\n\t<div><span id=\"selectableSpan79\" onclick=\"selectText(&quot;selectableSpan79&quot;)\">[:blank:]</span> <em>Space or tab</em></div>\n</div>\n<hr>\n<p>// to be added:</p>\n<ul>\n<li>working with objects and arrays using <code>Rest</code> and <code>Spread</code>.</li>\n<li></li>\n</ul>\n",
      "id": 57
    }
  ]
}